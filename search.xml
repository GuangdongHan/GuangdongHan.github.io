<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>STL-上篇</title>
    <url>/2022/06/07/STL-%E4%B8%8A%E7%AF%87/</url>
    <content><![CDATA[<p><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%871.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%872.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%873.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%874.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%875.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%876.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%877.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%878.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%879.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8710.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8711.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8712.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8713.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8714.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8715.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8716.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8717.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8718.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8719.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8720.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8721.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8722.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8723.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8724.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8725.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8726.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8727.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8728.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8729.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8730.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8731.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8732.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8733.SVG"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++相关注意点</title>
    <url>/2022/06/06/C%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    <content><![CDATA[<p>#数组当作形参传递</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//作为形参的数组将退化成指针，尤其是通过形参获取数组大小的时候容易出错，数组当作形参应该尽可能回避，</span></span><br><span class="line"><span class="comment">//解决方案1：显示传递数组的大小；</span></span><br><span class="line"><span class="comment">//		 2： 使用结构体封装下数组；传递结构体指针</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArrInfo0</span><span class="params">(<span class="type">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl; <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArrInfo1</span><span class="params">(<span class="type">int</span> arr[MAX])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArrInfo2</span><span class="params">(<span class="type">int</span> (*arr)[MAX])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(*arr) / <span class="built_in">sizeof</span>((*arr)[<span class="number">0</span>])&lt;&lt; endl;<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArrInfo3</span><span class="params">(<span class="type">int</span>* arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a[MAX] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line">	<span class="built_in">printArrInfo0</span>(a);</span><br><span class="line">	<span class="built_in">printArrInfo1</span>(a);</span><br><span class="line">	<span class="built_in">printArrInfo2</span>(&amp;a);</span><br><span class="line">	<span class="built_in">printArrInfo3</span>(a);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//64位机器测试</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* p1 = str;</span><br><span class="line">    <span class="type">void</span>* p2 = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sizeof(str)=&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(str)&lt;&lt; std::endl; <span class="comment">//6</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sizeof(p1)=&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(p1) &lt;&lt; std::endl; <span class="comment">//8</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sizeof(p2)=&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(p2) &lt;&lt; std::endl; <span class="comment">//8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="编写strcpy函数"><a href="#编写strcpy函数" class="headerlink" title="编写strcpy函数"></a>编写strcpy函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">strcpy</span><span class="params">(<span class="type">char</span>* desStr, <span class="type">char</span>* srcStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">assert</span>((desStr != <span class="literal">NULL</span>) &amp;&amp; (srcStr != <span class="literal">NULL</span>));</span><br><span class="line">	<span class="type">char</span>* address = desStr;</span><br><span class="line">	<span class="keyword">while</span>((*strDest++ = *strSrc) != <span class="string">&#x27;0&#x27;</span>) <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">为什么还需要<span class="type">char</span> *类型返回值？</span><br><span class="line">答：为了实现链式表达式，如：</span><br><span class="line"><span class="type">int</span> lengh = <span class="built_in">strlen</span>(<span class="built_in">strcpy</span>(desStr,<span class="string">&quot;kkkk&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="编写strstr"><a href="#编写strstr" class="headerlink" title="编写strstr"></a>编写strstr</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">findSubStr</span><span class="params">(<span class="type">char</span>* src, <span class="type">const</span> <span class="type">char</span>* sub)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* srcp = src;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* subp = sub;</span><br><span class="line">	<span class="keyword">if</span> ((<span class="literal">NULL</span> == src) || (<span class="literal">NULL</span> == sub))<span class="comment">//pos 未判空</span></span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> src;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (*src)</span><br><span class="line">	&#123;</span><br><span class="line">		srcp = src;</span><br><span class="line">		subp = sub;</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!*subp) <span class="comment">//到了子串结束的位置，表示找到了</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> src;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">while</span> (*srcp++ == *subp++);</span><br><span class="line">		src += <span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="float-判断相等-转化为-gt-lt"><a href="#float-判断相等-转化为-gt-lt" class="headerlink" title="float 判断相等 转化为&gt;=, &lt;="></a>float 判断相等 转化为&gt;=, &lt;=</h3><p>const float EPSION = 0.000001;<br>if((x &gt;= EPSION) &amp;&amp; (x &lt;= EPSION))</p>
<h3 id="内存相关"><a href="#内存相关" class="headerlink" title="内存相关"></a>内存相关</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 崩溃getMenory值无法传递动态内存，str 始终为空，调用strpy会崩溃；</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMemory</span><span class="params">(<span class="type">char</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">getMemory</span>(str);</span><br><span class="line">	<span class="built_in">strcpy</span>(str,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 能够输出hello，但是会发生内存泄漏；</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMemory</span><span class="params">(<span class="type">char</span>** p， <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	*p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">getMemory</span>(&amp;str, <span class="number">100</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(str,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 传递栈内存的指针，指针可能不为空，但是内容未知，可能是乱码， </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">getMemory</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> p[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line">	str =<span class="built_in">getMemory</span>();</span><br><span class="line">	<span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 篡改动态内存区的内容，后果未定义，问题难以定位，free后，str为野指针；</span><br><span class="line"><span class="comment">//好习惯free后指NULL</span></span><br><span class="line"><span class="type">void</span> main</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span>* str = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(str, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(str);</span><br><span class="line">	<span class="keyword">if</span>(str != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(str, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(str);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>STL-下篇</title>
    <url>/2022/06/07/STL-%E4%B8%8B%E7%AF%87/</url>
    <content><![CDATA[<p><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%871.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%872.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%873.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%874.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%875.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%876.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%877.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%878.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%879.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8710.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8711.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8712.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8713.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8714.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8715.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8716.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8717.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8718.SVG"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Share_ptr</title>
    <url>/2022/06/04/Share-ptr/</url>
    <content><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>一些编程技巧<br>在线程函数内而非全局定义使用static 可以限定作用域，只有在线程函数内使用，意义更加明确，防止其他函数误用；<br>使用RAII机制 std::lock_guard<a href="std::mutex">std::mutex</a> lk(io_mutex)解决资源释放问题；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;  Base::Base()\n&quot;</span>; &#125;</span><br><span class="line">    <span class="comment">// Note: non-virtual destructor is OK here</span></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;  Base::~Base()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Derived</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;  Derived::Derived()\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;  Derived::~Derived()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thr</span><span class="params">(std::shared_ptr&lt;Base&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">    std::shared_ptr&lt;Base&gt; lp = p; <span class="comment">// thread-safe, even though the</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">static</span> std::mutex io_mutex;</span><br><span class="line"></span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(io_mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        std::cout &lt;&lt;<span class="string">&quot;thread id = &quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>()&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;mutex id = &quot;</span> &lt;&lt; io_mutex.<span class="built_in">native_handle</span>() &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;local pointer in a thread:\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;  lp.get() = &quot;</span> &lt;&lt; p.<span class="built_in">get</span>()</span><br><span class="line">            &lt;&lt; <span class="string">&quot;, lp.use_count() = &quot;</span> &lt;&lt; p.<span class="built_in">use_count</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::shared_ptr&lt;Base&gt; p = std::<span class="built_in">make_shared</span>&lt;Derived&gt;();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Created a shared Derived (as a pointer to Base)\n&quot;</span></span><br><span class="line">        &lt;&lt; <span class="string">&quot;  p.get() = &quot;</span> &lt;&lt; p.<span class="built_in">get</span>()</span><br><span class="line">        &lt;&lt; <span class="string">&quot;, p.use_count() = &quot;</span> &lt;&lt; p.<span class="built_in">use_count</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(thr, p)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(thr, p)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t3</span><span class="params">(thr, p)</span></span>;</span><br><span class="line">    p.<span class="built_in">reset</span>(); <span class="comment">// release ownership from main</span></span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;Shared ownership between 3 threads and released\n&quot;</span></span><br><span class="line">    <span class="comment">//    &lt;&lt; &quot;ownership from main:\n&quot;</span></span><br><span class="line">    <span class="comment">//    &lt;&lt; &quot;  p.get() = &quot; &lt;&lt; p.get()</span></span><br><span class="line">    <span class="comment">//    &lt;&lt; &quot;, p.use_count() = &quot; &lt;&lt; p.use_count() &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    t3.<span class="built_in">join</span>();</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;All threads completed, the last one deleted Derived\n&quot;;</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"></span><br><span class="line">    <span class="built_in">Test</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;construct void&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="type">int</span> a):<span class="built_in">num</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;construct int&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Test</span>(string str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;construct string&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Test</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;de construct1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> a)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        num = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;num = &quot;</span>&lt;&lt; num &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">getSharedPtr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;Test&gt;(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_shared_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">//通过构造函数初始化</span></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> Test(<span class="string">&quot;helo&quot;</span>))</span></span>;</span><br><span class="line">    cout&lt;&lt;p1.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//通过移动构造和拷贝构造初始化</span></span><br><span class="line">    shared_ptr&lt;Test&gt; p2 = p1;</span><br><span class="line">    cout&lt;&lt;p1.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;p2.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    shared_ptr&lt;Test&gt; p3 = <span class="built_in">move</span>(p1);</span><br><span class="line">    cout&lt;&lt;p1.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;p2.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;p3.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">     <span class="comment">//通过make_shared</span></span><br><span class="line">    shared_ptr&lt;Test&gt; p4 = <span class="built_in">make_shared</span>&lt;Test&gt;(<span class="string">&quot;yyyy&quot;</span>);</span><br><span class="line">    shared_ptr&lt;Test&gt; p5 = <span class="built_in">make_shared</span>&lt;Test&gt;(<span class="number">666</span>);</span><br><span class="line">    cout&lt;&lt;p4.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;p5.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">     <span class="comment">//通过reset初始化</span></span><br><span class="line">    p4.<span class="built_in">reset</span>();</span><br><span class="line">    p5.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">Test</span>(<span class="number">888</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用（1）通过原始指针</span></span><br><span class="line">    Test* p = p1.<span class="built_in">get</span>();</span><br><span class="line">    p-&gt;<span class="built_in">printValue</span>();</span><br><span class="line">    <span class="comment">//使用（2）通过智能指针</span></span><br><span class="line">    p5-&gt;<span class="built_in">printValue</span>();</span><br><span class="line">    <span class="comment">//共享指针对象后面通过.或-&gt; 意义差别很大，.操作符是作用共享指针对象，-&gt;是作用于管理的原始指针对象</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">//非必须，默认的可以用</span></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">p1</span> <span class="params">(<span class="keyword">new</span> Test(<span class="number">999</span>), [](Test* p)&#123; <span class="keyword">delete</span> p;</span></span></span><br><span class="line"><span class="params"><span class="function">    cout &lt;&lt; <span class="string">&quot;destructor&quot;</span>&lt;&lt; endl;&#125;)</span></span>;</span><br><span class="line">    <span class="comment">//必须，数组必须写删除器 或者使用默认构造器</span></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">p2</span><span class="params">(<span class="keyword">new</span> Test[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;, [](Test* p)&#123; <span class="keyword">delete</span> []p;</span></span></span><br><span class="line"><span class="params"><span class="function">    cout &lt;&lt; <span class="string">&quot;destructor[]&quot;</span>&lt;&lt; endl;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> Test[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;, default_delete&lt;Test[]&gt;())</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_unique_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">//构造函数初始化</span></span><br><span class="line">    <span class="function">unique_ptr&lt;Test&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> Test(<span class="number">001</span>))</span></span>;</span><br><span class="line">    <span class="comment">//移动构造初始化</span></span><br><span class="line">    unique_ptr&lt;Test&gt; p2 = <span class="built_in">move</span>(p1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//reset初始化</span></span><br><span class="line">    p2.<span class="built_in">reset</span>();</span><br><span class="line">    <span class="function">unique_ptr&lt;Test&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> Test(<span class="number">001</span>))</span></span>;</span><br><span class="line">    <span class="comment">//获取原始指针</span></span><br><span class="line">    p3.<span class="built_in">get</span>();</span><br><span class="line">    <span class="comment">//操作函数，可以使用原始指针也可以使用，智能指针</span></span><br><span class="line">    p3-&gt;<span class="built_in">printValue</span>();</span><br><span class="line">    p3.<span class="built_in">get</span>()-&gt;<span class="built_in">printValue</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除器的使用1)没有捕捉变量相当于函数指针；</span></span><br><span class="line">    <span class="keyword">using</span> ptrFunc = <span class="built_in">void</span> (*)(Test*);</span><br><span class="line">    <span class="function">unique_ptr&lt;Test, ptrFunc&gt; <span class="title">p4</span><span class="params">(<span class="keyword">new</span> Test(<span class="number">100</span>), [](Test* p)&#123;<span class="keyword">delete</span> p;&#125;)</span></span>;</span><br><span class="line">    <span class="comment">//删除器的使用2)有捕捉变量相当于仿函数；</span></span><br><span class="line">    unique_ptr&lt;Test, function&lt;<span class="type">void</span>(Test*)&gt;&gt; <span class="built_in">p5</span>(<span class="keyword">new</span> <span class="built_in">Test</span>(<span class="number">100</span>), [=](Test* p)&#123;<span class="keyword">delete</span> p;&#125;);</span><br><span class="line">    <span class="comment">//独占智能指针可以管理数组类型地址，即可以自动释放</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    <span class="function">unique_ptr&lt;Test[]&gt; <span class="title">p5</span><span class="params">(<span class="keyword">new</span> Test[<span class="number">3</span>])</span></span>;</span><br><span class="line">    <span class="comment">//c++ 11 不支持，c++14 支持</span></span><br><span class="line">    <span class="function">shared_ptr&lt;Test[]&gt; <span class="title">p6</span><span class="params">(<span class="keyword">new</span> Test[<span class="number">3</span>])</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_weak_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//weak_ptr 可以用shared_ptr初始化并且不增加引用计数</span></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> Test(<span class="number">10</span>))</span></span>;</span><br><span class="line">    cout&lt;&lt; sp.<span class="built_in">use_count</span>()&lt;&lt;endl; <span class="comment">//1</span></span><br><span class="line">    <span class="function">weak_ptr&lt;Test&gt; <span class="title">wp</span> <span class="params">(sp)</span></span>;</span><br><span class="line">    cout&lt;&lt; sp.<span class="built_in">use_count</span>()&lt;&lt;endl; <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//weak_ptr 需要和shared_ptr配合使用</span></span><br><span class="line">    <span class="comment">//share_ptr 存在问题1）不能使用同一块内存初始化多个共享指针对象；</span></span><br><span class="line">    <span class="comment">//                 2) 函数不能返回管理this指针的共享指针对象；</span></span><br><span class="line">    <span class="comment">//                 3) 共享指针不能循环引用</span></span><br><span class="line">    <span class="comment">//这样会析构两次，可以copy 构造</span></span><br><span class="line">    <span class="comment">// Test * p = new Test();</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;Test&gt; p1(p);</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;Test&gt; p2(p); //error</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;Test&gt; p2 = p1; //OK</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2) 函数不能返回管理this指针的共享指针对象；</span></span><br><span class="line">    <span class="comment">//这样会析构两次，可以copy 构造,本质上还是同一块内存初始化两个共享指针对象，会析构两次</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;Test&gt; p3(new Test());</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;Test&gt; p4 = p3-&gt;getSharedPtr();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决方案</span></span><br><span class="line">    <span class="comment">//enable_shared_from_this类中通过weak_ptr实现</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">test2</span> : <span class="keyword">public</span> enable_shared_from_this&lt;test2&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">test2</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;construct test2&quot;</span> &lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">test2</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;destruct test2&quot;</span> &lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">shared_ptr&lt;test2&gt; <span class="title">getSharedPtr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">shared_from_this</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;test2&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> test2())</span></span>;</span><br><span class="line">    cout&lt;&lt;p3.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    shared_ptr&lt;test2&gt; p4 = p3-&gt;<span class="built_in">getSharedPtr</span>();</span><br><span class="line">    cout&lt;&lt;p3.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3) 共享指针不能循环引用</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">A</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">B</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">A</span></span><br><span class="line">    &#123;</span><br><span class="line">        shared_ptr&lt;B&gt; ptr;</span><br><span class="line">        ~<span class="built_in">A</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;A_destruct&quot;</span> &lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">B</span></span><br><span class="line">    &#123;</span><br><span class="line">        shared_ptr&lt;A&gt; ptr;</span><br><span class="line">        ~<span class="built_in">B</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;B_destruct&quot;</span> &lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//形成闭环，造成内存泄漏</span></span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">spA</span> <span class="params">(<span class="keyword">new</span> A)</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">spB</span> <span class="params">(<span class="keyword">new</span> B)</span></span>;</span><br><span class="line">spA-&gt;ptr = spB;</span><br><span class="line">spB-&gt;ptr = spA;</span><br><span class="line">cout&lt;&lt; spA.<span class="built_in">use_count</span>()&lt;&lt;endl;<span class="comment">//2</span></span><br><span class="line">cout&lt;&lt; spB.<span class="built_in">use_count</span>()&lt;&lt;endl;<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决方案将struct A 或者struct B，</span></span><br><span class="line"><span class="comment">//任意一个改成weak_ptr, weak_ptr 来保存Shared_ptr类型的地址, 并且改变引用计数的值</span></span><br><span class="line"><span class="comment">// 比如改为：</span></span><br><span class="line"><span class="comment">// struct A</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         weak_ptr&lt;B&gt; ptr;</span></span><br><span class="line"><span class="comment">//         ~A()</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             cout &lt;&lt; &quot;A_destruct&quot; &lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="built_in">test_weak_ptr</span>();</span><br><span class="line">    cin.<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="手写Shared-ptr"><a href="#手写Shared-ptr" class="headerlink" title="手写Shared_ptr"></a>手写Shared_ptr</h2><p>//TODO</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SharedPtr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SharedPtr</span>(T* ptr = <span class="literal">NULL</span>):<span class="built_in">m_ptr</span>(ptr), <span class="built_in">m_count</span>(<span class="keyword">new</span> <span class="built_in">int</span>())</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T&amp; <span class="title">SharedPtr</span><span class="params">(<span class="type">const</span> SharedPtr&lt;T&gt;&amp; S)</span>:m_ptr(s.m_ptr), m_pcount(S.m_pcount)</span></span><br><span class="line"><span class="function">    &#123;</span>   </span><br><span class="line">        (*m_pcount)++</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 注意此时操作符左边引用计数需要--</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>=(<span class="type">const</span> SharedPtr&lt;T&gt;&amp; S)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;S)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(--(*(<span class="keyword">this</span>-&gt;m_pcount)) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_ptr;</span><br><span class="line">                <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_pcount;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_ptr = S.m_ptr;</span><br><span class="line">            m_pcount = S.m_pcount；</span><br><span class="line">            *(m_pcount)++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">SharedPtr</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        --(*(<span class="keyword">this</span>-&gt;m_pcount));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(*(<span class="keyword">this</span>-&gt;m_pcount) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_ptr;</span><br><span class="line">            m_Ptr = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">delete</span> m_pcount;</span><br><span class="line">            m_pcount = NUll;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *(<span class="keyword">this</span>-&gt;m_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    T* m_ptr;</span><br><span class="line">    <span class="type">int</span>* m_pcount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Shared-ptr-与-vector"><a href="#Shared-ptr-与-vector" class="headerlink" title="Shared_ptr 与 vector"></a>Shared_ptr 与 vector</h2><p>结论：通过vector clear 方法调用隐式调用Shared_ptr delete 可以释放内存<br>      即使是返回static vector 引用也可以释放内存<br>如果用 vector&lt;TEST*&gt; 则会产生内存泄漏，不会释放引用内存</p>
<p>此外注意如果返回static 的变量的引用同样不会释放内存，会导致内存泄漏；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TEST</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TEST</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;construct&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">TEST</span>(<span class="type">const</span> TEST&amp; t)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;copy construct&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">TEST</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;destruct&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt; <span class="built_in">create_instannce</span>(<span class="type">int</span> num)</span><br><span class="line">    &#123;</span><br><span class="line">        std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt; V;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i =<span class="number">0</span>; i&lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            V.<span class="built_in">push_back</span>(std::<span class="built_in">shared_ptr</span>&lt;TEST&gt;(<span class="keyword">new</span> TEST));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt; v = Factory::<span class="built_in">create_instannce</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">construct</span><br><span class="line">construct</span><br><span class="line">construct</span><br><span class="line">**********************</span><br><span class="line">destruct</span><br><span class="line">destruct</span><br><span class="line">destruct</span><br><span class="line">**********************</span><br><span class="line">```cpp</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> std::vector&lt;TEST*&gt; <span class="title">create_instannce</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::vector&lt;TEST*&gt; V;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            V.<span class="built_in">push_back</span>(<span class="keyword">new</span> TEST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;TEST*&gt; v = Factory2::<span class="built_in">create_instannce</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">construct</span><br><span class="line">construct</span><br><span class="line">construct</span><br><span class="line">**********************</span><br><span class="line">**********************</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Factory3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt;&amp; <span class="built_in">create_instannce</span>(<span class="type">int</span> num)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m_vInstance.<span class="built_in">push_back</span>(std::<span class="built_in">shared_ptr</span>&lt;TEST&gt;(<span class="keyword">new</span> TEST));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_vInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt; m_vInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt; Factory3::m_vInstance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt;&amp; v = Factory3::<span class="built_in">create_instannce</span>(<span class="number">3</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>1、<a href="https://en.cppreference.com/w/cpp/memory/shared_ptr">https://en.cppreference.com/w/cpp/memory/shared_ptr</a><br>2、<a href="https://subingwen.cn/cplusplus/">https://subingwen.cn/cplusplus/</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Singleton</title>
    <url>/2022/06/15/Singleton/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line">### 单例模式</span><br><span class="line">保证一个类仅有一个实例，并提供一个该实例的全局访问点</span><br><span class="line"><span class="comment">//单线程版本</span></span><br><span class="line"><span class="comment">//class Singleton</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//public: </span></span><br><span class="line"><span class="comment">//	static Singleton* get_instance();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//private:</span></span><br><span class="line"><span class="comment">//	Singleton() &#123;&#125;;</span></span><br><span class="line"><span class="comment">//	Singleton(const Singleton&amp; obj) &#123;&#125;;</span></span><br><span class="line"><span class="comment">//private:</span></span><br><span class="line"><span class="comment">//	static Singleton* m_instance;</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Singleton* Singleton::m_instance = nullptr;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Singleton* Singleton::get_instance(void)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	if (nullptr == m_instance)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		m_instance = new Singleton();</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	return m_instance;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两次检查</span></span><br><span class="line"><span class="comment">// class Singleton</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//public:</span></span><br><span class="line"><span class="comment">//	static Singleton* get_instance();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//private:</span></span><br><span class="line"><span class="comment">//	Singleton() &#123;&#125;;</span></span><br><span class="line"><span class="comment">//	Singleton(const Singleton &amp; obj) &#123;&#125;;</span></span><br><span class="line"><span class="comment">//private:</span></span><br><span class="line"><span class="comment">//	static Singleton* m_instance;</span></span><br><span class="line"><span class="comment">//	static std::mutex m_mutex;</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Singleton* Singleton::m_instance = nullptr;</span></span><br><span class="line"><span class="comment">//std::mutex Singleton::m_mutex;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Singleton* Singleton::get_instance(void)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	if (nullptr == m_instance)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		std::lock_guard&lt;std::mutex&gt; lock(m_mutex);</span></span><br><span class="line"><span class="comment">//		if (nullptr == m_instance)</span></span><br><span class="line"><span class="comment">//		&#123;</span></span><br><span class="line"><span class="comment">//			m_instance = new Singleton();</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	return m_instance;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//***********************************************************</span></span><br><span class="line"><span class="comment">//C++11 volatile 实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> Singleton* <span class="title">get_instance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">Singleton</span>() &#123;&#125;;</span><br><span class="line">	<span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp; obj) &#123;&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">static</span> std::atomic&lt;Singleton*&gt; m_instance;</span><br><span class="line">	<span class="type">static</span> std::mutex m_mutex;</span><br><span class="line">&#125;;</span><br><span class="line">std::atomic&lt;Singleton*&gt; Singleton::m_instance;</span><br><span class="line">std::mutex Singleton::m_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::get_instance</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Singleton* tmp = m_instance.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">	std::<span class="built_in">atomic_thread_fence</span>(std::memory_order_acquire);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">nullptr</span> == tmp)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="literal">nullptr</span> == tmp)</span><br><span class="line">		&#123;</span><br><span class="line">			tmp = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">			std::<span class="built_in">atomic_thread_fence</span>(std::memory_order_release);</span><br><span class="line">			m_instance.<span class="built_in">store</span>(tmp, std::memory_order_relaxed);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>const</title>
    <url>/2022/06/06/const/</url>
    <content><![CDATA[<p>#c++ 非const 指针指向强转后的const 变量后会带来风险， c++ 更侧重常量性</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.cpp文件编译 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)&amp;i;</span><br><span class="line">	*p = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span> j = i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);   <span class="comment">//i = 10</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;j = %d\n&quot;</span>, j);   <span class="comment">//j = 10</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p);  <span class="comment">//*p =100</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&amp;i = %p\n&quot;</span>, &amp;i); <span class="comment">//00000016B1F5FB74</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&amp;j = %p\n&quot;</span>, &amp;j); <span class="comment">//00000016B1F5FB74</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;p = %p \n&quot;</span>, p);  <span class="comment">//00000016B1F5FB74</span></span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .c 文件编译</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)&amp;i;</span><br><span class="line">	*p = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span> j = i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);   <span class="comment">//i = 100</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;j = %d\n&quot;</span>, j);   <span class="comment">//j = 100</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p);  <span class="comment">//*p =100</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;&amp;i = %p\n&quot;</span>, &amp;i); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;&amp;j = %p\n&quot;</span>, &amp;j); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p = %p \n&quot;</span>, p);  </span><br><span class="line">	getchar();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>condition variable</title>
    <url>/2022/07/02/condition-variable/</url>
    <content><![CDATA[<h3 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h3><p>99%的实际并发问题都可以使用生产者消费者问题解决</p>
<h4 id="version-1"><a href="#version-1" class="headerlink" title="version 1"></a>version 1</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;thread-sync.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> n, count = <span class="number">0</span>;</span><br><span class="line"><span class="type">mutex_t</span> lk = <span class="built_in">MUTEX_INIT</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tproduce</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">retry:</span><br><span class="line">        <span class="built_in">mutex_lock</span>(&amp;lk);</span><br><span class="line">        <span class="keyword">if</span>(count == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mutex_unlock</span>(&amp;lock);</span><br><span class="line">            <span class="keyword">goto</span> Retry;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="built_in">mutex_unlock</span>(&amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tconsume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">retry:</span><br><span class="line">        <span class="built_in">mutex_lock</span>(&amp;lk);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mutex_unlock</span>(&amp;lock);</span><br><span class="line">            <span class="keyword">goto</span> Retry;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="built_in">mutex_unlock</span>(&amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(argc == <span class="number">2</span>);</span><br><span class="line">    n = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">setbuff</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">create</span>(Tproduce);</span><br><span class="line">        <span class="built_in">create</span>(Tconsume);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="version2-自旋变睡眠"><a href="#version2-自旋变睡眠" class="headerlink" title="version2 自旋变睡眠"></a>version2 自旋变睡眠</h3><p>只适用一个生产者，一个消费者，因为无法确保，生产者只唤醒消费者，消费者只唤醒生产者</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 条件变量API</span></span><br><span class="line"><span class="comment">// 1. wait(cv, mutex) 调用时必须保证已经获得mutex; 释放mutex.进入睡眠状态</span></span><br><span class="line"><span class="comment">// 2. signal、notify(cv) 私信：走起</span></span><br><span class="line"><span class="comment">// 3. broadcast,nitifyall(cv) 所有人走起，唤醒所有人正在等待的线程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tproduce</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mutex_lock</span>(&amp;lk);</span><br><span class="line">        <span class="keyword">if</span>(count == n)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">cond_wait</span>(&amp;cv,&amp;lk);</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="built_in">cond_signal</span>(&amp;cv);</span><br><span class="line">        <span class="built_in">mutex_unlock</span>(&amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tconsume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mutex_lock</span>(&amp;lk);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">cond_wait</span>(&amp;cv,&amp;lk);</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="built_in">cond_signal</span>(&amp;cv);</span><br><span class="line">        <span class="built_in">mutex_unlock</span>(&amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="条件变量正确使用方式-if-gt-while"><a href="#条件变量正确使用方式-if-gt-while" class="headerlink" title="条件变量正确使用方式 if -&gt;while"></a>条件变量正确使用方式 if -&gt;while</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tproduce</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mutex_lock</span>(&amp;lk);</span><br><span class="line">        <span class="keyword">while</span>(!(count != n))</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">cond_wait</span>(&amp;cv, &amp;lk);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//assert(count !=n ); 代码执行到这里，能够保证count != n, 并且占有互斥锁</span></span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="built_in">cond_broadcast</span>(&amp;cv);</span><br><span class="line">        <span class="built_in">mutex_unlock</span>(&amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tconsume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mutex_lock</span>(&amp;lk);</span><br><span class="line">        <span class="keyword">while</span>(!(count != <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">cond_wait</span>(&amp;cv,&amp;lk);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">assert</span>(count !=<span class="number">0</span>);</span><br><span class="line">        count--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="built_in">cond_broadcast</span>(&amp;cv);</span><br><span class="line">        <span class="built_in">mutex_unlock</span>(&amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//万能方法</span></span><br><span class="line">需要等待的条件满足时：</span><br><span class="line"></span><br><span class="line"><span class="built_in">mutex_lock</span>(&amp;mutex);</span><br><span class="line"><span class="keyword">while</span>(!cond)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">wait</span>(&amp;cv, &amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">assert</span>(cond)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 互斥锁保证</span></span><br><span class="line"><span class="comment">//此时cond 一定满足</span></span><br><span class="line"><span class="built_in">mutex_unlock</span>(&amp;mutex);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//其他线程条件满足时</span></span><br><span class="line"><span class="built_in">broadcast</span>(&amp;cv);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="哲学家吃饭问题"><a href="#哲学家吃饭问题" class="headerlink" title="哲学家吃饭问题"></a>哲学家吃饭问题</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mutex_lock</span>(&amp;mutex)；</span><br><span class="line"><span class="keyword">while</span>(!(avai[left] &amp;&amp; avai[right]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cond_wait</span>(&amp;cv, &amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line">avai[left] = avai[right] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">mutex_unlock</span>(&amp;mutex) <span class="comment">//吃饭</span></span><br><span class="line"><span class="comment">//吃饭</span></span><br><span class="line"><span class="built_in">mutex_lock</span>(&amp;mutex)；</span><br><span class="line">avai[left] = avai[righgt] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">broadcast</span>(&amp;cv);</span><br><span class="line"><span class="built_in">mutex_unlock</span>(&amp;mutex); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo 消费者子线程等待特定条件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> g_num = <span class="number">0</span>;</span><br><span class="line">condition_variable cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">workThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> process_num = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		std::mutex mu;</span><br><span class="line">		unique_lock&lt;std::mutex&gt;<span class="built_in">lk</span>(mu);</span><br><span class="line">		std::cv_status st = std::cv_status::no_timeout;</span><br><span class="line">		<span class="keyword">while</span> (process_num &gt; g_num)</span><br><span class="line">		&#123;</span><br><span class="line">            <span class="comment">//等待生产者最多2s</span></span><br><span class="line">			st = cv.<span class="built_in">wait_for</span>(lk, <span class="number">2</span>s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (st == std::cv_status::timeout)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;timeout&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;process num = &quot;</span> &lt;&lt; process_num &lt;&lt; endl;</span><br><span class="line">		process_num++;</span><br><span class="line">		<span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="function">std::thread <span class="title">worker</span><span class="params">(workThread)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		g_num += <span class="number">1</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;g_num = &quot;</span> &lt;&lt; g_num &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (g_num % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cv.<span class="built_in">notify_one</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">Sleep</span>(<span class="number">500</span>);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	worker.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h4><p> <a href="https://jyywiki.cn/">https://jyywiki.cn/</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>线程同步</tag>
      </tags>
  </entry>
  <entry>
    <title>关系容器</title>
    <url>/2022/07/03/RBT%20and%20HashTable%20STL%20%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="RBT"><a href="#RBT" class="headerlink" title="RBT"></a>RBT</h3><p>是一种平衡二叉搜索树（中序遍历有序）；<br>性质：</p>
<ol>
<li>节点不是红色就是黑色的，</li>
<li>根节点是黑色的；</li>
<li>如果一个节点是红色的，则两个子节点是黑色的；</li>
<li>黑色节点的高度一致；<br>与avl对比：<br>AVL的左右子树高度差不能超过1，每次进行插入/删除操作时，几乎都需要通过旋转操作保持平衡<br>在频繁进行插入/删除的场景中，频繁的旋转操作使得AVL的性能大打折扣<br>红黑树通过牺牲严格的平衡，换取插入/删除时少量的旋转操作，整体性能优于AVL<br>红黑树插入时的不平衡，不超过两次旋转就可以解决；删除时的不平衡，不超过三次旋转就能解决<br>红黑树的红黑规则，保证最坏的情况下，也能在O(log2N) 时间内完成查找操作。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">STL map 源码</span><br><span class="line"><span class="comment">// map 类型是一种红黑树</span></span><br><span class="line"><span class="keyword">typedef</span> _Rb_tree&lt;key_type, value_type, _Select1st&lt;value_type&gt;,</span><br><span class="line">		       key_compare, _Pair_alloc_type&gt; _Rep_type;</span><br><span class="line"><span class="comment">// The actual tree structure.</span></span><br><span class="line">  _Rep_type _M_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">//红黑树数据定义</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Key, <span class="keyword">typename</span> _Val, <span class="keyword">typename</span> _KeyOfValue,</span><br><span class="line">	   <span class="keyword">typename</span> _Compare, <span class="keyword">typename</span> _Alloc = allocator&lt;_Val&gt; &gt;</span><br><span class="line"><span class="comment">// _Key： 用来比较排序的key的类型</span></span><br><span class="line"><span class="comment">// _Val: 具体节点类型，包括key和data 通过这种方式达到map 和 set 的统一，set中 key和value是一致的。</span></span><br><span class="line"><span class="comment">// _KeyOfValue: 提供方法获得key;</span></span><br><span class="line"><span class="comment">//_compare 用来比较key的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rbt 最主要数据_M_storage </span></span><br><span class="line"><span class="keyword">struct</span> _Rb_tree_node_base</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">typedef</span> _Rb_tree_node_base* _Base_ptr;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">const</span> _Rb_tree_node_base* _Const_Base_ptr;</span><br><span class="line"></span><br><span class="line">    _Rb_tree_color	_M_color;</span><br><span class="line">    _Base_ptr		_M_parent;</span><br><span class="line">    _Base_ptr		_M_left;</span><br><span class="line">    _Base_ptr		_M_right;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> _Base_ptr</span><br><span class="line">    _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> (__x-&gt;_M_left != <span class="number">0</span>) __x = __x-&gt;_M_left;</span><br><span class="line">      <span class="keyword">return</span> __x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> _Const_Base_ptr</span><br><span class="line">    _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> (__x-&gt;_M_left != <span class="number">0</span>) __x = __x-&gt;_M_left;</span><br><span class="line">      <span class="keyword">return</span> __x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> _Base_ptr</span><br><span class="line">    _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> (__x-&gt;_M_right != <span class="number">0</span>) __x = __x-&gt;_M_right;</span><br><span class="line">      <span class="keyword">return</span> __x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> _Const_Base_ptr</span><br><span class="line">    _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> (__x-&gt;_M_right != <span class="number">0</span>) __x = __x-&gt;_M_right;</span><br><span class="line">      <span class="keyword">return</span> __x;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Rb_tree_node</span> : <span class="keyword">public</span> _Rb_tree_node_base</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">typedef</span> _Rb_tree_node&lt;_Val&gt;* _Link_type;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &lt; 201103L</span></span><br><span class="line">      _Val _M_value_field;</span><br><span class="line"></span><br><span class="line">      _Val*</span><br><span class="line">      _M_valptr()</span><br><span class="line">      &#123; <span class="keyword">return</span> std::__addressof(_M_value_field); &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">const</span> _Val*</span><br><span class="line">      _M_valptr() <span class="type">const</span></span><br><span class="line">      &#123; <span class="keyword">return</span> std::__addressof(_M_value_field); &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      __gnu_cxx::__aligned_membuf&lt;_Val&gt; _M_storage;</span><br><span class="line"></span><br><span class="line">      _Val*</span><br><span class="line">      _M_valptr()</span><br><span class="line">      &#123; <span class="keyword">return</span> _M_storage._M_ptr(); &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">const</span> _Val*</span><br><span class="line">      _M_valptr() <span class="type">const</span></span><br><span class="line">      &#123; <span class="keyword">return</span> _M_storage._M_ptr(); &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入 </span></span><br><span class="line">iterator</span><br><span class="line">	_M_insert_equal(_Arg&amp;&amp; __x);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Arg, <span class="keyword">typename</span> _NodeGen&gt;</span><br><span class="line">	iterator</span><br><span class="line">	_M_insert_unique_(const_iterator __pos, _Arg&amp;&amp; __x, _NodeGen&amp;);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>hash(key)/n = index<br>解决hash 冲突通常使用拉链法</p>
<p>负载因子： 散列表实际元素的个数/数组个数 ，如果大于1，则会扩容，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Key, <span class="keyword">typename</span> _Value, <span class="keyword">typename</span> _Alloc,</span><br><span class="line">	   <span class="keyword">typename</span> _ExtractKey, <span class="keyword">typename</span> _Equal,</span><br><span class="line">	   <span class="keyword">typename</span> _H1, <span class="keyword">typename</span> _H2, <span class="keyword">typename</span> _Hash,</span><br><span class="line">	   <span class="keyword">typename</span> _RehashPolicy, <span class="keyword">typename</span> _Traits&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Hashtable</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  @tparam _Value  CopyConstructible type.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _Key    CopyConstructible type.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _Alloc  An allocator type</span></span><br><span class="line"><span class="comment">   *  ([lib.allocator.requirements]) whose _Alloc::value_type is</span></span><br><span class="line"><span class="comment">   *  _Value.  As a conforming extension, we allow for</span></span><br><span class="line"><span class="comment">   *  _Alloc::value_type != _Value.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _ExtractKey  Function object that takes an object of type</span></span><br><span class="line"><span class="comment">   *  _Value and returns a value of type _Key.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _Equal  Function object that takes two objects of type k</span></span><br><span class="line"><span class="comment">   *  and returns a bool-like value that is true if the two objects</span></span><br><span class="line"><span class="comment">   *  are considered equal.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _H1  The hash function. A unary function object with</span></span><br><span class="line"><span class="comment">   *  argument type _Key and result type size_t. Return values should</span></span><br><span class="line"><span class="comment">   *  be distributed over the entire range [0, numeric_limits&lt;size_t&gt;:::max()].</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _H2  The range-hashing function (in the terminology of</span></span><br><span class="line"><span class="comment">   *  Tavori and Dreizin).  A binary function object whose argument</span></span><br><span class="line"><span class="comment">   *  types and result type are all size_t.  Given arguments r and N,</span></span><br><span class="line"><span class="comment">   *  the return value is in the range [0, N).</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _Hash  The ranged hash function (Tavori and Dreizin). A</span></span><br><span class="line"><span class="comment">   *  binary function whose argument types are _Key and size_t and</span></span><br><span class="line"><span class="comment">   *  whose result type is size_t.  Given arguments k and N, the</span></span><br><span class="line"><span class="comment">   *  return value is in the range [0, N).  Default: hash(k, N) =</span></span><br><span class="line"><span class="comment">   *  h2(h1(k), N).  If _Hash is anything other than the default, _H1</span></span><br><span class="line"><span class="comment">   *  and _H2 are ignored.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _RehashPolicy  Policy class with three members, all of</span></span><br><span class="line"><span class="comment">   *  which govern the bucket count. _M_next_bkt(n) returns a bucket</span></span><br><span class="line"><span class="comment">   *  count no smaller than n.  _M_bkt_for_elements(n) returns a</span></span><br><span class="line"><span class="comment">   *  bucket count appropriate for an element count of n.</span></span><br><span class="line"><span class="comment">   *  _M_need_rehash(n_bkt, n_elt, n_ins) determines whether, if the</span></span><br><span class="line"><span class="comment">   *  current bucket count is n_bkt and the current element count is</span></span><br><span class="line"><span class="comment">   *  n_elt, we need to increase the bucket count.  If so, returns</span></span><br><span class="line"><span class="comment">   *  make_pair(true, n), where n is the new bucket count.  If not,</span></span><br><span class="line"><span class="comment">   *  returns make_pair(false, &lt;anything&gt;)</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _Traits  Compile-time class with three boolean</span></span><br><span class="line"><span class="comment">   *  std::integral_constant members:  __cache_hash_code, __constant_iterators,</span></span><br><span class="line"><span class="comment">   *   __unique_keys.</span></span><br><span class="line"><span class="comment">   * /</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>

<p>将hashtable每个元素串成单链表的形式，有助于迭代器实现，<br>并且不需要；每个bucket都存在一个头指针<br><img src="/2022/07/03/RBT%20and%20HashTable%20STL%20%E5%AE%9E%E7%8E%B0/hashtable.jpeg">   </p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>github使用</title>
    <url>/2022/06/09/github%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="github-常用搜索条件"><a href="#github-常用搜索条件" class="headerlink" title="github 常用搜索条件"></a>github 常用搜索条件</h2><ol>
<li>名字：in:name XXX</li>
<li>描述：in:depscription XXX</li>
<li>作者名字：in:user XXX</li>
<li>readme: in:readme XXX</li>
<li>fork: fork:&gt;3000</li>
<li>stars: stars:&gt;5000</li>
<li>语言：language:XXX</li>
<li>更新时间: pushed:&gt;2020-01-01</li>
<li>仓库大小: size:&gt;2000 //unit kb</li>
<li>高级搜索：<a href="https://github.com/search/advanced">https://github.com/search/advanced</a></li>
</ol>
<h2 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h2><p>in:name: hexo language:c++ stars:&gt;4000 pushed:&gt;2020-01-01<br>注意仅name: 后面有空格</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>github 搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令备忘录</title>
    <url>/2022/06/11/linux%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h2 id="目录文件相关"><a href="#目录文件相关" class="headerlink" title="目录文件相关"></a>目录文件相关</h2><h3 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h3><p><strong>tar -zvcf XXX.tar.gz 打包内容</strong> // 打包内容可以是多个文件，用空格分隔；或者是个目录<br><strong>tar -zvcf XXX.tar.gz -C 解压目录</strong> // -C 必不可少</p>
<p>zip [选项] xxx.zip 打包内容 //对于文件夹需要-r<br>unzip [选项] xxx.zip -d 解压路径</p>
<h3 id="Linux-运行级别"><a href="#Linux-运行级别" class="headerlink" title="Linux 运行级别"></a>Linux 运行级别</h3><blockquote>
<ul>
<li>0 级别(halt)：系统停机模式</li>
<li>1 级别(single user)：单用户模式。只允许系统管理员登录，一般系统维护时会设置该模式</li>
<li>2 级别(multiuser without nfs)：多用户模式，不开启网络</li>
<li>3 级别(full multiuser)：完整的多用户模式</li>
<li>4 级别(unused)：预留的自定义模式，一般不会使用</li>
<li>5 级别(x11)：图形界面</li>
<li>6 级别(reboot)：重启模式<br>常用：graphical.target 5<br>multi-user.target 3<br>可通过systemctl set-default XXX 来设置</li>
</ul>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">rechard@DESKTOP:~/socket$ systemctl get-<span class="keyword">default</span></span><br><span class="line">graphical.target</span><br></pre></td></tr></table></figure>


<h3 id="查看文件指令"><a href="#查看文件指令" class="headerlink" title="查看文件指令"></a>查看文件指令</h3><p>//ctrl + b ;ctrl + f 可以翻页，空格翻页，enter 下一行, -n 添加行号<br>//查看重要文件可以采取此方式，不会误改文件<br>cat -n XXX | less </p>
<h3 id="gt-重定向-和-gt-gt-追加"><a href="#gt-重定向-和-gt-gt-追加" class="headerlink" title="&gt; 重定向 和 &gt;&gt; 追加"></a>&gt; 重定向 和 &gt;&gt; 追加</h3><p>ls -al &gt; 1.txt<br>echo “test” &gt;&gt; 1.txt<br>cat 1.txt &gt; 2.txt</p>
<h3 id="ln-s"><a href="#ln-s" class="headerlink" title="ln -s"></a>ln -s</h3><p>ln -s [源文件或目录] [软链接名] //创建，删除<br>ln -s /home/trace /home/data/trace<br>rm /home/data/trace</p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p> find [搜索范围][选项]<br> find /home -name “*.c”</p>
<h2 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h2><hr>
<hr>
<p>|    |    |    |    |<br>|    |    |    |    +—– 星期中星期几 (0 - 6) (星期天 为0)<br>|    |    |    +———- 月份 (1 - 12)<br>|    |    +————— 一个月中的第几天 (1 - 31)<br>|    +——————– 小时 (0 - 23)<br>+————————- 分钟 (0 - 59)</p>
<h3 id="周期定时任务crontab"><a href="#周期定时任务crontab" class="headerlink" title="周期定时任务crontab"></a>周期定时任务crontab</h3><p>注意占位符的含义，脚本无法执行，注意太添加环境变量或使用绝对路径</p>
<blockquote>
<ul>
<li>crontab -e 编辑crontab定时任务// 可以添加命令和脚本</li>
<li>crontab -l 查看当前用户定时任务</li>
<li>crontab -r 删除当前用户所有任务</li>
</ul>
</blockquote>
<h3 id="一次性订时任务"><a href="#一次性订时任务" class="headerlink" title="一次性订时任务"></a>一次性订时任务</h3><blockquote>
<ul>
<li>at的守护进程每60秒检查一次作业队列，有作业时检查作业，时间恰好达到，则运行作业。</li>
<li>前提：保证atd进程已经启动，检查atd进程是否启动：ps -ef | grep atd。</li>
<li>atd的命令格式： at [选项] [时间]</li>
<li>ctrl+D：结束at命令的输入。<br>[选项]</li>
<li>m 任务完成后给用户发送邮件，没有标准输出。</li>
<li>v 显示任务的被执行时间</li>
<li>c 打印任务的内容到标准输出</li>
<li>V 显示版本信息</li>
<li>q &lt;队列&gt; 使用指定的队列</li>
<li>f &lt;文件&gt; 使用指定文件读入任务</li>
<li>t &lt;时间参数&gt; 以时间参数的形式提交要运行的任务</li>
</ul>
</blockquote>
<p>[时间]<br>hh:mm 例：04:00（当天4点）<br>midnight（深夜），noon（中午），teatime（下午茶时间）<br>12小时制：AM上午，PM下午，例：10 pm<br>month day 或 mm/dd/yy（年月日）或 dd mm yy 或 08:00 2020-06-11<br>now+ count time-units，例：now+1 minutes<br>today<br>tomorrow</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5min 后执行特定命令</span></span><br><span class="line">at now + <span class="number">2</span> minutes</span><br><span class="line">date &gt; /root/date.<span class="built_in">log</span></span><br><span class="line">ctrl+D 两次</span><br><span class="line"><span class="comment">//5min 后执行固定脚本</span></span><br><span class="line">at now + <span class="number">5</span> minutes</span><br><span class="line">/root/my.sh</span><br><span class="line">ctrl+D 两次</span><br></pre></td></tr></table></figure>



<h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><p>Linux 系统有个唯一的目录结构，各磁盘分区挂在到特定目录；<br>Linux 硬盘分为IDE硬盘和SCSI硬盘，目前基本是SCSI硬盘<br>查看所有设备挂在情况lsblk -f  </p>
<h4 id="如何增加一块硬盘"><a href="#如何增加一块硬盘" class="headerlink" title="如何增加一块硬盘"></a>如何增加一块硬盘</h4><ol>
<li>虚拟机增加硬盘</li>
<li>分区 fdisk /dev/sdb </li>
<li>格式化 mkfs -t ext4 /dev/sdb1</li>
<li>挂载 mount/umount 设备名称 挂载目录 命令挂载重启后失效</li>
<li>设置自动挂载 通过修改fetc/fstab</li>
</ol>
<p>查询磁盘使用情况:df -h hexo</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">rechard@DESKTOP-GTFTOTJ:~$ df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">rootfs          <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /</span><br><span class="line">none            <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /dev</span><br><span class="line">none            <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /run</span><br><span class="line">none            <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /run/lock</span><br><span class="line">none            <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /run/shm</span><br><span class="line">none            <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /run/user</span><br><span class="line">tmpfs           <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /sys/fs/cgroup</span><br><span class="line">C:\             <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /mnt/c</span><br><span class="line">D:\             <span class="number">3.1</span>G  <span class="number">141</span>M  <span class="number">2.9</span>G   <span class="number">5</span>% /mnt/d</span><br><span class="line">E:\             <span class="number">314</span>G  <span class="number">239</span>G   <span class="number">75</span>G  <span class="number">77</span>% /mnt/e</span><br><span class="line">F:\             <span class="number">323</span>G  <span class="number">284</span>G   <span class="number">40</span>G  <span class="number">88</span>% /mnt/f</span><br></pre></td></tr></table></figure>

<p>查询指定目录的磁盘占用情况<br>du -hac –max-depth=1 /opt </p>
<blockquote>
<ul>
<li>-s 指定目录的磁盘占用情况</li>
<li>-h 带计量单位</li>
<li>-a 含文件</li>
<li>–max-depth=1 子目录深度</li>
<li>-c列出明细同时，汇总</li>
</ul>
</blockquote>
<p>查看某个文件夹文件的个数<br>ls -l | grep “^_” | wc -l<br>查看某个文件夹路径的个数<br>ls -l | grep “^d” | wc -l</p>
<p>查看某个文件夹文件的个数<br>ls -lR | grep “^_” | wc -l</p>
<p>查看某个文件夹路径的个数<br>ls -lR | grep “^d” | wc -l</p>
<p>wc 参数及含义参数含义</p>
<p>-c显示文件的Bytes数(字节数)</p>
<p>-l将每个文件的行数及文件名输出到屏幕上</p>
<p>-m将每个文件的字符数及文件名输出到屏幕上，如果当前系统不支持多字节字符其将显示与-c参数相同的结果</p>
<p>-w将每个文件含有多少个词及文件名输出到屏幕上</p>
<h3 id="wsl2-修改主机名"><a href="#wsl2-修改主机名" class="headerlink" title="wsl2 修改主机名"></a>wsl2 修改主机名</h3><p>修改etc/hostname<br>DESKTOP-GTFTOTJ-&gt;Han<br>修改etc/hosts</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>   localhost</span><br><span class="line"> #<span class="number">127.0</span><span class="number">.1</span><span class="number">.1</span>  DESKTOP-GTFTOTJ.localdomain DESKTOP-GTFTOTJ</span><br><span class="line"> <span class="number">127.0</span><span class="number">.1</span><span class="number">.1</span>   Han.localdomain Han</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux 系统</category>
      </categories>
  </entry>
  <entry>
    <title>new Class &amp;&amp; new Class()</title>
    <url>/2022/06/15/new%E5%92%8Cnew()/</url>
    <content><![CDATA[<h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><ol>
<li>对于自定义类型，new 和 new() 均调用默认构造；</li>
<li>一旦自己定义构，不再对内置类型进行初始化；</li>
</ol>
<h3 id="使用默认构造"><a href="#使用默认构造" class="headerlink" title="使用默认构造"></a>使用默认构造</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int i; vs2019编译器已经不允许这样使用了</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">j</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span>* p1 = <span class="keyword">new</span> <span class="built_in">int</span>();</span><br><span class="line">    <span class="type">int</span>* p2 = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;i = &quot; &lt;&lt; i &lt;&lt; std::endl;</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;j = &quot;</span> &lt;&lt; j &lt;&lt; std::endl;     <span class="comment">//1</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*p1 = &quot;</span> &lt;&lt; *p1 &lt;&lt; std::endl; <span class="comment">//0</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*p2 = &quot;</span> &lt;&lt; *p2 &lt;&lt; std::endl; <span class="comment">//随机值</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;****************************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//A a1;   vs2019编译器已经不允许这样使用了</span></span><br><span class="line">    A a2 = <span class="built_in">A</span>();</span><br><span class="line">    A* ptr = <span class="keyword">new</span> A;</span><br><span class="line">    A* ptr1 = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;a1.i = &quot; &lt;&lt; a1.i &lt;&lt; std::endl;</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a2.i = &quot;</span> &lt;&lt; a2.i &lt;&lt; std::endl;         <span class="comment">//0</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*ptr-&gt;i = &quot;</span> &lt;&lt; ptr-&gt;i &lt;&lt; std::endl;    <span class="comment">//随机值</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*ptr1-&gt;i = &quot;</span> &lt;&lt; ptr1-&gt;i &lt;&lt; std::endl;  <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">*p1 = <span class="number">0</span></span><br><span class="line">*p2 = <span class="number">-842150451</span></span><br><span class="line">****************************</span><br><span class="line">a2.i = <span class="number">0</span></span><br><span class="line">*ptr-&gt;i = <span class="number">-842150451</span></span><br><span class="line">*ptr1-&gt;i = <span class="number">0</span></span><br><span class="line">请按任意键继续. . .</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="自己定义构造"><a href="#自己定义构造" class="headerlink" title="自己定义构造"></a>自己定义构造</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">A</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;construct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int i; vs2019编译器已经不允许这样使用了</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">j</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span>* p1 = <span class="keyword">new</span> <span class="built_in">int</span>();</span><br><span class="line">    <span class="type">int</span>* p2 = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;i = &quot; &lt;&lt; i &lt;&lt; std::endl;</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;j = &quot;</span> &lt;&lt; j &lt;&lt; std::endl;     <span class="comment">//1</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*p1 = &quot;</span> &lt;&lt; *p1 &lt;&lt; std::endl; <span class="comment">//0</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*p2 = &quot;</span> &lt;&lt; *p2 &lt;&lt; std::endl; <span class="comment">//随机值</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;****************************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//A a1;   vs2019编译器已经不允许这样使用了</span></span><br><span class="line">    A a2 = <span class="built_in">A</span>();</span><br><span class="line">    A* ptr = <span class="keyword">new</span> A;</span><br><span class="line">    A* ptr1 = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;a1.i = &quot; &lt;&lt; a1.i &lt;&lt; std::endl;</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a2.i = &quot;</span> &lt;&lt; a2.i &lt;&lt; std::endl;         <span class="comment">//0</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*ptr-&gt;i = &quot;</span> &lt;&lt; ptr-&gt;i &lt;&lt; std::endl;    <span class="comment">//随机值</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*ptr1-&gt;i = &quot;</span> &lt;&lt; ptr1-&gt;i &lt;&lt; std::endl;  <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------</span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">*p1 = <span class="number">0</span></span><br><span class="line">*p2 = <span class="number">-842150451</span></span><br><span class="line">****************************</span><br><span class="line">construct!</span><br><span class="line">construct!</span><br><span class="line">construct!</span><br><span class="line">a2.i = <span class="number">-858993460</span></span><br><span class="line">*ptr-&gt;i = <span class="number">-842150451</span></span><br><span class="line">*ptr1-&gt;i = <span class="number">-842150451</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>redis存取图像</title>
    <url>/2022/08/01/redis%E5%AD%98%E5%8F%96%E5%9B%BE%E5%83%8F/</url>
    <content><![CDATA[<h3 id="测试redis存取图像耗时"><a href="#测试redis存取图像耗时" class="headerlink" title="测试redis存取图像耗时"></a>测试redis存取图像耗时</h3><ol>
<li><p>测试环境<br>wsl2 + Ubuntu16.04 + redis4.0 + lena.jpg</p>
</li>
<li><p>测试代码如下</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hiredis.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/opencv.hpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERR -1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Redis</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">Redis</span>()&#123;&#125;</span><br><span class="line"> </span><br><span class="line">    ~<span class="built_in">Redis</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_connect = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_reply = <span class="literal">NULL</span>;                </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connect</span><span class="params">(std::string host, <span class="type">int</span> port)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_connect = <span class="built_in">redisConnect</span>(host.<span class="built_in">c_str</span>(), port);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;_connect != <span class="literal">NULL</span> &amp;&amp; <span class="keyword">this</span>-&gt;_connect-&gt;err)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;connect error: %s\n&quot;</span>, <span class="keyword">this</span>-&gt;_connect-&gt;errstr);</span><br><span class="line">            <span class="keyword">return</span> ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function">std::string <span class="title">get</span><span class="params">(std::string key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_reply = (redisReply*)<span class="built_in">redisCommand</span>(<span class="keyword">this</span>-&gt;_connect, <span class="string">&quot;GET %s&quot;</span>, key.<span class="built_in">c_str</span>());</span><br><span class="line">        std::string str = <span class="keyword">this</span>-&gt;_reply-&gt;str;</span><br><span class="line">        <span class="built_in">freeReplyObject</span>(<span class="keyword">this</span>-&gt;_reply);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(std::string key, std::string value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">redisCommand</span>(<span class="keyword">this</span>-&gt;_connect, <span class="string">&quot;SET %s %s&quot;</span>, key.<span class="built_in">c_str</span>(), value.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"> </span><br><span class="line">    redisContext* _connect;</span><br><span class="line">    redisReply* _reply;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// class FuncTimer</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   public:</span></span><br><span class="line"><span class="comment">//     FuncTimer()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         m_start = std::chrono::system_clock::now();</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     ~FuncTimer()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         auto end = std::chrono::system_clock::now();</span></span><br><span class="line"><span class="comment">//         std::chrono::duration&lt;double&gt; elapsed_seconds = end-m_start;</span></span><br><span class="line"><span class="comment">//         std::cout &lt;&lt; &quot;elapsed time: &quot; &lt;&lt; elapsed_seconds.count() &lt;&lt; &quot;s\n&quot;;	</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     std::chrono::system_clock::time_point m_start;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">push_image</span><span class="params">(Redis&amp; rds)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	string imagePath = <span class="string">&quot;/home/rechard/opencv/samples/data/lena.jpg&quot;</span>;</span><br><span class="line">    Mat image = <span class="built_in">imread</span>(imagePath);</span><br><span class="line">	<span class="keyword">if</span> (image.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;read image fail: %s\n&quot;</span>, imagePath.<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="keyword">return</span> ERR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; params;</span><br><span class="line">	params.<span class="built_in">resize</span>(<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">	params[<span class="number">0</span>] = cv::IMWRITE_JPEG_QUALITY;</span><br><span class="line">	params[<span class="number">1</span>] = <span class="number">95</span>;</span><br><span class="line"></span><br><span class="line">	std::vector&lt;uchar&gt; buf;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> t1 = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">	cv::<span class="built_in">imencode</span>(<span class="string">&quot;.bmp&quot;</span>, image, buf, params);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> t2 = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> duration1 = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(t2 - t1).<span class="built_in">count</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;encode time: &quot;</span>&lt;&lt; duration1 * <span class="number">1e-3</span> &lt;&lt; <span class="string">&quot; microseconds&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="function">std::string <span class="title">str_encode</span><span class="params">(buf.begin(), buf.end())</span></span>;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> t3 = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">    rds.<span class="built_in">set</span>(<span class="string">&quot;img&quot;</span>, str_encode);</span><br><span class="line">	<span class="type">const</span> <span class="keyword">auto</span> t4 = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> duration2 = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(t4 - t3).<span class="built_in">count</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;push time: &quot;</span>&lt;&lt; duration2 * <span class="number">1e-3</span> &lt;&lt; <span class="string">&quot; microseconds&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">pop_image</span><span class="params">(Redis&amp; rds, Mat&amp; img)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> t1 = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">    std::string msg = rds.<span class="built_in">get</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> t2 = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> pop_time = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(t2 - t1).<span class="built_in">count</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pop time: &quot;</span>&lt;&lt;pop_time * <span class="number">1e-3</span> &lt;&lt; <span class="string">&quot; microseconds&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">    std::cout &lt;&lt; msg &lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    std::string save_image = <span class="string">&quot;imgOut.jpg&quot;</span>;</span><br><span class="line">	std::ofstream imgOut;</span><br><span class="line">    imgOut.<span class="built_in">open</span>(save_image.<span class="built_in">c_str</span>(), std::ios::out | std::ios::binary);</span><br><span class="line">	<span class="keyword">if</span> (!imgOut) &#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;open file fail: %s\n&quot;</span>, save_image.<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	imgOut.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;(msg.<span class="built_in">c_str</span>()[<span class="number">0</span>]), msg.<span class="built_in">size</span>()*<span class="built_in">sizeof</span>(uchar));</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> t3 = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> write_time = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(t3 - t2).<span class="built_in">count</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;write time: &quot;</span>&lt;&lt;write_time * <span class="number">1e-3</span> &lt;&lt; <span class="string">&quot; microseconds&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">	imgOut.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">test_redis</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> iRtn = OK;</span><br><span class="line"></span><br><span class="line">    Redis rds;</span><br><span class="line">    std::string ip = <span class="string">&quot;127.0.0.1&quot;</span> ;</span><br><span class="line">    <span class="type">int</span> port = <span class="number">6379</span>;</span><br><span class="line">    iRtn = rds.<span class="built_in">connect</span>(ip, port);</span><br><span class="line">    <span class="keyword">if</span>(iRtn != OK)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;redis connect failed!&quot;</span> &lt;&lt;std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">push_image</span>(rds);</span><br><span class="line">    Mat imageOut;</span><br><span class="line">    <span class="built_in">pop_image</span>(rds, imageOut);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;test end!&quot;</span> &lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// void test_opencv()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 	Mat image = imread(&quot;/home/rechard/opencv/samples/data/lena.jpg&quot;);</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">// 	imwrite(&quot;model.jpg&quot;, image);</span></span><br><span class="line"><span class="comment">//  imshow(&quot;Image&quot;, image);</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">// &#125;	</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="built_in">test_redis</span>();</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>运行结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">encode time: <span class="number">1.003</span> microseconds</span><br><span class="line">push time: <span class="number">1.412</span> microseconds</span><br><span class="line">pop time: <span class="number">0.254</span> microseconds</span><br><span class="line">BM6</span><br><span class="line">write time: <span class="number">1.658</span> microseconds</span><br><span class="line">test end!</span><br></pre></td></tr></table></figure></li>
<li><p>编译配置文件</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> c_cpp_properties_json</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Linux&quot;</span>,</span><br><span class="line">            <span class="string">&quot;includePath&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/usr/include/&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/home/rechard/redis/redis/deps/hiredis&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/usr/local/include/opencv4&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;defines&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;compilerPath&quot;</span>: <span class="string">&quot;/usr/bin/gcc&quot;</span>,</span><br><span class="line">            <span class="string">&quot;intelliSenseMode&quot;</span>: <span class="string">&quot;linux-gcc-x64&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task.json</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">	<span class="string">&quot;tasks&quot;</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">&quot;type&quot;</span>: <span class="string">&quot;cppbuild&quot;</span>,</span><br><span class="line">			<span class="string">&quot;label&quot;</span>: <span class="string">&quot;test01&quot;</span>,</span><br><span class="line">			<span class="string">&quot;command&quot;</span>: <span class="string">&quot;/usr/bin/g++&quot;</span>,</span><br><span class="line">			<span class="string">&quot;args&quot;</span>: [</span><br><span class="line">				<span class="string">&quot;-fdiagnostics-color=always&quot;</span>,</span><br><span class="line">				<span class="string">&quot;-g&quot;</span>,</span><br><span class="line">				<span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">				<span class="string">&quot;-I/usr/local/include/opencv4&quot;</span>,</span><br><span class="line">				<span class="string">&quot;-I/home/rechard/redis/redis/deps/hiredis&quot;</span>,</span><br><span class="line">				<span class="string">&quot;-L/home/rechard/redis/redis/deps/hiredis&quot;</span>,</span><br><span class="line">				<span class="string">&quot;-L/usr/local/lib&quot;</span>,</span><br><span class="line">				<span class="string">&quot;-lhiredis&quot;</span>,</span><br><span class="line">				<span class="string">&quot;-lopencv_core&quot;</span>,</span><br><span class="line">				<span class="string">&quot;-lopencv_imgcodecs&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-lopencv_imgproc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-lopencv_highgui&quot;</span>,</span><br><span class="line">				<span class="string">&quot;-o&quot;</span>,</span><br><span class="line">				<span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span></span><br><span class="line">				</span><br><span class="line"></span><br><span class="line">			],</span><br><span class="line">			<span class="string">&quot;options&quot;</span>: &#123;</span><br><span class="line">				<span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">				<span class="string">&quot;$gcc&quot;</span></span><br><span class="line">			],</span><br><span class="line">			<span class="string">&quot;group&quot;</span>: &#123;</span><br><span class="line">				<span class="string">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">				<span class="string">&quot;isDefault&quot;</span>: <span class="literal">true</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">&quot;detail&quot;</span>: <span class="string">&quot;编译器: /usr/bin/g++&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">launch.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;(gdb) 启动&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/test01&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;externalConsole&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="string">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;为 gdb 启用整齐打印&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;description&quot;</span>:  <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        </span><br><span class="line">            <span class="string">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;test01&quot;</span>,    <span class="comment">// 写Launch前需要做的tasks，内容与tasks.json的label项相同</span></span><br><span class="line">            <span class="string">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;/usr/bin/gdb&quot;</span> </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>试图利用读取图像-&gt;Mat, 经opencv编码后转成vector<uchar> ;<br>调用string 构造 序列化后存入redis,<br>读取从redis读取时存在问题，未能逆变换成Mat;<br>TODO: 找到图片合适的序列化方式，或者直接存二进制数据</uchar></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">rechard@DESKTOP-GTFTOTJ:~/redis/testImg$ redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; key *</span><br><span class="line">(error) ERR unknown command <span class="string">&#x27;key&#x27;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;img&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get img</span><br><span class="line"><span class="string">&quot;BM6&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure>

<p>终端操作发现是编码之后存入redis前打印的str_encode 正常；<br>从redis获取的结果打印出来异常；<br>TO BE CONTINUE</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>二叉树遍历</title>
    <url>/2022/08/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h3 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">	<span class="type">int</span> val;</span><br><span class="line">	TreeNode* left;</span><br><span class="line">	TreeNode* right;</span><br><span class="line">	<span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	<span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	<span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode* left, TreeNode* right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//按层遍历 C++ 实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">layerOrder</span><span class="params">(TreeNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">nullptr</span> == head)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	queue&lt;TreeNode*&gt; que;</span><br><span class="line">	que.<span class="built_in">push</span>(head);</span><br><span class="line">	<span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		TreeNode* cur = que.<span class="built_in">front</span>();</span><br><span class="line">		que.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; cur-&gt;val &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (cur-&gt;left != <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			que.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (cur-&gt;right != <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			que.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序遍历递归法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrderRecur</span><span class="params">(TreeNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">nullptr</span> == head)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; head-&gt;val &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">preOrderRecur</span>(head-&gt;left);</span><br><span class="line">	<span class="built_in">preOrderRecur</span>(head-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历递归法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrderRecur</span><span class="params">(TreeNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">nullptr</span> == head)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">inOrderRecur</span>(head-&gt;left);</span><br><span class="line">	cout &lt;&lt; head-&gt;val &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">inOrderRecur</span>(head-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历递归法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">posOrderRecur</span><span class="params">(TreeNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">nullptr</span> == head)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">posOrderRecur</span>(head-&gt;left);</span><br><span class="line">	<span class="built_in">posOrderRecur</span>(head-&gt;right);</span><br><span class="line">	cout &lt;&lt; head-&gt;val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">(TreeNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//layerOrder(head);</span></span><br><span class="line">	<span class="comment">//preOrderRecur(head);</span></span><br><span class="line">	<span class="comment">//inOrderRecur(head);</span></span><br><span class="line">	<span class="built_in">posOrderRecur</span>(head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 非递归法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">preOrderUnRecur</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">		System.out.<span class="built_in">print</span>(<span class="string">&quot;pre-order: &quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (head != null) &#123;</span><br><span class="line">			Stack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="built_in">Stack</span>&lt;Node&gt;();</span><br><span class="line">			stack.<span class="built_in">add</span>(head);</span><br><span class="line">			<span class="keyword">while</span> (!stack.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">				head = stack.<span class="built_in">pop</span>();</span><br><span class="line">				System.out.<span class="built_in">print</span>(head.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">				<span class="keyword">if</span> (head.right != null) &#123;</span><br><span class="line">					stack.<span class="built_in">push</span>(head.right);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (head.left != null) &#123;</span><br><span class="line">					stack.<span class="built_in">push</span>(head.left);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.<span class="built_in">println</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">inOrderUnRecur</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">		System.out.<span class="built_in">print</span>(<span class="string">&quot;in-order: &quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (head != null) &#123;</span><br><span class="line">			Stack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="built_in">Stack</span>&lt;Node&gt;();</span><br><span class="line">			<span class="keyword">while</span> (!stack.<span class="built_in">isEmpty</span>() || head != null) &#123;</span><br><span class="line">				<span class="keyword">if</span> (head != null) &#123;</span><br><span class="line">					stack.<span class="built_in">push</span>(head);</span><br><span class="line">					head = head.left;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					head = stack.<span class="built_in">pop</span>();</span><br><span class="line">					System.out.<span class="built_in">print</span>(head.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">					head = head.right;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.<span class="built_in">println</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">posOrderUnRecur1</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">		System.out.<span class="built_in">print</span>(<span class="string">&quot;pos-order: &quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (head != null) &#123;</span><br><span class="line">			Stack&lt;Node&gt; s1 = <span class="keyword">new</span> <span class="built_in">Stack</span>&lt;Node&gt;();</span><br><span class="line">			Stack&lt;Node&gt; s2 = <span class="keyword">new</span> <span class="built_in">Stack</span>&lt;Node&gt;();</span><br><span class="line">			s1.<span class="built_in">push</span>(head);</span><br><span class="line">			<span class="keyword">while</span> (!s1.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">				head = s1.<span class="built_in">pop</span>();</span><br><span class="line">				s2.<span class="built_in">push</span>(head);</span><br><span class="line">				<span class="keyword">if</span> (head.left != null) &#123;</span><br><span class="line">					s1.<span class="built_in">push</span>(head.left);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (head.right != null) &#123;</span><br><span class="line">					s1.<span class="built_in">push</span>(head.right);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span> (!s2.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">				System.out.<span class="built_in">print</span>(s2.<span class="built_in">pop</span>().value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.<span class="built_in">println</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">posOrderUnRecur2</span><span class="params">(Node h)</span> </span>&#123;</span><br><span class="line">		System.out.<span class="built_in">print</span>(<span class="string">&quot;pos-order: &quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (h != null) &#123;</span><br><span class="line">			Stack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="built_in">Stack</span>&lt;Node&gt;();</span><br><span class="line">			stack.<span class="built_in">push</span>(h);</span><br><span class="line">			Node c = null;</span><br><span class="line">			<span class="keyword">while</span> (!stack.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">				c = stack.<span class="built_in">peek</span>();</span><br><span class="line">				<span class="keyword">if</span> (c.left != null &amp;&amp; h != c.left &amp;&amp; h != c.right) &#123;</span><br><span class="line">					stack.<span class="built_in">push</span>(c.left);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (c.right != null &amp;&amp; h != c.right) &#123;</span><br><span class="line">					stack.<span class="built_in">push</span>(c.right);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.<span class="built_in">print</span>(stack.<span class="built_in">pop</span>().value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">					h = c;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.<span class="built_in">println</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span>* str = <span class="string">&quot;jghjjjjjkkk&quot;</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* sub = <span class="string">&quot;gh&quot;</span>;</span><br><span class="line">	<span class="type">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">	<span class="type">char</span>* res = <span class="built_in">findSubStr</span>(str, sub, &amp;pos);</span><br><span class="line">	cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	TreeNode TreeNode5 = <span class="built_in">TreeNode</span>(<span class="number">5</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">	TreeNode TreeNode4 = <span class="built_in">TreeNode</span>(<span class="number">4</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">	TreeNode TreeNode3 = <span class="built_in">TreeNode</span>(<span class="number">3</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">	TreeNode TreeNode2 = <span class="built_in">TreeNode</span>(<span class="number">2</span>, &amp;TreeNode5, <span class="literal">nullptr</span>);</span><br><span class="line">	TreeNode TreeNode1 = <span class="built_in">TreeNode</span>(<span class="number">1</span>, &amp;TreeNode3, &amp;TreeNode4);</span><br><span class="line">	TreeNode TreeNode0 = <span class="built_in">TreeNode</span>(<span class="number">0</span>, &amp;TreeNode1, &amp;TreeNode2);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01(&amp;TreeNode0);</span></span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>vector</title>
    <url>/2022/06/20/vector/</url>
    <content><![CDATA[<h3 id="vector-内存释放"><a href="#vector-内存释放" class="headerlink" title="vector 内存释放"></a>vector 内存释放</h3><p>//使用std::vector<int>().swap(v1)进行内存释放</int></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v1)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt;<span class="string">&quot;before &amp;v = &quot;</span>&lt;&lt; &amp;v1 &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;before v.size()&quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(v1);</span><br><span class="line">   </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;after =&quot;</span> &lt;&lt; &amp;v1 &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;after v.size() = &quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v2 = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span> &#125;;</span><br><span class="line">    v2.<span class="built_in">swap</span>(v1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : v1)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">before &amp;v = <span class="number">00000023E4</span>F4F408</span><br><span class="line">before v.<span class="built_in">size</span>()<span class="number">4</span></span><br><span class="line">after =<span class="number">00000023E4</span>F4F408</span><br><span class="line">after v.<span class="built_in">size</span>() = <span class="number">0</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure>

<h3 id="push-back-执行的构造"><a href="#push-back-执行的构造" class="headerlink" title="push_back 执行的构造"></a>push_back 执行的构造</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 如果不提供移动构造，会调用copy构造；</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ABC</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">ABC</span>(std::string name, <span class="type">int</span> n) : <span class="built_in">m_name</span>(name), <span class="built_in">m_num</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;construct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ABC</span>(<span class="type">const</span> ABC&amp; other) </span><br><span class="line">    &#123;</span><br><span class="line">        m_name = other.m_name;</span><br><span class="line">        m_num = other.m_num;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;copy construct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  ABC(const ABC&amp;&amp; other)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        m_name = other.m_name;</span></span><br><span class="line"><span class="comment">        m_num = other.m_num;</span></span><br><span class="line"><span class="comment">        std::cout &lt;&lt; &quot;move construct!&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    ~<span class="built_in">ABC</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;destruct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string  m_name;</span><br><span class="line">    <span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::vector&lt;ABC&gt;p;</span><br><span class="line">    p.<span class="built_in">push_back</span>(<span class="built_in">ABC</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">construct!</span><br><span class="line">------------------</span><br><span class="line">construct!</span><br><span class="line">copy construct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 提供移动构造，则调用移动构造</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ABC</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">ABC</span>(std::string name, <span class="type">int</span> n) : <span class="built_in">m_name</span>(name), <span class="built_in">m_num</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;construct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ABC</span>(<span class="type">const</span> ABC&amp; other) </span><br><span class="line">    &#123;</span><br><span class="line">        m_name = other.m_name;</span><br><span class="line">        m_num = other.m_num;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;copy construct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ABC</span>(<span class="type">const</span> ABC&amp;&amp; other)</span><br><span class="line">    &#123;</span><br><span class="line">        m_name = other.m_name;</span><br><span class="line">        m_num = other.m_num;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;move construct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">ABC</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;destruct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string  m_name;</span><br><span class="line">    <span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::vector&lt;ABC&gt;p;</span><br><span class="line">    p.<span class="built_in">push_back</span>(<span class="built_in">ABC</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"></span><br><span class="line">construct!</span><br><span class="line">------------------</span><br><span class="line">construct!</span><br><span class="line">move construct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 如果将测试程序改为</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="built_in">ABC</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果变为：为什么会调用copy construct??????? </span></span><br><span class="line"><span class="comment">//请看下面继续验证</span></span><br><span class="line">construct!</span><br><span class="line">------------------</span><br><span class="line">construct!</span><br><span class="line">move construct!</span><br><span class="line">copy construct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 如果将测试程序改为</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">//std::vector&lt;ABC&gt;v;</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(<span class="built_in">ABC</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：加上move后，push_back 的行为没有改变</span></span><br><span class="line">construct!</span><br><span class="line">------------------</span><br><span class="line">construct!</span><br><span class="line">move construct!</span><br><span class="line">copy construct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 如果将测试程序改为</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    ABC abc = <span class="built_in">ABC</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(std::<span class="built_in">move</span>(abc));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(abc);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：？？？为什么出现2次copy,为什么不是1次</span></span><br><span class="line">construct!</span><br><span class="line">move construct!</span><br><span class="line">------------------</span><br><span class="line">copy construct!</span><br><span class="line">copy construct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 如果将测试程序改为</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    ABC abc = <span class="built_in">ABC</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(std::<span class="built_in">move</span>(abc));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">//v.emplace_back(abc);</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：以下结果可以容易理解</span></span><br><span class="line">construct!</span><br><span class="line">move construct!</span><br><span class="line">------------------</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>二进制文件</title>
    <url>/2022/07/04/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="查看二进制文件"><a href="#查看二进制文件" class="headerlink" title="查看二进制文件"></a>查看二进制文件</h3><ol>
<li><p>通过文本编辑器查看ls<br>vim bin/ls<br>可以搜索color可以看到：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">                                <span class="number">1</span>,<span class="number">048</span>,<span class="number">576</span> bytes; see SIZE format below</span><br><span class="line">   -B, --ignore-backups       <span class="keyword">do</span> not <span class="built_in">list</span> implied entries ending with ~</span><br><span class="line">   -c                         with -lt: sort by, and show, ctime (time of last</span><br><span class="line">                                modification of file status information);</span><br><span class="line">                                with -l: show ctime and sort by name;</span><br><span class="line">                                otherwise: sort by ctime, newest first</span><br><span class="line"> ^@^@^@  -C                         <span class="built_in">list</span> entries by columns</span><br><span class="line">       --color[=WHEN]         colorize the output; WHEN can be <span class="string">&#x27;always&#x27;</span> (<span class="keyword">default</span></span><br><span class="line">                                <span class="keyword">if</span> omitted), <span class="string">&#x27;auto&#x27;</span>, or <span class="string">&#x27;never&#x27;</span>; more info below</span><br><span class="line">   -d, --directory            <span class="built_in">list</span> directories themselves, not their contents</span><br><span class="line">   -D, --dired                generate output designed <span class="keyword">for</span> Emacs<span class="number">&#x27;</span> dired mode</span><br><span class="line"> ^@^@  -f                         <span class="keyword">do</span> not sort, enable -aU, disable -ls --color</span><br><span class="line">   -F, --classify             append <span class="title function_">indicator</span> <span class="params">(one of */=&gt;@|)</span> to entries</span><br><span class="line">       --file-type            likewise, except <span class="keyword">do</span> not append &#x27;*&#x27;</span><br><span class="line">       --format=WORD          across -x, commas -m, horizontal -x, <span class="type">long</span> -l,</span><br><span class="line">                                single-column <span class="number">-1</span>, verbose -l, vertical -C</span><br><span class="line">NORMAL  <span class="number">1</span>  /bin/ls ⊝</span><br></pre></td></tr></table></figure></li>
<li><p>可以通过xxd 转成16 进制查看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">rechard@DESKTOP-GTFTOTJ:~$ xxd /bin/ls</span><br><span class="line"><span class="number">00000000</span>: <span class="number">7f</span>45 <span class="number">4</span>c46 <span class="number">0201</span> <span class="number">0100</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>  .ELF............</span><br><span class="line"><span class="number">00000010</span>: <span class="number">0300</span> <span class="number">3e00</span> <span class="number">0100</span> <span class="number">0000</span> <span class="number">5058</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>  ..&gt;.....PX......</span><br><span class="line"><span class="number">00000020</span>: <span class="number">4000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> a003 <span class="number">0200</span> <span class="number">0000</span> <span class="number">0000</span>  @...............</span><br><span class="line"><span class="number">00000030</span>: <span class="number">0000</span> <span class="number">0000</span> <span class="number">4000</span> <span class="number">3800</span> <span class="number">0900</span> <span class="number">4000</span> <span class="number">1</span>c00 <span class="number">1b</span>00  ....@<span class="number">.8</span>...@.....</span><br><span class="line"><span class="number">00000040</span>: <span class="number">0600</span> <span class="number">0000</span> <span class="number">0500</span> <span class="number">0000</span> <span class="number">4000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>  ........@.......</span><br></pre></td></tr></table></figure></li>
<li><p>通过readelf 查看<br>-h 查看文件头</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">rechard@DESKTOP-GTFTOTJ:~$ readelf -h /bin/ls</span><br><span class="line">ELF Header:</span><br><span class="line">  Magic:   <span class="number">7f</span> <span class="number">45</span> <span class="number">4</span>c <span class="number">46</span> <span class="number">02</span> <span class="number">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  Class:                             ELF64</span><br><span class="line">  Data:                              <span class="number">2&#x27;</span>s complement, little endian</span><br><span class="line">  Version:                           <span class="number">1</span> (current)</span><br><span class="line">  OS/ABI:                            UNIX - System V</span><br><span class="line">  ABI Version:                       <span class="number">0</span></span><br><span class="line">  Type:                              DYN (Shared object file)</span><br><span class="line">  Machine:                           Advanced Micro Devices X86<span class="number">-64</span></span><br><span class="line">  Version:                           <span class="number">0x1</span></span><br><span class="line">  Entry point address:               <span class="number">0x5850</span></span><br><span class="line">  Start of program headers:          <span class="number">64</span> (bytes into file)</span><br><span class="line">  Start of section headers:          <span class="number">132000</span> (bytes into file)</span><br><span class="line">  Flags:                             <span class="number">0x0</span></span><br><span class="line">  Size of this header:               <span class="number">64</span> (bytes)</span><br><span class="line">  Size of program headers:           <span class="number">56</span> (bytes)</span><br><span class="line">  Number of program headers:         <span class="number">9</span></span><br><span class="line">  Size of section headers:           <span class="number">64</span> (bytes)</span><br><span class="line">  Number of section headers:         <span class="number">28</span></span><br><span class="line">  Section header <span class="built_in">string</span> table index: <span class="number">27</span></span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~$</span><br><span class="line"></span><br><span class="line">  -l 查看该文件如何被加载</span><br><span class="line"></span><br><span class="line">  rechard@DESKTOP-GTFTOTJ:~$ readelf -l /bin/ls</span><br><span class="line"></span><br><span class="line">Elf file type is <span class="title function_">DYN</span> <span class="params">(Shared object file)</span></span><br><span class="line">Entry point 0x5850</span><br><span class="line">There are 9 program headers, starting at offset 64</span><br><span class="line"></span><br><span class="line">Program Headers:</span><br><span class="line">  Type           Offset             VirtAddr           PhysAddr</span><br><span class="line">                 FileSiz            MemSiz              Flags  Align</span><br><span class="line">  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040</span><br><span class="line">                 0x00000000000001f8 0x00000000000001f8  R E    0x8</span><br><span class="line">  INTERP         0x0000000000000238 0x0000000000000238 0x0000000000000238</span><br><span class="line">                 0x000000000000001c 0x000000000000001c  R      0x1</span><br><span class="line">      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]</span><br><span class="line">      <span class="comment">//加载地址随机化，pic 位置无关代码</span></span><br><span class="line">  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">                 0x000000000001e6e8 0x000000000001e6e8  R E    0x200000</span><br><span class="line">  LOAD           0x000000000001eff0 0x000000000021eff0 0x000000000021eff0</span><br><span class="line">                 0x0000000000001278 0x0000000000002570  RW     0x200000</span><br><span class="line">  DYNAMIC        0x000000000001fa38 0x000000000021fa38 0x000000000021fa38</span><br><span class="line">                 0x0000000000000200 0x0000000000000200  RW     0x8</span><br><span class="line">  NOTE           0x0000000000000254 0x0000000000000254 0x0000000000000254</span><br><span class="line">                 0x0000000000000044 0x0000000000000044  R      0x4</span><br><span class="line">  GNU_EH_FRAME   0x000000000001b1a0 0x000000000001b1a0 0x000000000001b1a0</span><br><span class="line">                 0x0000000000000884 0x0000000000000884  R      0x4</span><br><span class="line">  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">                 0x0000000000000000 0x0000000000000000  RW     0x10</span><br><span class="line">  GNU_RELRO      0x000000000001eff0 0x000000000021eff0 0x000000000021eff0</span><br><span class="line">                 0x0000000000001010 0x0000000000001010  R      0x1</span><br></pre></td></tr></table></figure>
<p>Section to Segment mapping:<br>Segment Sections…<br>00<br>01     .interp<br>02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame<br>03     .init_array .fini_array .data.rel.ro .dynamic .got .data .bss<br>04     .dynamic<br>05     .note.ABI-tag .note.gnu.build-id<br>06     .eh_frame_hdr<br>07<br>08     .init_array .fini_array .data.rel.ro .dynamic .got</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>函数模板和类模板</title>
    <url>/2022/06/06/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%92%8C%E7%B1%BB%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="c-函数模板与类模板"><a href="#c-函数模板与类模板" class="headerlink" title="c++ 函数模板与类模板"></a>c++ 函数模板与类模板</h1><h2 id="为什么需要函数模板与类模板？实现机理？"><a href="#为什么需要函数模板与类模板？实现机理？" class="headerlink" title="为什么需要函数模板与类模板？实现机理？"></a>为什么需要函数模板与类模板？实现机理？</h2><p>解决因参数类型不同导致，重复定义相似的函数或者类。</p>
<p>函数模板并不是定义一个函数，使其可以兼容各种类型，而是通过两次编译的方式，根据不同参数调用生成多个不同数据类型的函数或者是类；可以通过查看汇编代码验证；</p>
<p>模板的本质是数据类型参数化。</p>
<h2 id="模板函数与普通函数发生重载；"><a href="#模板函数与普通函数发生重载；" class="headerlink" title="模板函数与普通函数发生重载；"></a>模板函数与普通函数发生重载；</h2><p>模板函数遵循严格的参数类型匹配，普通函数支持隐式类型转换；如果普通函数均能够完全匹配则优先调用普通函数。</p>
<h2 id="static-关键字与类模板"><a href="#static-关键字与类模板" class="headerlink" title="static 关键字与类模板"></a>static 关键字与类模板</h2><p>类模板不同的参数类型具现化后，属于不同的函数；比如int 与float具现化两个不同的函数，对应static 的变量当然没有什么关系；如果具现化后为同一个类 ，则static为同一变量。</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>具体注意细节看如下代码的注释</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Test.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; &lt;T&gt; (ostream&amp; out, Point&lt;T&gt;&amp; p1); <span class="comment">//注意此处语法，</span></span><br><span class="line">                                                                 <span class="comment">//声明时多了个&lt;T&gt;</span></span><br><span class="line">                                                                 <span class="comment">//一般输入输出用友元函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Point</span>(T x, T y);</span><br><span class="line">	~<span class="built_in">Point</span>();</span><br><span class="line">	Point&lt;T&gt; <span class="keyword">operator</span>+(<span class="type">const</span> Point&lt;T&gt;&amp; p1);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	T m_x;</span><br><span class="line">	T m_y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Test.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Point&lt;T&gt;::<span class="built_in">Point</span>(T x, T y)</span><br><span class="line">&#123;</span><br><span class="line">	m_x = x;</span><br><span class="line">	m_y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Point&lt;T&gt;::~<span class="built_in">Point</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意3个地方加上&lt;T&gt; 即：参数，返回值，名称</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Point&lt;T&gt; Point&lt;T&gt;::<span class="keyword">operator</span>+(<span class="type">const</span> Point&lt;T&gt;&amp; p1)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//下面函数内部Point&lt;T&gt;可以不写&lt;T&gt;</span></span><br><span class="line">	<span class="comment">//Point&lt;T&gt; temp(this-&gt;m_x + p1.m_x, this-&gt;m_y + p1.m_y);</span></span><br><span class="line">	<span class="function">Point <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;m_x + p1.m_x, <span class="keyword">this</span>-&gt;m_y + p1.m_y)</span></span>;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, Point&lt;T&gt;&amp; p1) <span class="comment">//友元函数为全局函数无需加类作用符号</span></span><br><span class="line">&#123;</span><br><span class="line">	out &lt;&lt; <span class="string">&quot;Point.m_x=&quot;</span> &lt;&lt; p1.m_x &lt;&lt; <span class="string">&quot;   Point.m_y=&quot;</span> &lt;&lt; p1.m_y &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//#include &quot;Test.cpp&quot;  此处必须包含cpp才可以正常调用，所以一般都将.h文件与.cpp 合二为一.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Test.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Point&lt;<span class="type">int</span>&gt; p1 = <span class="built_in">Point</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	Point&lt;<span class="type">int</span>&gt; p2 = <span class="built_in">Point</span>&lt;<span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">	Point&lt;<span class="type">int</span>&gt; p3 = p1 + p2;</span><br><span class="line">	cout &lt;&lt; p3;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//#include &quot;Test.cpp&quot;  此处必须包含cpp才可以正常调用，所以一般都将.h文件与.cpp 合二为一.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Test.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Point&lt;<span class="type">int</span>&gt; p1 = <span class="built_in">Point</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	Point&lt;<span class="type">int</span>&gt; p2 = <span class="built_in">Point</span>&lt;<span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">	Point&lt;<span class="type">int</span>&gt; p3 = p1 + p2;</span><br><span class="line">	cout &lt;&lt; p3;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 11</title>
    <url>/2022/08/21/C++11/</url>
    <content><![CDATA[<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ol>
<li>nullptr</li>
</ol>
<p>nullptr的出现是为了代替NULL;<br>传统C++ NUll 表示 0 或(void*(0)),这取决于编译器如何定义，<br>但是C++有重载，例如；foo(char*) 和 foo(int)；调用foo(NULL)会产生混乱；</p>
<ol start="2">
<li>constexpr</li>
</ol>
<p>int len = 8;<br>cosntexpr int length1 = len + 1;<br>const int length2 = 9;<br>arr[length1]; //合法<br>arr[length2]; //非法</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol>
<li>在传统 C++ 中，变量的声明虽然能够位于任何位置，甚至于 for 语句内能够声明一个临时变量<br>int，但始终没有办法在 if 和 switch 语句中声明一个临时的变量。</li>
</ol>
<p>// 在 c++17 之前，itr 作用域扩展到if语句之外，这是没有必要的<br>const std::vector<int>::iterator itr = std::find(vec.begin(), vec.end(), 2);<br>if (itr != vec.end()) {<br>*itr = 3;<br>}</int></p>
<p>//C++ 17之后<br>// 将临时变量放到 if 语句内<br>if (const std::vector<int>::iterator itr = std::find(vec.begin(), vec.end(), 3);<br>itr != vec.end()) {<br>*itr = 4;<br>}<br>2. 初始化列表</int></p>
<p>在C++中不同的对象（POD类型如数组，结构体），可以通过{}进行初始化，而类对象需要构造函数初始化；<br>C++11 提供的统一的初始化裂表方式初始化；<br>方式1: std::vector<int>v1({1,2,3});<br>方式2: std::vector<int>v2 = {1,2,3};</int></int></p>
<ol start="3">
<li><p>auto，decltype</p>
<p>auto 可以实现对变量的推导，还不能用于推导数组类型<br>decltype 可以对表达式进行推导</p>
</li>
<li><p>控制流 if constexpr<br>C++11 引入了 constexpr 关键字，它将表达式或函数编译为常量结果。<br>C++17 将 constexpr 这个关键字引入到 if 语句中，允许在代码中声明常量<br>表达式的判断条件，让代码在编译时就完成分支判断，能让程序效率更高：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">print_type_info</span><span class="params">(<span class="type">const</span> T&amp; t)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(std::is_integral&lt;T&gt;::value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> t + <span class="number">0.001</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">print_type_info</span>(<span class="number">5</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">print_type_info</span>(<span class="number">3.14</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">在编译时，实际代码就会表现为如下：</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">print_type_info</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">print_type_info</span><span class="params">(<span class="type">const</span> <span class="type">double</span>&amp; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t + <span class="number">0.001</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">print_type_info</span>(<span class="number">5</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">print_type_info</span>(<span class="number">3.14</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>for 区间迭代</p>
</li>
<li><p>面向对象<br>委托构造<br>C++11 引入了委托构造的概念，这使得构造函数可以在同一个类中一个构造函数调用另一个构造函<br>数，从而达到简化代码的目的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> value1;</span><br><span class="line">    <span class="type">int</span> value2;</span><br><span class="line">    <span class="built_in">Base</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        value1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">int</span> value) : <span class="built_in">Base</span>() <span class="comment">// 委托 Base() 构造函数</span></span><br><span class="line">    &#123; </span><br><span class="line">        value2 = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Base <span class="title">b</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; b.value1 &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; b.value2 &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>继承构造</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subclass</span> : <span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> Base::Base; <span class="comment">// 继承构造</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="function">Subclass <span class="title">s</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; s.value1 &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; s.value2 &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显示虚函数重载</p>
<p>目的：避免意外重载虚函数， 对重写父类函数或者式仅仅是为了重载函数予以明确；<br>方式：引入override，和finnal 关键字<br>override 当重载虚函数时，引入 override 关键字将显式的告知编译器进行重载，编译器将检查基函<br>数是否存在这样的虚函数，否则将无法通过编译：<br>final final 则是为了防止类被继续继承以及终止虚函数继续重载引入的。</p>
<p>显示禁用默认函数<br>目的：为了精确控制默认函数的生成行为<br>在传统 C++ 中，如果程序员没有提供，编译器会默认为对象生成默认构造函数、复制构造、赋值<br>算符以及析构函数。另外， C++ 也为所有类定义了诸如 new delete 这样的运算符。当程序员有需要时，<br>可以重载这部分函数。<br>这就引发了一些需求：无法精确控制默认函数的生成行为。例如禁止类的拷贝时，必须将复制构造<br>函数与赋值算符声明为 private。尝试使用这些未定义的函数将导致编译或链接错误，则是一种非常不<br>优雅的方式。<br>并且，编译器产生的默认构造函数与用户定义的构造函数无法同时存在。若用户定义了任何构造函<br>数，编译器将不再生成默认构造函数，但有时候我们却希望同时拥有这两种构造函数，这就造成了尴尬。<br>C++11 提供了上述需求的解决方案，允许显式的声明采用或拒绝编译器自带的函数。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Magic</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Magic</span>() = <span class="keyword">default</span>; <span class="comment">// 显式声明使用编译器生成的构造</span></span><br><span class="line">Magic&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Magic&amp;) = <span class="keyword">delete</span>; <span class="comment">// 显式声明拒绝编译器生成构造</span></span><br><span class="line"><span class="built_in">Magic</span>(<span class="type">int</span> magic_number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数运行期的强化"><a href="#函数运行期的强化" class="headerlink" title="函数运行期的强化"></a>函数运行期的强化</h3><ol>
<li>匿名函数lamda表达式：需要一个函数但是又不值当创建一个函数<br>基本语法：<br><a href="%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8">捕获列表</a> mutable(可选) 异常属性 -&gt; 返回类型<br>{<br> // 函数体<br>}</li>
</ol>
<p>C++14 开始支持模板lamda函数</p>
<p>auto add(auto x, auto y)<br>{<br>    return x+y;<br>}<br>add(1+2);<br>add(1.0+2);</p>
<ol start="2">
<li>函数包装器<br>C++11 std::function 是一种通用、多态的函数封装，它的实例可以对任何可以调用的目标实体进<br>行存储、复制和调用操作，它也是对 C++ 中现有的可调用实体的一种类型安全的包裹（相对来说，函数<br>指针的调用不是类型安全的），换句话说，就是函数的容器。当我们有了函数的容器之后便能够更加方便<br>的将函数、函数指针作为对象进行处理。例如：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> para)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> para;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// std::function 包装了一个返回值为 int, 参数为 int 的函数</span></span><br><span class="line">std::function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; func = foo;</span><br><span class="line"><span class="type">int</span> important = <span class="number">10</span>;</span><br><span class="line">std::function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; func2 = [&amp;](<span class="type">int</span> value) -&gt; <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+value+important;</span><br><span class="line">&#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">func</span>(<span class="number">10</span>) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">func2</span>(<span class="number">10</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">std::bind 和 std::placeholder</span><br><span class="line">而 std::bind 则是用来绑定函数调用的参数的，它解决的需求是我们有时候可能并不一定能够一次</span><br><span class="line">性获得调用某个函数的全部参数，通过这个函数，我们可以将部分调用参数提前绑定到函数身上成为一</span><br><span class="line">个新的对象，然后在参数齐全后，完成调用。例如：</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将参数 1,2 绑定到函数 foo 上，但是使用 std::placeholders::_1 来对第一个参数进行占位</span></span><br><span class="line"><span class="keyword">auto</span> bindFoo = std::<span class="built_in">bind</span>(foo, std::placeholders::_1, <span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 这时调用 bindFoo 时，只需要提供第一个参数即可</span></span><br><span class="line"><span class="built_in">bindFoo</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ol>
<li><p>array<br>如果对象大小是固定的，建议使用array, vector需要显式释放内存，而且vector扩容时会存在性能损失；<br>array提供现代化的接口，是否为空，size等<br>array 与常规C程序交互，如：<br>void foo(int *p, int len) {</p>
<pre><code>     return;
</code></pre>
<p> }<br>foo(arr.data(), arr.size()); </p>
</li>
<li><p>unordermap/unorder_multimap, set/multiset<br>传统 C++ 中的有序容器 std::map/std::set，这些元素内部通过红黑树进行实现，<br>插入和搜索的平均复杂度均为 O(log(size))。在插入元素时候，会根据 &lt; 操作符比较元素大小并判断<br>元素是否相同，并选择合适的位置插入到容器中。当对这个容器中的元素进行遍历时，输出结果会按照<br>&lt; 操作符的顺序来逐个遍历。<br>而无序容器中的元素是不进行排序的，内部通过 Hash 表实现，插入和搜索元素的平均复杂度为<br>O(constant)，在不关心容器内部元素顺序时，能够获得显著的性能提升。</p>
</li>
<li><p>tuple</p>
</li>
</ol>
<ul>
<li>std::make_tuple: 构造元组</li>
<li>std::get: 获得元组某个位置的值</li>
<li>std::tie: 元组拆包</li>
</ul>
<ol start="4">
<li>forward_list 前向列表<h3 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h3></li>
</ol>
<p>//TODO</p>
<h3 id="智能指针与内存管理"><a href="#智能指针与内存管理" class="headerlink" title="智能指针与内存管理"></a>智能指针与内存管理</h3><h3 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h3><p>主要体现以下头文件中：</p>
<ul>
<li>atomic</li>
<li>thread</li>
<li>mutex</li>
<li>conditon_varibale</li>
</ul>
<ol>
<li>互斥量和临界区</li>
<li>std::mutex lock&amp;unlock, RAII机制, unique_lock</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="type">int</span> v = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">critical_section</span><span class="params">(<span class="type">int</span> change_v)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> std::mutex mtx;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">    <span class="comment">// 执行竞争操作</span></span><br><span class="line">    v = change_v;</span><br><span class="line">    <span class="comment">// 离开此作用域后 mtx 会被释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(critical_section, <span class="number">2</span>)</span>, <span class="title">t2</span><span class="params">(critical_section, <span class="number">3</span>)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    std::cout &lt;&lt; v &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">由于 C++ 保证了所有栈对象在生命周期结束时会被销毁，所以这样的代码也是异常安全的。无论<span class="built_in">critical_section</span>() 正常返回、还是在中途抛出异常，都会引发堆栈回退，也就自动调用了 <span class="built_in">unlock</span>()。而 std::unique_lock 则相对于 std::lock_guard 出现的，std::unique_lock 更加灵活，std::unique_lock 的对象会以独占所有权（没有其他的 unique_lock 对象同时拥有某个 mutex对象的所有权）的方式管理 mutex 对象上的上锁和解锁的操作。所以在并发编程中，推荐使用std::unique_lock。</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="type">int</span> v = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">critical_section</span><span class="params">(<span class="type">int</span> change_v)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> std::mutex mtx;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">    <span class="comment">// 执行竞争操作</span></span><br><span class="line">    v = change_v;</span><br><span class="line">    std::cout &lt;&lt; v &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 将锁进行释放</span></span><br><span class="line">    lock.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="comment">// 在此期间，任何人都可以抢夺 v 的持有权</span></span><br><span class="line">    <span class="comment">// 开始另一组竞争操作，再次加锁</span></span><br><span class="line">    lock.<span class="built_in">lock</span>();</span><br><span class="line">    v += <span class="number">1</span>;</span><br><span class="line">    std::cout &lt;&lt; v &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(critical_section, <span class="number">2</span>)</span>, <span class="title">t2</span><span class="params">(critical_section, <span class="number">3</span>)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 异步调用</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="comment">// 将一个返回值为 7 的 lambda 表达式封装到 task 中</span></span><br><span class="line">    <span class="comment">// std::packaged_task 的模板参数为要封装函数的类型</span></span><br><span class="line">    <span class="function">std::packaged_task&lt;<span class="title">int</span><span class="params">()</span>&gt; <span class="title">task</span><span class="params">([]()&#123;<span class="keyword">return</span> <span class="number">7</span>;&#125;)</span></span>;</span><br><span class="line">    <span class="comment">// 获得 task 的期物</span></span><br><span class="line">    std::future&lt;<span class="type">int</span>&gt; result = task.<span class="built_in">get_future</span>(); <span class="comment">// 在一个线程中执行 task</span></span><br><span class="line">    std::<span class="built_in">thread</span>(std::<span class="built_in">move</span>(task)).<span class="built_in">detach</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;waiting...&quot;</span>;</span><br><span class="line">    result.<span class="built_in">wait</span>(); <span class="comment">// 在此设置屏障，阻塞到期物的完成</span></span><br><span class="line">    <span class="comment">// 输出执行结果</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;done!&quot;</span> &lt;&lt; std:: endl &lt;&lt; <span class="string">&quot;future result is &quot;</span> &lt;&lt; result.<span class="built_in">get</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>条件变量<br>详见blog “条件变量篇”</li>
</ol>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>//TODO</p>
<h3 id="C-与-C-的兼容性问题"><a href="#C-与-C-的兼容性问题" class="headerlink" title="C++ 与 C 的兼容性问题"></a>C++ 与 C 的兼容性问题</h3><p>分开编译统一链接</p>
<h3 id="reference-：https-github-com-changkun-modern-cpp-tutorial"><a href="#reference-：https-github-com-changkun-modern-cpp-tutorial" class="headerlink" title="reference ：https://github.com/changkun/modern-cpp-tutorial"></a>reference ：<a href="https://github.com/changkun/modern-cpp-tutorial">https://github.com/changkun/modern-cpp-tutorial</a></h3>]]></content>
  </entry>
  <entry>
    <title>学习和能力提升</title>
    <url>/2022/06/09/%E5%AD%A6%E4%B9%A0%E5%92%8C%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[<p>IT行业技术日新月异，程序员也是一个职业焦虑非常严重的职业群体，平时工作之余也都自律和勤奋的学习浏览各种技术大咖的教程和技术贴，但是一段时间后，发现自己的实际技能并未有实质性的提高，浏览<a href="https://www.bilibili.com/video/BV1h54y117DX">韩顺平</a>总结的13误区，有所共鸣，特回顾总结一下</p>
<h2 id="自主学习时的误区"><a href="#自主学习时的误区" class="headerlink" title="自主学习时的误区"></a>自主学习时的误区</h2><h3 id="基础知识体系很重要"><a href="#基础知识体系很重要" class="headerlink" title="基础知识体系很重要"></a>基础知识体系很重要</h3><p>人们总是热衷在探讨预测未来，未来会……, 但很少会思考什么东西不会变，各种框架层出不穷，让人应接不暇，但是对一个程序员而言，底层架构，基础知识如设计模式 ，数据结构和算法，操作系统，多线程…，这是一个程序员无法避开的问题，并且近十年可能不会改变。</p>
<h3 id="关于语言"><a href="#关于语言" class="headerlink" title="关于语言"></a>关于语言</h3><p>没有最好的语言，语言有自己的特点，擅长处理不同的问题，语言仅仅是工具，是服务自己的工作和目标的，最好是精通一门语言后，再横向发展拓展自己知识面，成为为T型人才（一专多能），而且精通一门语言后，再学习其他语言也能事半功倍。</p>
<h3 id="做中学"><a href="#做中学" class="headerlink" title="做中学"></a>做中学</h3><p>计算机是一门实践科学，一方面在实践中能深度思考，加深理解，其次，对于软件开发来说，各种知识只有最终转化为生产代码，解决工作中的问题才能产生价值。</p>
<p>天天看健身视频，并不能使我们拥有强健的肌肉，同样对于编程学习只看不练，同样没效果。纸上得来终觉浅，绝知此事要躬行。</p>
<p>分享一个发生在自己身上的小例子，一次我和一个小伙伴想搭建一个调试环境，环境本身很复杂，任务文件和库文件很多而且存在各种依赖，我把对应版本软件部署后，一个组件的代码报了一个很奇快的异常，但是这个组件不是我们负责的，我们无法处理，维护这部分代码的同事暂时联系不上，但是他这版本的代码在别的环境运行的是好的，我俩感觉不是这个组件代码本身的问题，花了几个小时分析原因，各种百度，这种可能是什么问题…, 最后，把代码重新重新部署一遍，一切正常。根本原因：FTP 传输程序时发生异常，部署的软件是有问题的。<br>事实证明，各种理论分析，思考还不如试一次来的实在。</p>
<h3 id="听懂和使用"><a href="#听懂和使用" class="headerlink" title="听懂和使用"></a>听懂和使用</h3><p>听懂和使用是完全不同的层次，听懂之后必须进行一些针对性的练习，像这种专业技能，听懂只能吸收10%能量，即使这10%的能量也会随着时间进行衰减；</p>
<p>只是听属于无效学习，游泳课上，老师告诉你腿应该怎样蹬，手应该怎样放，但是还是学不会游泳，中间缺少了消化吸收的过程；</p>
<p>建议:学习一门课中，至少用自己语言总结所学到的知识，并绘制成思维导图；</p>
<h3 id="know-how-know-why"><a href="#know-how-know-why" class="headerlink" title="know how, know why"></a>know how, know why</h3><p>面对一个新事物，先整体后局部，先大致了解，后逐步深入，先知道如何使用再逐步探索为什么是这样。</p>
<h3 id="勇于分享和交流"><a href="#勇于分享和交流" class="headerlink" title="勇于分享和交流"></a>勇于分享和交流</h3><p>不要闭门造车，敢于交流分享，交流分享技术很重要，不要让自己成为井底之蛙，很多问题别人也许有特别好的解决办法，不怕嘲笑，都是过来人，越战越勇！<br>输出也是学习的一种方法。</p>
<h3 id="拥抱错误和异常"><a href="#拥抱错误和异常" class="headerlink" title="拥抱错误和异常"></a>拥抱错误和异常</h3><p>这是提高自己能力的重要方法，排除错误才会提升能力也会避免犯错。</p>
<h3 id="资源在精不在多"><a href="#资源在精不在多" class="headerlink" title="资源在精不在多"></a>资源在精不在多</h3><p>误区：热衷搜集各种资料，收藏从未停止，学习从未开始。<br>建议：选一个最好的，反复学习，真正掌握。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌套for循环编程</title>
    <url>/2022/08/04/%E5%B5%8C%E5%A5%97for%E5%BE%AA%E7%8E%AF%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="编程注意事项"><a href="#编程注意事项" class="headerlink" title="编程注意事项"></a>编程注意事项</h3><ol>
<li>将for循环内的无关表达式提取到外面</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1000000</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//与循环变量无关，放到外面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>将for里面的条件预先处理好, k = v.size() </li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>() ; i++)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1000000</span>; k++)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="comment">//与循环变量无关，放到外面</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>异常放在for循环外面</li>
<li>外层循环小，内层循环大（理论分析如此，事实并非如此）why??? 应该与编译器优化有关? TODO</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> t1 = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1000000</span>; k++)</span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			<span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> t2 = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)</span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			<span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> t3 = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">	cout &lt;&lt; std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(t2 - t1).<span class="built_in">count</span>() </span><br><span class="line">		&lt;&lt; <span class="string">&quot;ms &quot;</span> &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(t3 - t2).<span class="built_in">count</span>()</span><br><span class="line">		&lt;&lt; <span class="string">&quot;ms &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Windows 运行结果：</span><br><span class="line"><span class="number">17</span> ms</span><br><span class="line"><span class="number">11</span> ms</span><br><span class="line"></span><br><span class="line">Linux 运行结果：</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~$ g++ -std=c++<span class="number">11</span> test.cpp -o test</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~$ ./test</span><br><span class="line"><span class="number">14</span>ms</span><br><span class="line"><span class="number">10</span>ms</span><br><span class="line"></span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~$ ./test</span><br><span class="line"><span class="number">17</span>ms</span><br><span class="line"><span class="number">10</span>ms</span><br><span class="line"></span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~$ ./test</span><br><span class="line"><span class="number">15</span>ms</span><br><span class="line"><span class="number">10</span>ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
        <category>性能优化</category>
      </categories>
  </entry>
  <entry>
    <title>图像处理性能提升</title>
    <url>/2022/06/06/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>#实现系统性能优化</p>
<ol>
<li>cpu绑定</li>
<li>算法</li>
<li>函数调用次数与耗时比</li>
<li>simd 技术（提升10倍左右）</li>
<li>OpenMP</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NDEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ASSERT.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;emmintrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;xmmintrin.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">	<span class="type">void</span> _AssertMsg(<span class="type">char</span> *strMessage);</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ASSERTMSG(f,str) \</span></span><br><span class="line"><span class="meta">	<span class="keyword">if</span>(f)					\</span></span><br><span class="line"><span class="meta">		NULL;				\</span></span><br><span class="line"><span class="meta">	<span class="keyword">else</span>					\</span></span><br><span class="line"><span class="meta">		_AssertMsg(str)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ASSERTMSG(f,str) NULL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Compare1</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* src, <span class="type">unsigned</span> <span class="type">char</span>* min, <span class="type">unsigned</span> <span class="type">char</span>* max,\</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="type">unsigned</span> <span class="type">char</span>* result, <span class="type">int</span> height, <span class="type">int</span> width)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> t = (<span class="type">double</span>)<span class="built_in">getTickCount</span>();<span class="comment">//开始时间</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; height; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; width; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			result[j + i*width] = (<span class="type">unsigned</span> <span class="type">char</span>)((src[j + i*width] &lt; min[j + i*width]) * <span class="number">255</span> | (src[j + i*width]&gt; max[j + i*width]*<span class="number">255</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	t = (<span class="type">double</span>)<span class="built_in">getTickCount</span>() - t;<span class="comment">//代码运行时间=结束时间-开始时间</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Compare1 execution time = %gms\n&quot;</span>, t*<span class="number">1000.</span> / <span class="built_in">getTickFrequency</span>());<span class="comment">//转换时间单位并输出代码运行</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Compare2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* src, <span class="type">unsigned</span> <span class="type">char</span>* min, <span class="type">unsigned</span> <span class="type">char</span>* max, \</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="type">unsigned</span> <span class="type">char</span>* result, <span class="type">int</span> height, <span class="type">int</span> width)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> t = (<span class="type">double</span>)<span class="built_in">getTickCount</span>();<span class="comment">//开始时间</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; height; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= width<span class="number">-16</span>; j+=<span class="number">16</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			__m128i res1 = _mm_loadu_si128((<span class="type">const</span> __m128i *)(src + j));</span><br><span class="line">			__m128i res2 = _mm_loadu_si128((<span class="type">const</span> __m128i *)(min + j));</span><br><span class="line">			__m128i res3 = _mm_loadu_si128((<span class="type">const</span> __m128i *)(max + j));</span><br><span class="line"></span><br><span class="line">			__m128i min = _mm_andnot_si128(_mm_cmpeq_epi8(_mm_max_epu8(res1, res2), res1), _mm_set1_epi8(<span class="number">-1</span>));</span><br><span class="line">			__m128i max = _mm_andnot_si128(_mm_cmpeq_epi8(_mm_max_epu8(res1, res3), res1), _mm_set1_epi8(<span class="number">-1</span>));</span><br><span class="line">			min = _mm_or_si128(min,max);</span><br><span class="line">			_mm_storeu_si128((__m128i*)(result+j), min);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (; j &lt; width; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			result[j + i*width] = (<span class="type">unsigned</span> <span class="type">char</span>)((src[j + i*width] &lt; min[j + i*width]) * <span class="number">255</span> | (src[j + i*width]&gt; max[j + i*width] * <span class="number">255</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	t = (<span class="type">double</span>)<span class="built_in">getTickCount</span>() - t;<span class="comment">//代码运行时间=结束时间-开始时间</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Compare1 execution time = %gms\n&quot;</span>, t*<span class="number">1000.</span> / <span class="built_in">getTickFrequency</span>());<span class="comment">//转换时间单位并输出代码运行</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	Mat imgSrc = Mat::<span class="built_in">zeros</span>(<span class="number">500</span>, <span class="number">400</span>, CV_8UC1);</span><br><span class="line">	Mat imgRes = Mat::<span class="built_in">zeros</span>(<span class="number">500</span>, <span class="number">400</span>, CV_8UC1);</span><br><span class="line">	Mat imgMin = <span class="built_in">Mat</span>(<span class="number">500</span>, <span class="number">400</span>, CV_8UC1, <span class="number">100</span>);</span><br><span class="line">	Mat imgMax = <span class="built_in">Mat</span>(<span class="number">500</span>, <span class="number">400</span>, CV_8UC1, <span class="number">255</span>);</span><br><span class="line">	<span class="built_in">randu</span>(imgSrc, cv::Scalar::<span class="built_in">all</span>(<span class="number">0</span>), cv::Scalar::<span class="built_in">all</span>(<span class="number">255</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">Compare1</span>(imgSrc.data, imgMin.data, imgMax.data, imgRes.data, <span class="number">500</span>, <span class="number">400</span>);</span><br><span class="line">	<span class="built_in">Compare2</span>(imgSrc.data, imgMin.data, imgMax.data, imgRes.data, <span class="number">500</span>, <span class="number">400</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### openMP </span><br><span class="line"><span class="number">1.</span> 配置： VS 环境项目属性 --&gt; C/C++ --&gt; 语言 --&gt; OpenMP支持，下拉菜单选择“是（/openmp）”；GNU 添加编译选项 -fopenmp；</span><br><span class="line"><span class="number">2.</span> 测试计算机核数：<span class="built_in">omp_get_thread_num</span>()；</span><br><span class="line"><span class="number">3.</span> [示例程序]https:<span class="comment">//zhuanlan.zhihu.com/p/397670985</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>#reference<br>1、<a href="https://www.agner.org/optimize/">https://www.agner.org/optimize/</a><br>2、Software optimization resources. C++ and assembly. Windows, Linux, BSD, Mac OS X</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>reflection and factory</title>
    <url>/2022/08/07/reflection-and-factory/</url>
    <content><![CDATA[<h3 id="通过将构造函数添加到Map中，可实现传入字符串，创建子类对象；"><a href="#通过将构造函数添加到Map中，可实现传入字符串，创建子类对象；" class="headerlink" title="通过将构造函数添加到Map中，可实现传入字符串，创建子类对象；"></a>通过将构造函数添加到Map中，可实现传入字符串，创建子类对象；</h3><p>传统工厂模式，需要知道子类的类型；<br>一旦添加子类会导致需要修改工厂类；<br>如下方式可以不修改工厂类，仅仅需要注册一下即可；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DriveClass</span>, <span class="keyword">typename</span>... ArgType&gt;</span><br><span class="line"><span class="type">void</span>* __createObjFunc(ArgType... arg)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> DriveClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> REGISTER</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER(DriveClass, ...)\</span></span><br><span class="line"><span class="meta">	static int ##DriveClass = CFactory::registerFunc(\</span></span><br><span class="line"><span class="meta">#DriveClass, (void*)&amp;__createObjFunc<span class="string">&lt;DriveClass, ##__VA_ARGS__&gt;</span>);</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">BaseClass</span>, <span class="keyword">typename</span>... ArgType&gt;</span><br><span class="line">	<span class="function"><span class="type">static</span> BaseClass* <span class="title">create</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* classname, ArgType... arg)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">typedef</span> BaseClass* (*_CreateFactory)(ArgType...);</span><br><span class="line">		<span class="keyword">auto</span>&amp; _map = _getStaticMap();</span><br><span class="line">		<span class="keyword">if</span> (_map.<span class="built_in">find</span>(classname) != _map.<span class="built_in">end</span>())</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">reinterpret_cast</span>&lt;_CreateFactory&gt;(_map[classname])(ArgType...);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">registerFunc</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* classname, <span class="type">void</span>* func)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		_getStaticMap()[classname] = func;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">static</span> std::map&lt;<span class="type">const</span> <span class="type">char</span>*, <span class="type">void</span>*&gt;&amp; _getStaticMap()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">static</span> std::map&lt;<span class="type">const</span> <span class="type">char</span>*, <span class="type">void</span>*&gt; _map;</span><br><span class="line">		<span class="keyword">return</span> _map;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Factory.cpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print_info</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DriveA</span> : Base</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print_info</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;DriveA&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">REGISTER</span>(DriveA);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DriveB</span> : Base</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print_info</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;DriveB&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">REGISTER</span>(DriveB);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Base* pBase1 = CFactory::<span class="built_in">create</span>&lt;Base&gt;(<span class="string">&quot;DriveA&quot;</span>);</span><br><span class="line">	pBase1-&gt;<span class="built_in">print_info</span>();</span><br><span class="line"></span><br><span class="line">	Base* pBase2 = CFactory::<span class="built_in">create</span>&lt;Base&gt;(<span class="string">&quot;DriveB&quot;</span>);</span><br><span class="line">	pBase2-&gt;<span class="built_in">print_info</span>();</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 深拷贝</title>
    <url>/2022/06/14/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%92%8C%E6%8B%B7%E8%B4%9D%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">    A* p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() </span><br><span class="line">    &#123; </span><br><span class="line">        p = <span class="keyword">new</span> A;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">B</span>() </span><br><span class="line">    &#123; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">B</span>(<span class="type">const</span> B&amp; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;b)</span><br><span class="line">        &#123;</span><br><span class="line">            p = <span class="keyword">new</span> A;</span><br><span class="line">            p-&gt;i = b.p-&gt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;copy construct =&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    B&amp; <span class="keyword">operator</span>=(<span class="type">const</span> B&amp; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">delete</span> p;</span><br><span class="line">                p = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = <span class="keyword">new</span> A;</span><br><span class="line">            p-&gt;i = b.p-&gt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;operator =&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">say</span><span class="params">(B b)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    <span class="built_in">say</span>(b);</span><br><span class="line">    <span class="comment">//B bb = b; //copy 构造</span></span><br><span class="line">    B bb;       <span class="comment">//copy 赋值</span></span><br><span class="line">    bb = b;     <span class="comment">//copy 赋值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="string-类"><a href="#string-类" class="headerlink" title="string 类"></a>string 类</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>：</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">    ~<span class="built_in">String</span>(<span class="type">void</span>);</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; other);</span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; other);</span><br><span class="line">    <span class="type">char</span>* m_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> String&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(other.m_data);</span><br><span class="line">    m_data = <span class="keyword">new</span> <span class="type">char</span>[length+<span class="number">1</span>];<span class="comment">//判空</span></span><br><span class="line">    <span class="built_in">strcpy</span>(m_data, other.m_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//检查自我赋值</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;other)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放已有内存</span></span><br><span class="line">    <span class="keyword">delete</span> [] m_data;</span><br><span class="line">    <span class="comment">//分配内存，复制内容 </span></span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(other.m_data);</span><br><span class="line">    m_data = <span class="keyword">new</span> <span class="type">char</span>[length+<span class="number">1</span>];<span class="comment">//判空</span></span><br><span class="line">    <span class="built_in">strcpy</span>(m_data, other.m_data);</span><br><span class="line">    <span class="comment">//返回本对象引用</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::~<span class="built_in">String</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] m_data; <span class="comment">//如是内置类型[] 可省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">        m_data[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;     <span class="comment">// 写成*m_data = &#x27;\0&#x27; 更好</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str)+<span class="number">1</span>]; <span class="comment">//需判空</span></span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习概念和分类</title>
    <url>/2022/06/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E5%BF%B5%E5%92%8C%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="机器学习概念"><a href="#机器学习概念" class="headerlink" title="机器学习概念"></a>机器学习概念</h3><blockquote>
<ul>
<li>机器学习是一种从大量的数据中生成规则、发现模型，来帮助我们预测、判断、分组和解决问题的技术。</li>
<li>传统程序是程序员来定义函数，而在机器学习中是机器训练出函数。机器学习的本质特征，就是从数据中发现规则。</li>
<li>我们做机器学习项目，就是要选定一个算法，然后用数据训练机器，找到一族函数中最适合的那一个，形成模型。</li>
</ul>
</blockquote>
<h3 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h3><ul>
<li>训练数据集全部有标签，叫监督学习（supervised learning）；如决策树，SVM， 贝叶斯</li>
<li>训练数据集没有标签，叫做无监督学习（unsupervised learning）；如聚类，降维等。</li>
<li>在训练数据集中，有的数据有标签，有的数据没有标签，我们叫做半监督学习（semi-supervised learning）。</li>
<li>强化学习：不断地根据环境的反馈信息进行试错学习，进而调整优化自身的状态信息，其目的是为了找到最优策略、或者找到最大奖励的过程。（Reinforcement Learning）<br>不一定每次都明确地选择最优动作，而是要在探索（未知领域）和利用（当前知识）之间找到平衡。它反复试错、不断收集反馈，收集可供自己学习的信号，每经过一个训练周期，都变得比原来强一点，经过亿万次的训练能变得非常强大。</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>架构设计</title>
    <url>/2022/08/18/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="平台架构心得？"><a href="#平台架构心得？" class="headerlink" title="平台架构心得？"></a>平台架构心得？</h2><p>平台设计：<br>通讯：为各分系统提供提供网络消息，事件，数据的传输功能；提供客户端和服务端代码框架；<br>异常处理机制：<br>数据追踪机制：<br>系统管理机制：<br>数据管理机制：<br>机器常数机制：</p>
<p>运行于各种硬件和OS平台；<br>支持标准的TCP-IP协议，和统一的接口；</p>
<p>系统通用API封装：<br>IPC机制：共享内存，信号量， 管道；<br>IO读写：文件，终端设备(串口）网络；<br>数据库操作：<br>Xml：操作</p>
<h2 id="如何进行一个模块设计"><a href="#如何进行一个模块设计" class="headerlink" title="如何进行一个模块设计?"></a>如何进行一个模块设计?</h2><p>以输出需求规格书和概要设计为载体的设计流程：</p>
<h3 id="需求规格书：为概要设计和详细设计，测试，编码提供依据和约束；"><a href="#需求规格书：为概要设计和详细设计，测试，编码提供依据和约束；" class="headerlink" title="需求规格书：为概要设计和详细设计，测试，编码提供依据和约束；"></a>需求规格书：为概要设计和详细设计，测试，编码提供依据和约束；</h3><p>需求规格书：</p>
<ol>
<li><p>总体需求概述（来自上层文档如产品头文件文档）</p>
</li>
<li><p>假设和依据（哪些问题后期大概率会出现，哪些场景一定不会出现，满足功能，又不过度设计） </p>
</li>
<li><p>约束：对系统的可用性，可维护性，进行约束。</p>
</li>
<li><p>功能需求分解，需求列表（需求描述，前置条件，后置条件，需求来源）；</p>
</li>
<li><p>性能需求</p>
</li>
<li><p>测试需求</p>
</li>
<li><p>测校需求</p>
</li>
</ol>
<h2 id="概要设计：以需求规格说明书为依据，对软件架构进行详细描述，对相应功能的实现过程进行详细介绍，为集成测试提供依据；"><a href="#概要设计：以需求规格说明书为依据，对软件架构进行详细描述，对相应功能的实现过程进行详细介绍，为集成测试提供依据；" class="headerlink" title="概要设计：以需求规格说明书为依据，对软件架构进行详细描述，对相应功能的实现过程进行详细介绍，为集成测试提供依据；"></a>概要设计：以需求规格说明书为依据，对软件架构进行详细描述，对相应功能的实现过程进行详细介绍，为集成测试提供依据；</h2><ol>
<li><p>软件架构： 组件划分，架构图，组件之间依赖图，组件部署图（满足设计约束，数据追踪和异常处理）<br>各组件之间关系，调用规则。符合平台规范，确定目录结构；</p>
</li>
<li><p>关键功能序列图</p>
</li>
<li><p>原则：SOILD, KISS, 快速迭代优于一步到位；</p>
</li>
<li><p>各组件之间的接口信息；</p>
</li>
<li><p>集成方案：集成环境，集成步骤，集成流程。</p>
</li>
</ol>
<p>输出：类定义，即头文件。</p>
<p>（5） 活动图？ </p>
<h2 id="架构的相关概念"><a href="#架构的相关概念" class="headerlink" title="架构的相关概念"></a>架构的相关概念</h2><ol>
<li><p>系统与子系统<br>一个系统的架构，只包括顶层这一个层级的架构，而不包括下属子系统层级的架构。所以微信架构，就是指微信系统这个层级的架构。当然，微信的子系统，比如支付系统，也有它自己的架构，同样只包括顶层。</p>
</li>
<li><p> 模块与组件<br>模块和组件都是系统的组成部分，只是从不同的角度拆分系统而已。从业务逻辑的角度来拆分系统后，得到的单元就是“模块”；从物理部署的角度来拆分系统后，得到的单元就是“组件”。</p>
</li>
</ol>
<p>划分模块的主要目的是职责分离；划分组件的主要目的是单元复用。</p>
<p>其实，“组件”的英文 Component 也可翻译成中文的“零件”一词。“零件”更容易理解一些，它是一个物理的概念，并且具备“独立且可替换”的特点。我以一个最简单的网站系统来为例。假设我们要做一个学生信息管理系统，这个系统从逻辑的角度来拆分，可以分为“登录注册模块”“个人信息模块”和“个人成绩模块”；从物理的角度来拆分，可以拆分为 Nginx、Web 服务器和 MySQL。</p>
<p>如果你是业务系统的架构师，首先需要思考怎么从业务逻辑的角度把系统拆分成一个个模块角色，其次需要思考怎么从物理部署的角度把系统拆分成组件角色，例如选择 MySQL 作为存储系统。但是对于 MySQL 内部的体系架构（Parser、Optimizer、Caches&amp;Buffers 和 Storage Engines 等），你其实是可以不用关注的，也不需要在你的业务系统架构中展现这些内容。</p>
<ol start="3">
<li><p>框架与架构<br>框架关注的是“规范”，架构关注的是“结构”。<br>框架是一整套开发规范，架构是某一套开发规范下的具体落地方案，包括各个模块之间的组合关系以及它们协同起来完成功能的运作规则。</p>
</li>
<li><p>4R架构<br>软件架构指软件系统的顶层（Rank）结构，它定义了系统由哪些角色（Role）组成，角色之间的关系（Relation）和运作规则（Rule）。<br>第一个 R，Rank。它是指软件架构是分层的，对应“系统”和“子系统”的分层关系。通常情况下，我们只需要关注某一层的架构，最多展示相邻两层的架构，而不需要把每一层的架构全部糅杂在一起。无论是架构设计还是画架构图，都应该采取“自顶向下，逐步细化”的方式。</p>
<p>第二个 R，Role。它是指软件系统包含哪些角色，每个角色都会负责系统的一部分功能。架构设计最重要的工作之一就是将系统拆分为多个角色。最常见的微服务拆分其实就是将整体复杂的业务系统按照业务领域的方式，拆分为多个微服务，每个微服务就是系统的一个角色。</p>
<p>第三个 R，Relation。它是指软件系统的角色之间的关系，对应到架构图中其实就是连接线，角色之间的关系不能乱连，任何关系最后都需要代码来实现，包括连接方式（HTTP、TCP、UDP 和串口等）、数据协议（JSON、XML 和二进制等）以及具体的接口等。</p>
<p>第四个 R，Rule。它是指软件系统角色之间如何协作来完成系统功能。我们在前面解读什么是“系统”的时候提到过：系统能力不是个体能力之和，而是产生了新的能力。那么这个新能力具体如何完成的呢？具体哪些角色参与了这个新能力呢？这就是 Rule 所要表达的内容。在架构设计的时候，核心的业务场景都需要设计 Rule。在实际工作中，为了方便理解，Rank、Role 和 Relation 是通过系统架构图来展示的，而 Rule 是通过系统序列图（System Sequence Diagram）来展示的。</p>
</li>
</ol>
<h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><p> <a href="https://time.geekbang.org/column/article/6458?utm_source=u_nav_web&amp;utm_medium=u_nav_web&amp;utm_term=banner">https://time.geekbang.org/column/article/6458?utm_source=u_nav_web&amp;utm_medium=u_nav_web&amp;utm_term=banner</a></p>
]]></content>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>系统架构</title>
    <url>/2022/06/10/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h3 id="多角度理解软件架构"><a href="#多角度理解软件架构" class="headerlink" title="多角度理解软件架构"></a>多角度理解软件架构</h3><ol>
<li>程序员：基于何种框架编写哪些类？</li>
<li>PL：模块划分和接口定义</li>
<li>SE: 业务领域对象关系的建模</li>
</ol>
<h3 id="系统描述维度"><a href="#系统描述维度" class="headerlink" title="系统描述维度"></a>系统描述维度</h3><ol>
<li>对外接口约定</li>
<li>作用域控制</li>
<li>组件命名</li>
<li>计算机系统架构</li>
<li>执行架构：驱动器</li>
<li>运行目录架构</li>
<li>代码目录架构</li>
<li>项目编译架构</li>
<li>数据管理架构</li>
</ol>
]]></content>
      <categories>
        <category>软件设计</category>
      </categories>
  </entry>
  <entry>
    <title>编码练习-string</title>
    <url>/2022/06/11/%E7%BC%96%E7%A0%81%E7%BB%83%E4%B9%A0-string/</url>
    <content><![CDATA[<h3 id="判定字符是否唯一"><a href="#判定字符是否唯一" class="headerlink" title="判定字符是否唯一"></a>判定字符是否唯一</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isUnique</span><span class="params">(string astr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mask = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> cr : astr)&#123;</span><br><span class="line">            step = cr - <span class="built_in">int</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(mask &amp; (<span class="number">1</span>&lt;&lt;step))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                mask |= (<span class="number">1</span>&lt;&lt;step);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isUnique</span><span class="params">(string astr)</span> </span>&#123;       </span><br><span class="line">        set&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> cr : astr)&#123;</span><br><span class="line">            s.<span class="built_in">insert</span>(cr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> astr.<span class="built_in">size</span>() == s.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="判定是否互为字符重排"><a href="#判定是否互为字符重排" class="headerlink" title="判定是否互为字符重排"></a>判定是否互为字符重排</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">CheckPermutation</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(s1.<span class="built_in">length</span>() != s2.<span class="built_in">length</span>())</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">sort</span>(s1.<span class="built_in">begin</span>(), s1.<span class="built_in">end</span>());</span><br><span class="line">      <span class="built_in">sort</span>(s2.<span class="built_in">begin</span>(), s2.<span class="built_in">end</span>());</span><br><span class="line">      <span class="keyword">return</span>  s1 == s2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">时间复杂度：<span class="built_in">O</span>(nlogn)，其中 n 为s1的长度。排序的时间复杂度为 <span class="built_in">O</span>(n\log n)<span class="built_in">O</span>(nlogn)，比较两个字符串是否相等时间复杂度为 <span class="built_in">O</span>(n)，因此总体时间复杂度为 <span class="built_in">O</span>(nlogn+n)=<span class="built_in">O</span>(nlogn)。</span><br><span class="line"></span><br><span class="line">空间复杂度：<span class="built_in">O</span>(logn)。排序需要<span class="built_in">O</span>(logn) 的空间复杂度。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> <span class="built_in">CheckPermutation</span>(string s1, string s2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.<span class="built_in">length</span>() != s2.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">table</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ch: s1) &#123;</span><br><span class="line">            table[ch - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ch: s2) &#123;</span><br><span class="line">            table[ch - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span> (table[ch - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">时间复杂度：<span class="built_in">O</span>(n)，其中 nn 为 s <span class="number">1</span>的长度。</span><br><span class="line">空间复杂度：<span class="built_in">O</span>(S)，其中 S 为字符集大小，此处 S=<span class="number">26</span>。</span><br><span class="line"></span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/check-permutation-lcci/solution/pan-ding-shi-fou-hu-wei-zi-fu-zhong-pai-dmkmc/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="URL化。编写一种方法，将字符串中的空格全部替换为-20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）"><a href="#URL化。编写一种方法，将字符串中的空格全部替换为-20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）" class="headerlink" title="URL化。编写一种方法，将字符串中的空格全部替换为%20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）"></a>URL化。编写一种方法，将字符串中的空格全部替换为%20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpaces</span><span class="params">(string S, <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">        string s1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">0</span>; len &lt; length; len++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(S[len] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s1+=<span class="string">&quot;%20&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                s1+=S[len];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编码练习</category>
      </categories>
  </entry>
  <entry>
    <title>虚拟机安装配置</title>
    <url>/2022/06/10/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.bilibili.com/video/BV1Sv411r7vd?p=6&vd_source=40e74b19984b523314dc020712a38717">安装视频链接</a></p>
<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p><a href="https://wenku.baidu.com/view/fc21220d4873f242336c1eb91a37f111f1850dd0.html">配置文档链接</a></p>
<h3 id="虚拟机clone，迁移和删除"><a href="#虚拟机clone，迁移和删除" class="headerlink" title="虚拟机clone，迁移和删除"></a>虚拟机clone，迁移和删除</h3><p>一切皆文件；<br>删除时注意，通过VMware删除只是删除指向，删除文件才能彻底删除</p>
<h3 id="虚拟机快照和系统恢复"><a href="#虚拟机快照和系统恢复" class="headerlink" title="虚拟机快照和系统恢复"></a>虚拟机快照和系统恢复</h3><h3 id="安装VM-tools"><a href="#安装VM-tools" class="headerlink" title="安装VM tools"></a>安装VM tools</h3><p>Windows下可更好的管理可共享文件夹<br>对于WSL2，本地磁盘均挂载在 WSL 系统中的 /mnt 文件夹下，可以直接访问。<br>对于Windows10 系统，\wsl$ 可访问ubuntu系统下问件</p>
<h3 id="ubuntu-软件安装配置"><a href="#ubuntu-软件安装配置" class="headerlink" title="ubuntu 软件安装配置"></a>ubuntu 软件安装配置</h3><p>sudo  apt-get update 更新源<br>sudo apt-install package 安装包<br>sudo apt-get remove package 删除包<br>sudo apt-cache show package 获取包的相关信息<br>sudo apt-get source package 下载该包的源代码</p>
<h3 id="ubuntu-安装远程登陆"><a href="#ubuntu-安装远程登陆" class="headerlink" title="ubuntu 安装远程登陆"></a>ubuntu 安装远程登陆</h3><p>centos 默认安装ssh,ubuntu 需要自己安装<br>sudo apt-get install openssh-server<br>service sshd restart </p>
]]></content>
      <categories>
        <category>Linux 系统</category>
      </categories>
      <tags>
        <tag>安装配置</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2022/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h3 id="浏览器输入一个url，发生了什么事情？"><a href="#浏览器输入一个url，发生了什么事情？" class="headerlink" title="浏览器输入一个url，发生了什么事情？"></a>浏览器输入一个url，发生了什么事情？</h3><ol>
<li>浏览器会生成http报文，通过DNS协议查找得到远端的IP地址；</li>
<li>创建套接字，浏览器委托操作系统通过tcp/udp协议发起连接请求</li>
<li>经由IP协议协议进行进行封装，使数据包具有远程定位的能力</li>
<li>经Mac层处理找到对方的mac地址</li>
<li>数据包经网卡转换成电信号，经经交换机，路由器发送到服务端，服务端拿到数据，经过类似的层层协议把数据交响应交给客户端</li>
<li>客户端经过渲染，进行显示</li>
</ol>
<p>DNS解析顺序 ： 浏览器DNS缓存 &gt; hosts文件 &gt; 本地DNS服务器 &gt; ISP DNS服务器</p>
<h3 id="网络协议栈"><a href="#网络协议栈" class="headerlink" title="网络协议栈"></a>网络协议栈</h3><p>协议栈的上半部分负责和应用层通过套接字（Socket）进行交互，它可以是 TCP 协议或 UDP 协议。应用层会委托协议栈的上部分完成收发数据的工作；而协议栈的下半部分则负责把数据发送给到指定方的 IP 协议，由 IP 协议连接下层的网卡驱动。</p>
<ol>
<li>通过三次握手建立tcp连接</li>
<li>IP 目标定位IP 寻址、路由和分包组包</li>
<li>点对点传输：MAC(链路层)：<br>MAC 地址指的就是计算机网卡的物理地址（Physical Address），MAC 地址被固化到网卡中，用来标识一个网络设备。MAC 地址是唯一且无重复的，由国际标准化组织分配，用来确保网络中的每个网卡是唯一的。在常规的 TCP/IP 协议中，MAC 头的协议类型只有 IP 和 ARP 两种。</li>
<li>电信号出口网卡（物理层）：<br>数据包转化为电信号，才能在物理的网线上面传输。<br>数据包通过网络协议栈的层层处理，最终得到了 MAC 数据包，这个 MAC 数据包会交给网卡驱动程序，而网卡驱动程序会将 MAC 数据包写入网卡的缓冲区（网卡上的内存）.<br>然后，网卡会在 MAC 数据包的起止位置加入起止帧和校验序列，<br>最后网卡会将加入起止帧和校验序列的 MAC 数据包转化为电信号，发送出去。</li>
<li>数据终于通过网卡离开了计算机，进入到局域网，通过局域网中的设备，集线器、交换机和路由器等，数据会进入到互联网，最终到达目标服务器。</li>
<li>服务器就会先取下数据包的 MAC 头部，查看是否匹配自己 MAC 地址。然后继续取下数据包的 IP 头，数据包中的目标 IP 地址和自己的 IP 地址匹配，再根据 IP 头中协议项，知道自己上层是 TCP 协议。之后，还要继续取下数据包 TCP 的头。完成一系列的顺序校验和状态变更后，TCP 头部里面还有端口号，此时我们的 HTTP 的 server 正在监听这个端口号，就把数据包再发给对应的 HTTP 进程。</li>
<li>HTTP 进程从服务器中拿到对应的资源（HTML 文件），再交给操作系统对数据进行处理。然后再重复上面的过程，层层携带 TCP、IP、MAC 头部。接下来数据从网卡出去，到达客户端，再重复刚才的过程拿到相应数据。客户端拿到对应的 HTML 资源，浏览器就可以开始解析渲染了，这步操作完成后，用户最终就能通过浏览器看到相应的页面。</li>
</ol>
<h3 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h3><p>在 Linux 操作系统中，替代传输层以上协议实体的标准接口，称为套接字，它负责实现传输层以上所有的功能，可以说套接字是 TCP/IP 协议栈对外的窗口。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">socket</span></span><br><span class="line">&#123;</span><br><span class="line">    socket_state state; <span class="comment">// 套接字的状态 </span></span><br><span class="line">    <span class="comment">// 套接字的设置标志。存放套接字等待缓冲区的状态信息，其值的形式如SOCK_ASYNC_NOSPACE等 </span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> flags; </span><br><span class="line">    <span class="comment">// 等待被唤醒的套接字列表，该链表用于异步文件调用</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">fasync_struct</span> *fasync_list; </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">file</span> *file; <span class="comment">// 套接字所属的文件描述符</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sock</span> *sk; <span class="comment">// 指向存放套接字属性的结构指针 </span></span><br><span class="line">    <span class="type">wait_queue_head_t</span> wait; <span class="comment">//套接字的等待队列 </span></span><br><span class="line">    <span class="type">short</span> type; <span class="comment">// 套接字的类型。其取值为SOCK_XXXX形式 </span></span><br><span class="line">    <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">proto_ops</span> *ops; <span class="comment">// 套接字层的操作函数块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Linux 套接字接口：<br>从 TCP/IP 协议栈的角度来看，传输层以上的都是应用程序的一部分，Linux 与传统的 UNIX 类似，TCP/IP 协议栈驻留在内核中，与内核的其他组件共享内存。传输层以上执行的网络功能，都是在用户地址空间完成的。</p>
<p>Linux 使用内核套接字概念与用户空间套接字通信，这样可以让实现和操作变得更简单。Linux 提供了一套 API 和套接字数据结构，这些服务向下与内核接口，向上与用户空间接口，应用程序正是使用这一套 API 访问内核中的网络功能。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>指针和引用</title>
    <url>/2022/06/06/%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<p>#c++ 引用与指针的异同</p>
<p>1、语法规则：指针变量存储某个实例（变量或对象）的地址，引用是某个实例的别名；<br>解引用：指针需要在前面加<em>， 引用可以直接使用；<br>2、指针变量需要分配内存，引用无法分配内存；<br>指针变量的值可以发生改变，存储不同实例的地址，引用在定义时就必须初始化，之后无法改变；<br>3、指针的变量可以为Null，作为形参时需要判空，引用不能为NUll，无需判空；<br>4、对指针进行sizeof得到指针变量的大小 ，对引用sizeof得到变量的大小；<br>5、++ 的效果不一样，指针++ 指向下一个实体的（变量或对象）的地址，而不是改变所指实体的内容；<br>6、引用的本质：<br>typename  &amp; t = typename</em> const t; 汇编层面是一致的；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span>&amp; j = i;</span><br><span class="line">	<span class="type">int</span>* ip = &amp;i;</span><br><span class="line">	j = <span class="number">2</span>;</span><br><span class="line">	*ip = <span class="number">3</span>;</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int&amp; j = i;</span><br><span class="line">00007FF6264A16D6  lea         rax,[i]  </span><br><span class="line">00007FF6264A16DA  mov         qword ptr [j],rax  </span><br><span class="line">	int* ip = &amp;i;</span><br><span class="line">00007FF6264A16DE  lea         rax,[i]  </span><br><span class="line">00007FF6264A16E2  mov         qword ptr [ip],rax  </span><br><span class="line">	j = 2;</span><br><span class="line">00007FF6264A16E6  mov         rax,qword ptr [j]  </span><br><span class="line">00007FF6264A16EA  mov         dword ptr [rax],2  </span><br><span class="line">	*ip = 3;</span><br><span class="line">00007FF6264A16F0  mov         rax,qword ptr [ip]  </span><br><span class="line">	*ip = 3;</span><br><span class="line">00007FF6264A16F4  mov         dword ptr [rax],3  </span><br><span class="line">	getchar();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>函数调用时间</title>
    <url>/2022/07/04/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算执行时间</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> t1 = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">	<span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line">	<span class="keyword">auto</span> t2 = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;秒：&quot;</span> &lt;&lt; std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::seconds&gt;(t2 - t1).<span class="built_in">count</span>()&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;hao秒：&quot;</span> &lt;&lt; std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(t2 - t1).<span class="built_in">count</span>();</span><br><span class="line">	<span class="comment">//计算当前时间和日期</span></span><br><span class="line">	<span class="keyword">auto</span> t = std::chrono::system_clock::<span class="built_in">to_time_t</span>(std::chrono::system_clock::<span class="built_in">now</span>());</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; std::<span class="built_in">put_time</span>(std::<span class="built_in">localtime</span>(&amp;t), <span class="string">&quot;%Y-%m-%d %H.%M.%S&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>软件设计原则</title>
    <url>/2022/06/06/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h1 id="单一职责原则（Single-responsibility-principle，SRP）"><a href="#单一职责原则（Single-responsibility-principle，SRP）" class="headerlink" title="单一职责原则（Single responsibility principle，SRP）"></a>单一职责原则（Single responsibility principle，SRP）</h1><p>一个类应该仅有一个引起它变化的原因，变化的方向表明了类的责任；</p>
<p>当一个类存在不同维度变化，即承担了不同角色，则需要根据变化关注点进行拆分；</p>
<h1 id="开放封闭原则（Open–closed-principle，OCP）"><a href="#开放封闭原则（Open–closed-principle，OCP）" class="headerlink" title="开放封闭原则（Open–closed principle，OCP）"></a>开放封闭原则（Open–closed principle，OCP）</h1><p>软件实体（类、模块、函数）应该对扩展开放，对修改封闭；<br>简单地说，就是不要修改代码，新的功能要用新的代码实现。</p>
<h1 id="Liskov-替换原则（Liskov-substitution-principle，LSP）"><a href="#Liskov-替换原则（Liskov-substitution-principle，LSP）" class="headerlink" title="Liskov 替换原则（Liskov substitution principle，LSP）"></a>Liskov 替换原则（Liskov substitution principle，LSP）</h1><p>子类必须能够继承他们的基类，is_a；<br>继承表达类型抽象，有统一接口；</p>
<h1 id="接口隔离原则（Interface-segregation-principle，ISP）"><a href="#接口隔离原则（Interface-segregation-principle，ISP）" class="headerlink" title="接口隔离原则（Interface segregation principle，ISP）"></a>接口隔离原则（Interface segregation principle，ISP）</h1><p>No client should be forced to depend on methods it does not use.<br>不应强迫客户依赖他们不需要的方法，<br>接口应该小而完备</p>
<p>每个使用者面对的都是一种角色接口， 接口设计时应该考虑不同的角色；</p>
<h1 id="依赖倒置原则（Dependency-inversion-principle，DIP）"><a href="#依赖倒置原则（Dependency-inversion-principle，DIP）" class="headerlink" title="依赖倒置原则（Dependency inversion principle，DIP）"></a>依赖倒置原则（Dependency inversion principle，DIP）</h1><p>High-level modules should not depend on low-level modules. Both should depend on abstractions.<br>高层模块（稳定）不应该依赖底层模块（变化），二者都应该依赖于抽象（稳定）<br>Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.<br>抽象（稳定）不应该依赖实现细节（变化），实现细节应该依赖于抽象（稳定）</p>
<p>结构化编程解决问题的思路是自上而下地进行功能分解，这种解决问题的思路很自然地就会延续到很多人的编程习惯中。按照分解的结果，进行组合。这样势必会造成高层模块会依赖于低层模块。</p>
<p>所谓倒置，让高层模块不再依赖于低层模块。计算机科学中的所有问题都可以通过引入一个间接层得到解决。All problems in computer science can be solved by another level of indirection—— David Wheeler是的，引入一个间接层。这个间接层指的就是 DIP 里所说的抽象。</p>
<p>具体编码：<br>1、任何类都不应该继承自具体类<br>2、任何变量类型都不应该时具体类<br>3、任何子类都不能改写父类已经实现的方法</p>
<h1 id="面向接口编程而非面向实现编程"><a href="#面向接口编程而非面向实现编程" class="headerlink" title="面向接口编程而非面向实现编程"></a>面向接口编程而非面向实现编程</h1><p>不将变量类型声明为某个特定具体类，而是声明为某个接口。<br>客户程序无需知道对象的具体类型，只需知道对象所具有的接口；<br>减少系统中各部分的依赖关系，从而实现高内聚，松耦合类型设计方案</p>
<h1 id="封装变化点"><a href="#封装变化点" class="headerlink" title="封装变化点"></a>封装变化点</h1><p>使用封装来创建对象之间的分界层，使设计者可以在分界层的一侧进行修改而不会对另一侧产生不良影响，从而实现层次间的松耦合；</p>
<h1 id="优先使用对象组合而非类继承"><a href="#优先使用对象组合而非类继承" class="headerlink" title="优先使用对象组合而非类继承"></a>优先使用对象组合而非类继承</h1><p>类继承通常为白箱复用，对象组合为黑箱复用，类继承在某种程度上破环了封装性，子类父类耦合度高，而对象组合则只要求被组合的对象具有良好的接口定义，耦合度低；</p>
<p>#reference<br>李建忠设计模式</p>
]]></content>
      <categories>
        <category>软件设计</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>静态链接与动态链接</title>
    <url>/2022/06/30/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//add.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//add.c</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.h&quot;</span></span></span><br><span class="line">  <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> c = add(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a+b = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="静态编译"><a href="#静态编译" class="headerlink" title="静态编译"></a>静态编译</h3><p>编译gcc -o test add.c main.c<br>反汇编objdump -d test<br>0x64a-0x683 = ff ff ff c7</p>
<p>缺点：</p>
<ol>
<li>进程间不能共享二进制代码；</li>
<li>软件升级维护困难，静态库实现改变需要重新编译</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">000000000000064a &lt;add&gt;:</span><br><span class="line"> 64a:   55                      push   %rbp</span><br><span class="line"> 64b:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 64e:   89 7d fc                mov    %edi,-0x4(%rbp)</span><br><span class="line"> 651:   89 75 f8                mov    %esi,-0x8(%rbp)</span><br><span class="line"> 654:   8b 55 fc                mov    -0x4(%rbp),%edx</span><br><span class="line"> 657:   8b 45 f8                mov    -0x8(%rbp),%eax</span><br><span class="line"> 65a:   01 d0                   add    %edx,%eax</span><br><span class="line"> 65c:   5d                      pop    %rbp</span><br><span class="line"> 65d:   c3                      retq</span><br><span class="line"></span><br><span class="line">000000000000065e &lt;main&gt;:</span><br><span class="line"> 65e:   55                      push   %rbp</span><br><span class="line"> 65f:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 662:   48 83 ec 10             sub    $0x10,%rsp</span><br><span class="line"> 666:   c7 45 f4 0a 00 00 00    movl   $0xa,-0xc(%rbp)</span><br><span class="line"> 66d:   c7 45 f8 14 00 00 00    movl   $0x14,-0x8(%rbp)</span><br><span class="line"> 674:   8b 55 f8                mov    -0x8(%rbp),%edx</span><br><span class="line"> 677:   8b 45 f4                mov    -0xc(%rbp),%eax</span><br><span class="line"> 67a:   89 d6                   mov    %edx,%esi</span><br><span class="line"> 67c:   89 c7                   mov    %eax,%edi</span><br><span class="line"> 67e:   e8 c7 ff ff ff          callq  64a &lt;add&gt;</span><br><span class="line"> 683:   89 45 fc                mov    %eax,-0x4(%rbp)</span><br><span class="line"> 686:   8b 45 fc                mov    -0x4(%rbp),%eax</span><br><span class="line"> 689:   89 c6                   mov    %eax,%esi</span><br><span class="line"> 68b:   48 8d 3d 92 00 00 00    lea    0x92(%rip),%rdi        # 724 &lt;_IO_stdin_used+0x4&gt;</span><br><span class="line"> 692:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line"> 697:   e8 84 fe ff ff          callq  520 &lt;printf@plt&gt;</span><br><span class="line"> 69c:   90                      nop</span><br><span class="line"> 69d:   c9                      leaveq</span><br><span class="line"> 69e:   c3                      retq</span><br><span class="line"> 69f:   90                      nop</span><br></pre></td></tr></table></figure>

<h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>动态链接缺点:(1)系统存在多个版本动态库难以管理，<br>            (2)性能下降，启动时解析符号和cache miss<br>            注意编译命令顺序，链接依赖库放到最后，<br>            注意环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ ls</span><br><span class="line">add.c  add.h  main.c</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ gcc -o libadd.so add.c -shared -fPIC</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ ls</span><br><span class="line">add.c  add.h  libadd.so  main.c</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ gcc -o test -L. -ladd main.c</span><br><span class="line">/tmp/ccOFrBDv.o: In function `main&#x27;:</span><br><span class="line">main.c:(.text+0x21): undefined reference to `add&#x27;</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ gcc -o test main.c -ladd -L.</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ ls</span><br><span class="line">add.c  add.h  libadd.so  main.c  test</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ ./test</span><br><span class="line">./test: error while loading shared libraries: libadd.so: cannot open shared object file: No such file or directory</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ ./test</span><br><span class="line">a+b = 30</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ objdump -d libadd.so</span><br><span class="line"></span><br><span class="line">libadd.so:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .init:</span><br><span class="line"></span><br><span class="line">0000000000000460 &lt;_init&gt;:</span><br><span class="line"> 460:   48 83 ec 08             sub    $0x8,%rsp</span><br><span class="line"> 464:   48 8b 05 8d 0b 20 00    mov    0x200b8d(%rip),%rax        # 200ff8 &lt;__gmon_start__&gt;</span><br><span class="line"> 46b:   48 85 c0                test   %rax,%rax</span><br><span class="line"> 46e:   74 02                   je     472 &lt;_init+0x12&gt;</span><br><span class="line"> 470:   ff d0                   callq  *%rax</span><br><span class="line"> 472:   48 83 c4 08             add    $0x8,%rsp</span><br><span class="line"> 476:   c3                      retq</span><br><span class="line"></span><br><span class="line">Disassembly of section .plt:</span><br><span class="line"></span><br><span class="line">0000000000000480 &lt;.plt&gt;:</span><br><span class="line"> 480:   ff 35 82 0b 20 00       pushq  0x200b82(%rip)        # 201008 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;</span><br><span class="line"> 486:   ff 25 84 0b 20 00       jmpq   *0x200b84(%rip)        # 201010 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;</span><br><span class="line"> 48c:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class="line"></span><br><span class="line">Disassembly of section .plt.got:</span><br><span class="line"></span><br><span class="line">0000000000000490 &lt;__cxa_finalize@plt&gt;:</span><br><span class="line"> 490:   ff 25 4a 0b 20 00       jmpq   *0x200b4a(%rip)        # 200fe0 &lt;__cxa_finalize&gt;</span><br><span class="line"> 496:   66 90                   xchg   %ax,%ax</span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000000004a0 &lt;deregister_tm_clones&gt;:</span><br><span class="line"> 4a0:   48 8d 3d 79 0b 20 00    lea    0x200b79(%rip),%rdi        # 201020 &lt;_edata&gt;</span><br><span class="line"> 4a7:   55                      push   %rbp</span><br><span class="line"> 4a8:   48 8d 05 71 0b 20 00    lea    0x200b71(%rip),%rax        # 201020 &lt;_edata&gt;</span><br><span class="line"> 4af:   48 39 f8                cmp    %rdi,%rax</span><br><span class="line"> 4b2:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 4b5:   74 19                   je     4d0 &lt;deregister_tm_clones+0x30&gt;</span><br><span class="line"> 4b7:   48 8b 05 32 0b 20 00    mov    0x200b32(%rip),%rax        # 200ff0 &lt;_ITM_deregisterTMCloneTable&gt;</span><br><span class="line"> 4be:   48 85 c0                test   %rax,%rax</span><br><span class="line"> 4c1:   74 0d                   je     4d0 &lt;deregister_tm_clones+0x30&gt;</span><br><span class="line"> 4c3:   5d                      pop    %rbp</span><br><span class="line"> 4c4:   ff e0                   jmpq   *%rax</span><br><span class="line"> 4c6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 4cd:   00 00 00</span><br><span class="line"> 4d0:   5d                      pop    %rbp</span><br><span class="line"> 4d1:   c3                      retq</span><br><span class="line"> 4d2:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class="line"> 4d6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 4dd:   00 00 00</span><br><span class="line"></span><br><span class="line">00000000000004e0 &lt;register_tm_clones&gt;:</span><br><span class="line"> 4e0:   48 8d 3d 39 0b 20 00    lea    0x200b39(%rip),%rdi        # 201020 &lt;_edata&gt;</span><br><span class="line"> 4e7:   48 8d 35 32 0b 20 00    lea    0x200b32(%rip),%rsi        # 201020 &lt;_edata&gt;</span><br><span class="line"> 4ee:   55                      push   %rbp</span><br><span class="line"> 4ef:   48 29 fe                sub    %rdi,%rsi</span><br><span class="line"> 4f2:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 4f5:   48 c1 fe 03             sar    $0x3,%rsi</span><br><span class="line"> 4f9:   48 89 f0                mov    %rsi,%rax</span><br><span class="line"> 4fc:   48 c1 e8 3f             shr    $0x3f,%rax</span><br><span class="line"> 500:   48 01 c6                add    %rax,%rsi</span><br><span class="line"> 503:   48 d1 fe                sar    %rsi</span><br><span class="line"> 506:   74 18                   je     520 &lt;register_tm_clones+0x40&gt;</span><br><span class="line"> 508:   48 8b 05 d9 0a 20 00    mov    0x200ad9(%rip),%rax        # 200fe8 &lt;_ITM_registerTMCloneTable&gt;</span><br><span class="line"> 50f:   48 85 c0                test   %rax,%rax</span><br><span class="line"> 512:   74 0c                   je     520 &lt;register_tm_clones+0x40&gt;</span><br><span class="line"> 514:   5d                      pop    %rbp</span><br><span class="line"> 515:   ff e0                   jmpq   *%rax</span><br><span class="line"> 517:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)</span><br><span class="line"> 51e:   00 00</span><br><span class="line"> 520:   5d                      pop    %rbp</span><br><span class="line"> 521:   c3                      retq</span><br><span class="line"> 522:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class="line"> 526:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 52d:   00 00 00</span><br><span class="line"></span><br><span class="line">0000000000000530 &lt;__do_global_dtors_aux&gt;:</span><br><span class="line"> 530:   80 3d e9 0a 20 00 00    cmpb   $0x0,0x200ae9(%rip)        # 201020 &lt;_edata&gt;</span><br><span class="line"> 537:   75 2f                   jne    568 &lt;__do_global_dtors_aux+0x38&gt;</span><br><span class="line"> 539:   48 83 3d 9f 0a 20 00    cmpq   $0x0,0x200a9f(%rip)        # 200fe0 &lt;__cxa_finalize&gt;</span><br><span class="line"> 540:   00</span><br><span class="line"> 541:   55                      push   %rbp</span><br><span class="line"> 542:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 545:   74 0c                   je     553 &lt;__do_global_dtors_aux+0x23&gt;</span><br><span class="line"> 547:   48 8b 3d ca 0a 20 00    mov    0x200aca(%rip),%rdi        # 201018 &lt;__dso_handle&gt;</span><br><span class="line"> 54e:   e8 3d ff ff ff          callq  490 &lt;__cxa_finalize@plt&gt;</span><br><span class="line"> 553:   e8 48 ff ff ff          callq  4a0 &lt;deregister_tm_clones&gt;</span><br><span class="line"> 558:   c6 05 c1 0a 20 00 01    movb   $0x1,0x200ac1(%rip)        # 201020 &lt;_edata&gt;</span><br><span class="line"> 55f:   5d                      pop    %rbp</span><br><span class="line"> 560:   c3                      retq</span><br><span class="line"> 561:   0f 1f 80 00 00 00 00    nopl   0x0(%rax)</span><br><span class="line"> 568:   f3 c3                   repz retq</span><br><span class="line"> 56a:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000000570 &lt;frame_dummy&gt;:</span><br><span class="line"> 570:   55                      push   %rbp</span><br><span class="line"> 571:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 574:   5d                      pop    %rbp</span><br><span class="line"> 575:   e9 66 ff ff ff          jmpq   4e0 &lt;register_tm_clones&gt;</span><br><span class="line"></span><br><span class="line">000000000000057a &lt;add&gt;:</span><br><span class="line"> 57a:   55                      push   %rbp</span><br><span class="line"> 57b:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 57e:   89 7d fc                mov    %edi,-0x4(%rbp)</span><br><span class="line"> 581:   89 75 f8                mov    %esi,-0x8(%rbp)</span><br><span class="line"> 584:   8b 55 fc                mov    -0x4(%rbp),%edx</span><br><span class="line"> 587:   8b 45 f8                mov    -0x8(%rbp),%eax</span><br><span class="line"> 58a:   01 d0                   add    %edx,%eax</span><br><span class="line"> 58c:   5d                      pop    %rbp</span><br><span class="line"> 58d:   c3                      retq</span><br><span class="line"></span><br><span class="line">Disassembly of section .fini:</span><br><span class="line"></span><br><span class="line">0000000000000590 &lt;_fini&gt;:</span><br><span class="line"> 590:   48 83 ec 08             sub    $0x8,%rsp</span><br><span class="line"> 594:   48 83 c4 08             add    $0x8,%rsp</span><br><span class="line"> 598:   c3                      retq</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ objdump -d test</span><br><span class="line"></span><br><span class="line">test:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .init:</span><br><span class="line"></span><br><span class="line">00000000000005e8 &lt;_init&gt;:</span><br><span class="line"> 5e8:   48 83 ec 08             sub    $0x8,%rsp</span><br><span class="line"> 5ec:   48 8b 05 f5 09 20 00    mov    0x2009f5(%rip),%rax        # 200fe8 &lt;__gmon_start__&gt;</span><br><span class="line"> 5f3:   48 85 c0                test   %rax,%rax</span><br><span class="line"> 5f6:   74 02                   je     5fa &lt;_init+0x12&gt;</span><br><span class="line"> 5f8:   ff d0                   callq  *%rax</span><br><span class="line"> 5fa:   48 83 c4 08             add    $0x8,%rsp</span><br><span class="line"> 5fe:   c3                      retq</span><br><span class="line"></span><br><span class="line">Disassembly of section .plt:</span><br><span class="line"></span><br><span class="line">0000000000000600 &lt;.plt&gt;:</span><br><span class="line"> 600:   ff 35 b2 09 20 00       pushq  0x2009b2(%rip)        # 200fb8 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;</span><br><span class="line"> 606:   ff 25 b4 09 20 00       jmpq   *0x2009b4(%rip)        # 200fc0 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;</span><br><span class="line"> 60c:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class="line"></span><br><span class="line">0000000000000610 &lt;add@plt&gt;:</span><br><span class="line"> 610:   ff 25 b2 09 20 00       jmpq   *0x2009b2(%rip)        # 200fc8 &lt;add&gt;</span><br><span class="line"> 616:   68 00 00 00 00          pushq  $0x0</span><br><span class="line"> 61b:   e9 e0 ff ff ff          jmpq   600 &lt;.plt&gt;</span><br><span class="line"></span><br><span class="line">0000000000000620 &lt;printf@plt&gt;:</span><br><span class="line"> 620:   ff 25 aa 09 20 00       jmpq   *0x2009aa(%rip)        # 200fd0 &lt;printf@GLIBC_2.2.5&gt;</span><br><span class="line"> 626:   68 01 00 00 00          pushq  $0x1</span><br><span class="line"> 62b:   e9 d0 ff ff ff          jmpq   600 &lt;.plt&gt;</span><br><span class="line"></span><br><span class="line">Disassembly of section .plt.got:</span><br><span class="line"></span><br><span class="line">0000000000000630 &lt;__cxa_finalize@plt&gt;:</span><br><span class="line"> 630:   ff 25 c2 09 20 00       jmpq   *0x2009c2(%rip)        # 200ff8 &lt;__cxa_finalize@GLIBC_2.2.5&gt;</span><br><span class="line"> 636:   66 90                   xchg   %ax,%ax</span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000000640 &lt;_start&gt;:</span><br><span class="line"> 640:   31 ed                   xor    %ebp,%ebp</span><br><span class="line"> 642:   49 89 d1                mov    %rdx,%r9</span><br><span class="line"> 645:   5e                      pop    %rsi</span><br><span class="line"> 646:   48 89 e2                mov    %rsp,%rdx</span><br><span class="line"> 649:   48 83 e4 f0             and    $0xfffffffffffffff0,%rsp</span><br><span class="line"> 64d:   50                      push   %rax</span><br><span class="line"> 64e:   54                      push   %rsp</span><br><span class="line"> 64f:   4c 8d 05 aa 01 00 00    lea    0x1aa(%rip),%r8        # 800 &lt;__libc_csu_fini&gt;</span><br><span class="line"> 656:   48 8d 0d 33 01 00 00    lea    0x133(%rip),%rcx        # 790 &lt;__libc_csu_init&gt;</span><br><span class="line"> 65d:   48 8d 3d e6 00 00 00    lea    0xe6(%rip),%rdi        # 74a &lt;main&gt;</span><br><span class="line"> 664:   ff 15 76 09 20 00       callq  *0x200976(%rip)        # 200fe0 &lt;__libc_start_main@GLIBC_2.2.5&gt;</span><br><span class="line"> 66a:   f4                      hlt</span><br><span class="line"> 66b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000000670 &lt;deregister_tm_clones&gt;:</span><br><span class="line"> 670:   48 8d 3d 99 09 20 00    lea    0x200999(%rip),%rdi        # 201010 &lt;__TMC_END__&gt;</span><br><span class="line"> 677:   55                      push   %rbp</span><br><span class="line"> 678:   48 8d 05 91 09 20 00    lea    0x200991(%rip),%rax        # 201010 &lt;__TMC_END__&gt;</span><br><span class="line"> 67f:   48 39 f8                cmp    %rdi,%rax</span><br><span class="line"> 682:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 685:   74 19                   je     6a0 &lt;deregister_tm_clones+0x30&gt;</span><br><span class="line"> 687:   48 8b 05 4a 09 20 00    mov    0x20094a(%rip),%rax        # 200fd8 &lt;_ITM_deregisterTMCloneTable&gt;</span><br><span class="line"> 68e:   48 85 c0                test   %rax,%rax</span><br><span class="line"> 691:   74 0d                   je     6a0 &lt;deregister_tm_clones+0x30&gt;</span><br><span class="line"> 693:   5d                      pop    %rbp</span><br><span class="line"> 694:   ff e0                   jmpq   *%rax</span><br><span class="line"> 696:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 69d:   00 00 00</span><br><span class="line"> 6a0:   5d                      pop    %rbp</span><br><span class="line"> 6a1:   c3                      retq</span><br><span class="line"> 6a2:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class="line"> 6a6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 6ad:   00 00 00</span><br><span class="line"></span><br><span class="line">00000000000006b0 &lt;register_tm_clones&gt;:</span><br><span class="line"> 6b0:   48 8d 3d 59 09 20 00    lea    0x200959(%rip),%rdi        # 201010 &lt;__TMC_END__&gt;</span><br><span class="line"> 6b7:   48 8d 35 52 09 20 00    lea    0x200952(%rip),%rsi        # 201010 &lt;__TMC_END__&gt;</span><br><span class="line"> 6be:   55                      push   %rbp</span><br><span class="line"> 6bf:   48 29 fe                sub    %rdi,%rsi</span><br><span class="line"> 6c2:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 6c5:   48 c1 fe 03             sar    $0x3,%rsi</span><br><span class="line"> 6c9:   48 89 f0                mov    %rsi,%rax</span><br><span class="line"> 6cc:   48 c1 e8 3f             shr    $0x3f,%rax</span><br><span class="line"> 6d0:   48 01 c6                add    %rax,%rsi</span><br><span class="line"> 6d3:   48 d1 fe                sar    %rsi</span><br><span class="line"> 6d6:   74 18                   je     6f0 &lt;register_tm_clones+0x40&gt;</span><br><span class="line"> 6d8:   48 8b 05 11 09 20 00    mov    0x200911(%rip),%rax        # 200ff0 &lt;_ITM_registerTMCloneTable&gt;</span><br><span class="line"> 6df:   48 85 c0                test   %rax,%rax</span><br><span class="line"> 6e2:   74 0c                   je     6f0 &lt;register_tm_clones+0x40&gt;</span><br><span class="line"> 6e4:   5d                      pop    %rbp</span><br><span class="line"> 6e5:   ff e0                   jmpq   *%rax</span><br><span class="line"> 6e7:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)</span><br><span class="line"> 6ee:   00 00</span><br><span class="line"> 6f0:   5d                      pop    %rbp</span><br><span class="line"> 6f1:   c3                      retq</span><br><span class="line"> 6f2:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class="line"> 6f6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 6fd:   00 00 00</span><br><span class="line"></span><br><span class="line">0000000000000700 &lt;__do_global_dtors_aux&gt;:</span><br><span class="line"> 700:   80 3d 09 09 20 00 00    cmpb   $0x0,0x200909(%rip)        # 201010 &lt;__TMC_END__&gt;</span><br><span class="line"> 707:   75 2f                   jne    738 &lt;__do_global_dtors_aux+0x38&gt;</span><br><span class="line"> 709:   48 83 3d e7 08 20 00    cmpq   $0x0,0x2008e7(%rip)        # 200ff8 &lt;__cxa_finalize@GLIBC_2.2.5&gt;</span><br><span class="line"> 710:   00</span><br><span class="line"> 711:   55                      push   %rbp</span><br><span class="line"> 712:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 715:   74 0c                   je     723 &lt;__do_global_dtors_aux+0x23&gt;</span><br><span class="line"> 717:   48 8b 3d ea 08 20 00    mov    0x2008ea(%rip),%rdi        # 201008 &lt;__dso_handle&gt;</span><br><span class="line"> 71e:   e8 0d ff ff ff          callq  630 &lt;__cxa_finalize@plt&gt;</span><br><span class="line"> 723:   e8 48 ff ff ff          callq  670 &lt;deregister_tm_clones&gt;</span><br><span class="line"> 728:   c6 05 e1 08 20 00 01    movb   $0x1,0x2008e1(%rip)        # 201010 &lt;__TMC_END__&gt;</span><br><span class="line"> 72f:   5d                      pop    %rbp</span><br><span class="line"> 730:   c3                      retq</span><br><span class="line"> 731:   0f 1f 80 00 00 00 00    nopl   0x0(%rax)</span><br><span class="line"> 738:   f3 c3                   repz retq</span><br><span class="line"> 73a:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000000740 &lt;frame_dummy&gt;:</span><br><span class="line"> 740:   55                      push   %rbp</span><br><span class="line"> 741:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 744:   5d                      pop    %rbp</span><br><span class="line"> 745:   e9 66 ff ff ff          jmpq   6b0 &lt;register_tm_clones&gt;</span><br><span class="line"></span><br><span class="line">000000000000074a &lt;main&gt;:</span><br><span class="line"> 74a:   55                      push   %rbp</span><br><span class="line"> 74b:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 74e:   48 83 ec 10             sub    $0x10,%rsp</span><br><span class="line"> 752:   c7 45 f4 0a 00 00 00    movl   $0xa,-0xc(%rbp)</span><br><span class="line"> 759:   c7 45 f8 14 00 00 00    movl   $0x14,-0x8(%rbp)</span><br><span class="line"> 760:   8b 55 f8                mov    -0x8(%rbp),%edx</span><br><span class="line"> 763:   8b 45 f4                mov    -0xc(%rbp),%eax</span><br><span class="line"> 766:   89 d6                   mov    %edx,%esi</span><br><span class="line"> 768:   89 c7                   mov    %eax,%edi</span><br><span class="line"> 76a:   e8 a1 fe ff ff          callq  610 &lt;add@plt&gt;</span><br><span class="line"> 76f:   89 45 fc                mov    %eax,-0x4(%rbp)</span><br><span class="line"> 772:   8b 45 fc                mov    -0x4(%rbp),%eax</span><br><span class="line"> 775:   89 c6                   mov    %eax,%esi</span><br><span class="line"> 777:   48 8d 3d 96 00 00 00    lea    0x96(%rip),%rdi        # 814 &lt;_IO_stdin_used+0x4&gt;</span><br><span class="line"> 77e:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line"> 783:   e8 98 fe ff ff          callq  620 &lt;printf@plt&gt;</span><br><span class="line"> 788:   90                      nop</span><br><span class="line"> 789:   c9                      leaveq</span><br><span class="line"> 78a:   c3                      retq</span><br><span class="line"> 78b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000000790 &lt;__libc_csu_init&gt;:</span><br><span class="line"> 790:   41 57                   push   %r15</span><br><span class="line"> 792:   41 56                   push   %r14</span><br><span class="line"> 794:   49 89 d7                mov    %rdx,%r15</span><br><span class="line"> 797:   41 55                   push   %r13</span><br><span class="line"> 799:   41 54                   push   %r12</span><br><span class="line"> 79b:   4c 8d 25 fe 05 20 00    lea    0x2005fe(%rip),%r12        # 200da0 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class="line"> 7a2:   55                      push   %rbp</span><br><span class="line"> 7a3:   48 8d 2d fe 05 20 00    lea    0x2005fe(%rip),%rbp        # 200da8 &lt;__init_array_end&gt;</span><br><span class="line"> 7aa:   53                      push   %rbx</span><br><span class="line"> 7ab:   41 89 fd                mov    %edi,%r13d</span><br><span class="line"> 7ae:   49 89 f6                mov    %rsi,%r14</span><br><span class="line"> 7b1:   4c 29 e5                sub    %r12,%rbp</span><br><span class="line"> 7b4:   48 83 ec 08             sub    $0x8,%rsp</span><br><span class="line"> 7b8:   48 c1 fd 03             sar    $0x3,%rbp</span><br><span class="line"> 7bc:   e8 27 fe ff ff          callq  5e8 &lt;_init&gt;</span><br><span class="line"> 7c1:   48 85 ed                test   %rbp,%rbp</span><br><span class="line"> 7c4:   74 20                   je     7e6 &lt;__libc_csu_init+0x56&gt;</span><br><span class="line"> 7c6:   31 db                   xor    %ebx,%ebx</span><br><span class="line"> 7c8:   0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)</span><br><span class="line"> 7cf:   00</span><br><span class="line"> 7d0:   4c 89 fa                mov    %r15,%rdx</span><br><span class="line"> 7d3:   4c 89 f6                mov    %r14,%rsi</span><br><span class="line"> 7d6:   44 89 ef                mov    %r13d,%edi</span><br><span class="line"> 7d9:   41 ff 14 dc             callq  *(%r12,%rbx,8)</span><br><span class="line"> 7dd:   48 83 c3 01             add    $0x1,%rbx</span><br><span class="line"> 7e1:   48 39 dd                cmp    %rbx,%rbp</span><br><span class="line"> 7e4:   75 ea                   jne    7d0 &lt;__libc_csu_init+0x40&gt;</span><br><span class="line"> 7e6:   48 83 c4 08             add    $0x8,%rsp</span><br><span class="line"> 7ea:   5b                      pop    %rbx</span><br><span class="line"> 7eb:   5d                      pop    %rbp</span><br><span class="line"> 7ec:   41 5c                   pop    %r12</span><br><span class="line"> 7ee:   41 5d                   pop    %r13</span><br><span class="line"> 7f0:   41 5e                   pop    %r14</span><br><span class="line"> 7f2:   41 5f                   pop    %r15</span><br><span class="line"> 7f4:   c3                      retq</span><br><span class="line"> 7f5:   90                      nop</span><br><span class="line"> 7f6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 7fd:   00 00 00</span><br><span class="line"></span><br><span class="line">0000000000000800 &lt;__libc_csu_fini&gt;:</span><br><span class="line"> 800:   f3 c3                   repz retq</span><br><span class="line"></span><br><span class="line">Disassembly of section .fini:</span><br><span class="line"></span><br><span class="line">0000000000000804 &lt;_fini&gt;:</span><br><span class="line"> 804:   48 83 ec 08             sub    $0x8,%rsp</span><br><span class="line"> 808:   48 83 c4 08             add    $0x8,%rsp</span><br><span class="line"> 80c:   c3                      retq</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$</span><br></pre></td></tr></table></figure>

<h3 id="位置无关代码原理"><a href="#位置无关代码原理" class="headerlink" title="位置无关代码原理"></a>位置无关代码原理</h3><p>代码共享，数据独有， 通过GOF(global of table)，将映射时将偏移地址放到gof表里；</p>
<p><img src="/2022/06/30/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84.jpeg"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
</search>
