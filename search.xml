<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C/C++相关注意点</title>
    <url>/2022/06/06/C%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    <content><![CDATA[<p>#数组当作形参传递</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//作为形参的数组将退化成指针，尤其是通过形参获取数组大小的时候容易出错，数组当作形参应该尽可能回避，</span></span><br><span class="line"><span class="comment">//解决方案1：显示传递数组的大小；</span></span><br><span class="line"><span class="comment">//		 2： 使用结构体封装下数组；传递结构体指针</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArrInfo0</span><span class="params">(<span class="type">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl; <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArrInfo1</span><span class="params">(<span class="type">int</span> arr[MAX])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArrInfo2</span><span class="params">(<span class="type">int</span> (*arr)[MAX])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(*arr) / <span class="built_in">sizeof</span>((*arr)[<span class="number">0</span>])&lt;&lt; endl;<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArrInfo3</span><span class="params">(<span class="type">int</span>* arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a[MAX] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line">	<span class="built_in">printArrInfo0</span>(a);</span><br><span class="line">	<span class="built_in">printArrInfo1</span>(a);</span><br><span class="line">	<span class="built_in">printArrInfo2</span>(&amp;a);</span><br><span class="line">	<span class="built_in">printArrInfo3</span>(a);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//64位机器测试</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* p1 = str;</span><br><span class="line">    <span class="type">void</span>* p2 = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sizeof(str)=&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(str)&lt;&lt; std::endl; <span class="comment">//6</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sizeof(p1)=&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(p1) &lt;&lt; std::endl; <span class="comment">//8</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sizeof(p2)=&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(p2) &lt;&lt; std::endl; <span class="comment">//8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="编写strcpy函数"><a href="#编写strcpy函数" class="headerlink" title="编写strcpy函数"></a>编写strcpy函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">strcpy</span><span class="params">(<span class="type">char</span>* desStr, <span class="type">char</span>* srcStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">assert</span>((desStr != <span class="literal">NULL</span>) &amp;&amp; (srcStr != <span class="literal">NULL</span>));</span><br><span class="line">	<span class="type">char</span>* address = desStr;</span><br><span class="line">	<span class="keyword">while</span>((*strDest++ = *strSrc) != <span class="string">&#x27;0&#x27;</span>) <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">为什么还需要<span class="type">char</span> *类型返回值？</span><br><span class="line">答：为了实现链式表达式，如：</span><br><span class="line"><span class="type">int</span> lengh = <span class="built_in">strlen</span>(<span class="built_in">strcpy</span>(desStr,<span class="string">&quot;kkkk&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="float-判断相等-转化为-gt-lt"><a href="#float-判断相等-转化为-gt-lt" class="headerlink" title="float 判断相等 转化为&gt;=, &lt;="></a>float 判断相等 转化为&gt;=, &lt;=</h3><p>const float EPSION = 0.000001;<br>if((x &gt;= EPSION) &amp;&amp; (x &lt;= EPSION))</p>
<h3 id="内存相关"><a href="#内存相关" class="headerlink" title="内存相关"></a>内存相关</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 崩溃getMenory值无法传递动态内存，str 始终为空，调用strpy会崩溃；</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMemory</span><span class="params">(<span class="type">char</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">getMemory</span>(str);</span><br><span class="line">	<span class="built_in">strcpy</span>(str,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 能够输出hello，但是会发生内存泄漏；</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMemory</span><span class="params">(<span class="type">char</span>** p， <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	*p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">getMemory</span>(&amp;str, <span class="number">100</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(str,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 传递栈内存的指针，指针可能不为空，但是内容未知，可能是乱码， </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">getMemory</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> p[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line">	str =<span class="built_in">getMemory</span>();</span><br><span class="line">	<span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 篡改动态内存区的内容，后果未定义，问题难以定位，free后，str为野指针；</span><br><span class="line"><span class="comment">//好习惯free后指NULL</span></span><br><span class="line"><span class="type">void</span> main</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span>* str = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(str, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(str);</span><br><span class="line">	<span class="keyword">if</span>(str != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(str, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(str);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>STL-上篇</title>
    <url>/2022/06/07/STL-%E4%B8%8A%E7%AF%87/</url>
    <content><![CDATA[<p><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%871.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%872.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%873.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%874.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%875.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%876.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%877.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%878.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%879.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8710.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8711.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8712.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8713.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8714.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8715.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8716.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8717.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8718.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8719.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8720.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8721.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8722.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8723.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8724.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8725.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8726.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8727.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8728.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8729.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8730.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8731.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8732.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8A%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8733.SVG"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Singleton</title>
    <url>/2022/06/15/Singleton/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line">### 单例模式</span><br><span class="line">保证一个类仅有一个实例，并提供一个该实例的全局访问点</span><br><span class="line"><span class="comment">//单线程版本</span></span><br><span class="line"><span class="comment">//class Singleton</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//public: </span></span><br><span class="line"><span class="comment">//	static Singleton* get_instance();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//private:</span></span><br><span class="line"><span class="comment">//	Singleton() &#123;&#125;;</span></span><br><span class="line"><span class="comment">//	Singleton(const Singleton&amp; obj) &#123;&#125;;</span></span><br><span class="line"><span class="comment">//private:</span></span><br><span class="line"><span class="comment">//	static Singleton* m_instance;</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Singleton* Singleton::m_instance = nullptr;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Singleton* Singleton::get_instance(void)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	if (nullptr == m_instance)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		m_instance = new Singleton();</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	return m_instance;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两次检查</span></span><br><span class="line"><span class="comment">// class Singleton</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//public:</span></span><br><span class="line"><span class="comment">//	static Singleton* get_instance();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//private:</span></span><br><span class="line"><span class="comment">//	Singleton() &#123;&#125;;</span></span><br><span class="line"><span class="comment">//	Singleton(const Singleton &amp; obj) &#123;&#125;;</span></span><br><span class="line"><span class="comment">//private:</span></span><br><span class="line"><span class="comment">//	static Singleton* m_instance;</span></span><br><span class="line"><span class="comment">//	static std::mutex m_mutex;</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Singleton* Singleton::m_instance = nullptr;</span></span><br><span class="line"><span class="comment">//std::mutex Singleton::m_mutex;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Singleton* Singleton::get_instance(void)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	if (nullptr == m_instance)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		std::lock_guard&lt;std::mutex&gt; lock(m_mutex);</span></span><br><span class="line"><span class="comment">//		if (nullptr == m_instance)</span></span><br><span class="line"><span class="comment">//		&#123;</span></span><br><span class="line"><span class="comment">//			m_instance = new Singleton();</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	return m_instance;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//***********************************************************</span></span><br><span class="line"><span class="comment">//C++11 volatile 实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> Singleton* <span class="title">get_instance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">Singleton</span>() &#123;&#125;;</span><br><span class="line">	<span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp; obj) &#123;&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">static</span> std::atomic&lt;Singleton*&gt; m_instance;</span><br><span class="line">	<span class="type">static</span> std::mutex m_mutex;</span><br><span class="line">&#125;;</span><br><span class="line">std::atomic&lt;Singleton*&gt; Singleton::m_instance;</span><br><span class="line">std::mutex Singleton::m_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::get_instance</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Singleton* tmp = m_instance.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">	std::<span class="built_in">atomic_thread_fence</span>(std::memory_order_acquire);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">nullptr</span> == tmp)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="literal">nullptr</span> == tmp)</span><br><span class="line">		&#123;</span><br><span class="line">			tmp = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">			std::<span class="built_in">atomic_thread_fence</span>(std::memory_order_release);</span><br><span class="line">			m_instance.<span class="built_in">store</span>(tmp, std::memory_order_relaxed);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>STL-下篇</title>
    <url>/2022/06/07/STL-%E4%B8%8B%E7%AF%87/</url>
    <content><![CDATA[<p><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%871.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%872.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%873.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%874.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%875.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%876.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%877.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%878.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%879.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8710.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8711.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8712.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8713.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8714.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8715.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8716.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8717.SVG"><br><img src="/2022/06/07/STL-%E4%B8%8B%E7%AF%87/%E5%B9%BB%E7%81%AF%E7%89%8718.SVG"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Share_ptr</title>
    <url>/2022/06/04/Share-ptr/</url>
    <content><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>一些编程技巧<br>在线程函数内而非全局定义使用static 可以限定作用域，只有在线程函数内使用，意义更加明确，防止其他函数误用；<br>使用RAII机制 std::lock_guard<a href="std::mutex">std::mutex</a> lk(io_mutex)解决资源释放问题；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;  Base::Base()\n&quot;</span>; &#125;</span><br><span class="line">    <span class="comment">// Note: non-virtual destructor is OK here</span></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;  Base::~Base()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Derived</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;  Derived::Derived()\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;  Derived::~Derived()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thr</span><span class="params">(std::shared_ptr&lt;Base&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">    std::shared_ptr&lt;Base&gt; lp = p; <span class="comment">// thread-safe, even though the</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">static</span> std::mutex io_mutex;</span><br><span class="line"></span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(io_mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">        std::cout &lt;&lt;<span class="string">&quot;thread id = &quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>()&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;mutex id = &quot;</span> &lt;&lt; io_mutex.<span class="built_in">native_handle</span>() &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;local pointer in a thread:\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;  lp.get() = &quot;</span> &lt;&lt; p.<span class="built_in">get</span>()</span><br><span class="line">            &lt;&lt; <span class="string">&quot;, lp.use_count() = &quot;</span> &lt;&lt; p.<span class="built_in">use_count</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::shared_ptr&lt;Base&gt; p = std::<span class="built_in">make_shared</span>&lt;Derived&gt;();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Created a shared Derived (as a pointer to Base)\n&quot;</span></span><br><span class="line">        &lt;&lt; <span class="string">&quot;  p.get() = &quot;</span> &lt;&lt; p.<span class="built_in">get</span>()</span><br><span class="line">        &lt;&lt; <span class="string">&quot;, p.use_count() = &quot;</span> &lt;&lt; p.<span class="built_in">use_count</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(thr, p)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(thr, p)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t3</span><span class="params">(thr, p)</span></span>;</span><br><span class="line">    p.<span class="built_in">reset</span>(); <span class="comment">// release ownership from main</span></span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;Shared ownership between 3 threads and released\n&quot;</span></span><br><span class="line">    <span class="comment">//    &lt;&lt; &quot;ownership from main:\n&quot;</span></span><br><span class="line">    <span class="comment">//    &lt;&lt; &quot;  p.get() = &quot; &lt;&lt; p.get()</span></span><br><span class="line">    <span class="comment">//    &lt;&lt; &quot;, p.use_count() = &quot; &lt;&lt; p.use_count() &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    t3.<span class="built_in">join</span>();</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;All threads completed, the last one deleted Derived\n&quot;;</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"></span><br><span class="line">    <span class="built_in">Test</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;construct void&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="type">int</span> a):<span class="built_in">num</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;construct int&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Test</span>(string str)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;construct string&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Test</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;de construct1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> a)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        num = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;num = &quot;</span>&lt;&lt; num &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">getSharedPtr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;Test&gt;(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_shared_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">//通过构造函数初始化</span></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> Test(<span class="string">&quot;helo&quot;</span>))</span></span>;</span><br><span class="line">    cout&lt;&lt;p1.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//通过移动构造和拷贝构造初始化</span></span><br><span class="line">    shared_ptr&lt;Test&gt; p2 = p1;</span><br><span class="line">    cout&lt;&lt;p1.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;p2.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    shared_ptr&lt;Test&gt; p3 = <span class="built_in">move</span>(p1);</span><br><span class="line">    cout&lt;&lt;p1.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;p2.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;p3.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">     <span class="comment">//通过make_shared</span></span><br><span class="line">    shared_ptr&lt;Test&gt; p4 = <span class="built_in">make_shared</span>&lt;Test&gt;(<span class="string">&quot;yyyy&quot;</span>);</span><br><span class="line">    shared_ptr&lt;Test&gt; p5 = <span class="built_in">make_shared</span>&lt;Test&gt;(<span class="number">666</span>);</span><br><span class="line">    cout&lt;&lt;p4.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;p5.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">     <span class="comment">//通过reset初始化</span></span><br><span class="line">    p4.<span class="built_in">reset</span>();</span><br><span class="line">    p5.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">Test</span>(<span class="number">888</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用（1）通过原始指针</span></span><br><span class="line">    Test* p = p1.<span class="built_in">get</span>();</span><br><span class="line">    p-&gt;<span class="built_in">printValue</span>();</span><br><span class="line">    <span class="comment">//使用（2）通过智能指针</span></span><br><span class="line">    p5-&gt;<span class="built_in">printValue</span>();</span><br><span class="line">    <span class="comment">//共享指针对象后面通过.或-&gt; 意义差别很大，.操作符是作用共享指针对象，-&gt;是作用于管理的原始指针对象</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">//非必须，默认的可以用</span></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">p1</span> <span class="params">(<span class="keyword">new</span> Test(<span class="number">999</span>), [](Test* p)&#123; <span class="keyword">delete</span> p;</span></span></span><br><span class="line"><span class="params"><span class="function">    cout &lt;&lt; <span class="string">&quot;destructor&quot;</span>&lt;&lt; endl;&#125;)</span></span>;</span><br><span class="line">    <span class="comment">//必须，数组必须写删除器 或者使用默认构造器</span></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">p2</span><span class="params">(<span class="keyword">new</span> Test[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;, [](Test* p)&#123; <span class="keyword">delete</span> []p;</span></span></span><br><span class="line"><span class="params"><span class="function">    cout &lt;&lt; <span class="string">&quot;destructor[]&quot;</span>&lt;&lt; endl;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> Test[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;, default_delete&lt;Test[]&gt;())</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_unique_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">//构造函数初始化</span></span><br><span class="line">    <span class="function">unique_ptr&lt;Test&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> Test(<span class="number">001</span>))</span></span>;</span><br><span class="line">    <span class="comment">//移动构造初始化</span></span><br><span class="line">    unique_ptr&lt;Test&gt; p2 = <span class="built_in">move</span>(p1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//reset初始化</span></span><br><span class="line">    p2.<span class="built_in">reset</span>();</span><br><span class="line">    <span class="function">unique_ptr&lt;Test&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> Test(<span class="number">001</span>))</span></span>;</span><br><span class="line">    <span class="comment">//获取原始指针</span></span><br><span class="line">    p3.<span class="built_in">get</span>();</span><br><span class="line">    <span class="comment">//操作函数，可以使用原始指针也可以使用，智能指针</span></span><br><span class="line">    p3-&gt;<span class="built_in">printValue</span>();</span><br><span class="line">    p3.<span class="built_in">get</span>()-&gt;<span class="built_in">printValue</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除器的使用1)没有捕捉变量相当于函数指针；</span></span><br><span class="line">    <span class="keyword">using</span> ptrFunc = <span class="built_in">void</span> (*)(Test*);</span><br><span class="line">    <span class="function">unique_ptr&lt;Test, ptrFunc&gt; <span class="title">p4</span><span class="params">(<span class="keyword">new</span> Test(<span class="number">100</span>), [](Test* p)&#123;<span class="keyword">delete</span> p;&#125;)</span></span>;</span><br><span class="line">    <span class="comment">//删除器的使用2)有捕捉变量相当于仿函数；</span></span><br><span class="line">    unique_ptr&lt;Test, function&lt;<span class="type">void</span>(Test*)&gt;&gt; <span class="built_in">p5</span>(<span class="keyword">new</span> <span class="built_in">Test</span>(<span class="number">100</span>), [=](Test* p)&#123;<span class="keyword">delete</span> p;&#125;);</span><br><span class="line">    <span class="comment">//独占智能指针可以管理数组类型地址，即可以自动释放</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    <span class="function">unique_ptr&lt;Test[]&gt; <span class="title">p5</span><span class="params">(<span class="keyword">new</span> Test[<span class="number">3</span>])</span></span>;</span><br><span class="line">    <span class="comment">//c++ 11 不支持，c++14 支持</span></span><br><span class="line">    <span class="function">shared_ptr&lt;Test[]&gt; <span class="title">p6</span><span class="params">(<span class="keyword">new</span> Test[<span class="number">3</span>])</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_weak_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//weak_ptr 可以用shared_ptr初始化并且不增加引用计数</span></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> Test(<span class="number">10</span>))</span></span>;</span><br><span class="line">    cout&lt;&lt; sp.<span class="built_in">use_count</span>()&lt;&lt;endl; <span class="comment">//1</span></span><br><span class="line">    <span class="function">weak_ptr&lt;Test&gt; <span class="title">wp</span> <span class="params">(sp)</span></span>;</span><br><span class="line">    cout&lt;&lt; sp.<span class="built_in">use_count</span>()&lt;&lt;endl; <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//weak_ptr 需要和shared_ptr配合使用</span></span><br><span class="line">    <span class="comment">//share_ptr 存在问题1）不能使用同一块内存初始化多个共享指针对象；</span></span><br><span class="line">    <span class="comment">//                 2) 函数不能返回管理this指针的共享指针对象；</span></span><br><span class="line">    <span class="comment">//                 3) 共享指针不能循环引用</span></span><br><span class="line">    <span class="comment">//这样会析构两次，可以copy 构造</span></span><br><span class="line">    <span class="comment">// Test * p = new Test();</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;Test&gt; p1(p);</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;Test&gt; p2(p); //error</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;Test&gt; p2 = p1; //OK</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2) 函数不能返回管理this指针的共享指针对象；</span></span><br><span class="line">    <span class="comment">//这样会析构两次，可以copy 构造,本质上还是同一块内存初始化两个共享指针对象，会析构两次</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;Test&gt; p3(new Test());</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;Test&gt; p4 = p3-&gt;getSharedPtr();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决方案</span></span><br><span class="line">    <span class="comment">//enable_shared_from_this类中通过weak_ptr实现</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">test2</span> : <span class="keyword">public</span> enable_shared_from_this&lt;test2&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">test2</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;construct test2&quot;</span> &lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">test2</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;destruct test2&quot;</span> &lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">shared_ptr&lt;test2&gt; <span class="title">getSharedPtr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">shared_from_this</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;test2&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> test2())</span></span>;</span><br><span class="line">    cout&lt;&lt;p3.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    shared_ptr&lt;test2&gt; p4 = p3-&gt;<span class="built_in">getSharedPtr</span>();</span><br><span class="line">    cout&lt;&lt;p3.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3) 共享指针不能循环引用</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">A</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">B</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">A</span></span><br><span class="line">    &#123;</span><br><span class="line">        shared_ptr&lt;B&gt; ptr;</span><br><span class="line">        ~<span class="built_in">A</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;A_destruct&quot;</span> &lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">B</span></span><br><span class="line">    &#123;</span><br><span class="line">        shared_ptr&lt;A&gt; ptr;</span><br><span class="line">        ~<span class="built_in">B</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;B_destruct&quot;</span> &lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//形成闭环，造成内存泄漏</span></span><br><span class="line"><span class="function">shared_ptr&lt;A&gt; <span class="title">spA</span> <span class="params">(<span class="keyword">new</span> A)</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;B&gt; <span class="title">spB</span> <span class="params">(<span class="keyword">new</span> B)</span></span>;</span><br><span class="line">spA-&gt;ptr = spB;</span><br><span class="line">spB-&gt;ptr = spA;</span><br><span class="line">cout&lt;&lt; spA.<span class="built_in">use_count</span>()&lt;&lt;endl;<span class="comment">//2</span></span><br><span class="line">cout&lt;&lt; spB.<span class="built_in">use_count</span>()&lt;&lt;endl;<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决方案将struct A 或者struct B，</span></span><br><span class="line"><span class="comment">//任意一个改成weak_ptr, weak_ptr 来保存Shared_ptr类型的地址, 并且改变引用计数的值</span></span><br><span class="line"><span class="comment">// 比如改为：</span></span><br><span class="line"><span class="comment">// struct A</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         weak_ptr&lt;B&gt; ptr;</span></span><br><span class="line"><span class="comment">//         ~A()</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             cout &lt;&lt; &quot;A_destruct&quot; &lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="built_in">test_weak_ptr</span>();</span><br><span class="line">    cin.<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="手写Shared-ptr"><a href="#手写Shared-ptr" class="headerlink" title="手写Shared_ptr"></a>手写Shared_ptr</h2><p>//TODO</p>
<h2 id="Shared-ptr-与-vector"><a href="#Shared-ptr-与-vector" class="headerlink" title="Shared_ptr 与 vector"></a>Shared_ptr 与 vector</h2><p>结论：通过vector clear 方法调用隐式调用Shared_ptr delete 可以释放内存<br>      即使是返回static vector 引用也可以释放内存<br>如果用 vector&lt;TEST*&gt; 则会产生内存泄漏，不会释放引用内存</p>
<p>此外注意如果返回static 的变量的引用同样不会释放内存，会导致内存泄漏；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TEST</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TEST</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;construct&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">TEST</span>(<span class="type">const</span> TEST&amp; t)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;copy construct&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">TEST</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;destruct&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt; <span class="built_in">create_instannce</span>(<span class="type">int</span> num)</span><br><span class="line">    &#123;</span><br><span class="line">        std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt; V;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i =<span class="number">0</span>; i&lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            V.<span class="built_in">push_back</span>(std::<span class="built_in">shared_ptr</span>&lt;TEST&gt;(<span class="keyword">new</span> TEST));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt; v = Factory::<span class="built_in">create_instannce</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">construct</span><br><span class="line">construct</span><br><span class="line">construct</span><br><span class="line">**********************</span><br><span class="line">destruct</span><br><span class="line">destruct</span><br><span class="line">destruct</span><br><span class="line">**********************</span><br><span class="line">```cpp</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> std::vector&lt;TEST*&gt; <span class="title">create_instannce</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::vector&lt;TEST*&gt; V;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            V.<span class="built_in">push_back</span>(<span class="keyword">new</span> TEST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;TEST*&gt; v = Factory2::<span class="built_in">create_instannce</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">construct</span><br><span class="line">construct</span><br><span class="line">construct</span><br><span class="line">**********************</span><br><span class="line">**********************</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Factory3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt;&amp; <span class="built_in">create_instannce</span>(<span class="type">int</span> num)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m_vInstance.<span class="built_in">push_back</span>(std::<span class="built_in">shared_ptr</span>&lt;TEST&gt;(<span class="keyword">new</span> TEST));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_vInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt; m_vInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt; Factory3::m_vInstance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;std::shared_ptr&lt;TEST&gt;&gt;&amp; v = Factory3::<span class="built_in">create_instannce</span>(<span class="number">3</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>1、<a href="https://en.cppreference.com/w/cpp/memory/shared_ptr">https://en.cppreference.com/w/cpp/memory/shared_ptr</a><br>2、<a href="https://subingwen.cn/cplusplus/">https://subingwen.cn/cplusplus/</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>const</title>
    <url>/2022/06/06/const/</url>
    <content><![CDATA[<p>#c++ 非const 指针指向强转后的const 变量后会带来风险， c++ 更侧重常量性</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.cpp文件编译 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)&amp;i;</span><br><span class="line">	*p = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span> j = i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);   <span class="comment">//i = 10</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;j = %d\n&quot;</span>, j);   <span class="comment">//j = 10</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p);  <span class="comment">//*p =100</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&amp;i = %p\n&quot;</span>, &amp;i); <span class="comment">//00000016B1F5FB74</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&amp;j = %p\n&quot;</span>, &amp;j); <span class="comment">//00000016B1F5FB74</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;p = %p \n&quot;</span>, p);  <span class="comment">//00000016B1F5FB74</span></span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .c 文件编译</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)&amp;i;</span><br><span class="line">	*p = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span> j = i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);   <span class="comment">//i = 100</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;j = %d\n&quot;</span>, j);   <span class="comment">//j = 100</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p);  <span class="comment">//*p =100</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;&amp;i = %p\n&quot;</span>, &amp;i); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;&amp;j = %p\n&quot;</span>, &amp;j); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p = %p \n&quot;</span>, p);  </span><br><span class="line">	getchar();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>github使用</title>
    <url>/2022/06/09/github%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="github-常用搜索条件"><a href="#github-常用搜索条件" class="headerlink" title="github 常用搜索条件"></a>github 常用搜索条件</h2><ol>
<li>名字：in:name XXX</li>
<li>描述：in:depscription XXX</li>
<li>作者名字：in:user XXX</li>
<li>readme: in:readme XXX</li>
<li>fork: fork:&gt;3000</li>
<li>stars: stars:&gt;5000</li>
<li>语言：language:XXX</li>
<li>更新时间: pushed:&gt;2020-01-01</li>
<li>仓库大小: size:&gt;2000 //unit kb</li>
<li>高级搜索：<a href="https://github.com/search/advanced">https://github.com/search/advanced</a></li>
</ol>
<h2 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h2><p>in:name: hexo language:c++ stars:&gt;4000 pushed:&gt;2020-01-01<br>注意仅name: 后面有空格</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>github 搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>condition variable</title>
    <url>/2022/07/02/condition-variable/</url>
    <content><![CDATA[<h3 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h3><p>99%的实际并发问题都可以使用生产者消费者问题解决</p>
<h4 id="version-1"><a href="#version-1" class="headerlink" title="version 1"></a>version 1</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;thread-sync.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> n, count = <span class="number">0</span>;</span><br><span class="line"><span class="type">mutex_t</span> lk = <span class="built_in">MUTEX_INIT</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tproduce</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">retry:</span><br><span class="line">        <span class="built_in">mutex_lock</span>(&amp;lk);</span><br><span class="line">        <span class="keyword">if</span>(count == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mutex_unlock</span>(&amp;lock);</span><br><span class="line">            <span class="keyword">goto</span> Retry;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="built_in">mutex_unlock</span>(&amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tconsume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">retry:</span><br><span class="line">        <span class="built_in">mutex_lock</span>(&amp;lk);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mutex_unlock</span>(&amp;lock);</span><br><span class="line">            <span class="keyword">goto</span> Retry;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="built_in">mutex_unlock</span>(&amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(argc == <span class="number">2</span>);</span><br><span class="line">    n = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">setbuff</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">create</span>(Tproduce);</span><br><span class="line">        <span class="built_in">create</span>(Tconsume);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="version2-自旋变睡眠"><a href="#version2-自旋变睡眠" class="headerlink" title="version2 自旋变睡眠"></a>version2 自旋变睡眠</h3><p>只适用一个生产者，一个消费者，因为无法确保，生产者只唤醒消费者，消费者只唤醒生产者</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 条件变量API</span></span><br><span class="line"><span class="comment">// 1. wait(cv, mutex) 调用时必须保证已经获得mutex; 释放mutex.进入睡眠状态</span></span><br><span class="line"><span class="comment">// 2. signal、notify(cv) 私信：走起</span></span><br><span class="line"><span class="comment">// 3. broadcast,nitifyall(cv) 所有人走起，唤醒所有人正在等待的线程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tproduce</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mutex_lock</span>(&amp;lk);</span><br><span class="line">        <span class="keyword">if</span>(count == n)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">cond_wait</span>(&amp;cv,&amp;lk);</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="built_in">cond_signal</span>(&amp;cv);</span><br><span class="line">        <span class="built_in">mutex_unlock</span>(&amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tconsume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mutex_lock</span>(&amp;lk);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">cond_wait</span>(&amp;cv,&amp;lk);</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="built_in">cond_signal</span>(&amp;cv);</span><br><span class="line">        <span class="built_in">mutex_unlock</span>(&amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="条件变量正确使用方式-if-gt-while"><a href="#条件变量正确使用方式-if-gt-while" class="headerlink" title="条件变量正确使用方式 if -&gt;while"></a>条件变量正确使用方式 if -&gt;while</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tproduce</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mutex_lock</span>(&amp;lk);</span><br><span class="line">        <span class="keyword">while</span>(!(count != n))</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">cond_wait</span>(&amp;cv, &amp;lk);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//assert(count !=n ); 代码执行到这里，能够保证count != n, 并且占有互斥锁</span></span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="built_in">cond_broadcast</span>(&amp;cv);</span><br><span class="line">        <span class="built_in">mutex_unlock</span>(&amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tconsume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mutex_lock</span>(&amp;lk);</span><br><span class="line">        <span class="keyword">while</span>(!(count != <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">cond_wait</span>(&amp;cv,&amp;lk);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">assert</span>(count !=<span class="number">0</span>);</span><br><span class="line">        count--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="built_in">cond_broadcast</span>(&amp;cv);</span><br><span class="line">        <span class="built_in">mutex_unlock</span>(&amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//万能方法</span></span><br><span class="line">需要等待的条件满足时：</span><br><span class="line"></span><br><span class="line"><span class="built_in">mutex_lock</span>(&amp;mutex);</span><br><span class="line"><span class="keyword">while</span>(!cond)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">wait</span>(&amp;cv, &amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">assert</span>(cond)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 互斥锁保证</span></span><br><span class="line"><span class="comment">//此时cond 一定满足</span></span><br><span class="line"><span class="built_in">mutex_unlock</span>(&amp;mutex);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//其他线程条件满足时</span></span><br><span class="line"><span class="built_in">broadcast</span>(&amp;cv);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="哲学家吃饭问题"><a href="#哲学家吃饭问题" class="headerlink" title="哲学家吃饭问题"></a>哲学家吃饭问题</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mutex_lock</span>(&amp;mutex)；</span><br><span class="line"><span class="keyword">while</span>(!(avai[left] &amp;&amp; avai[right]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cond_wait</span>(&amp;cv, &amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line">avai[left] = avai[right] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">mutex_unlock</span>(&amp;mutex) <span class="comment">//吃饭</span></span><br><span class="line"><span class="comment">//吃饭</span></span><br><span class="line"><span class="built_in">mutex_lock</span>(&amp;mutex)；</span><br><span class="line">avai[left] = avai[righgt] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">broadcast</span>(&amp;cv);</span><br><span class="line"><span class="built_in">mutex_unlock</span>(&amp;mutex); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo 消费者子线程等待特定条件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> g_num = <span class="number">0</span>;</span><br><span class="line">condition_variable cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">workThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> process_num = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		std::mutex mu;</span><br><span class="line">		unique_lock&lt;std::mutex&gt;<span class="built_in">lk</span>(mu);</span><br><span class="line">		std::cv_status st = std::cv_status::no_timeout;</span><br><span class="line">		<span class="keyword">while</span> (process_num &gt; g_num)</span><br><span class="line">		&#123;</span><br><span class="line">            <span class="comment">//等待生产者最多2s</span></span><br><span class="line">			st = cv.<span class="built_in">wait_for</span>(lk, <span class="number">2</span>s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (st == std::cv_status::timeout)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;timeout&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;process num = &quot;</span> &lt;&lt; process_num &lt;&lt; endl;</span><br><span class="line">		process_num++;</span><br><span class="line">		<span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="function">std::thread <span class="title">worker</span><span class="params">(workThread)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		g_num += <span class="number">1</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;g_num = &quot;</span> &lt;&lt; g_num &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (g_num % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cv.<span class="built_in">notify_one</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">Sleep</span>(<span class="number">500</span>);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	worker.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h4><p> <a href="https://jyywiki.cn/">https://jyywiki.cn/</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>线程同步</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>linux命令备忘录</title>
    <url>/2022/06/11/linux%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h2 id="目录文件相关"><a href="#目录文件相关" class="headerlink" title="目录文件相关"></a>目录文件相关</h2><h3 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h3><p><strong>tar -zvcf XXX.tar.gz 打包内容</strong> // 打包内容可以是多个文件，用空格分隔；或者是个目录<br><strong>tar -zvcf XXX.tar.gz -C 解压目录</strong> // -C 必不可少</p>
<p>zip [选项] xxx.zip 打包内容 //对于文件夹需要-r<br>unzip [选项] xxx.zip -d 解压路径</p>
<h3 id="Linux-运行级别"><a href="#Linux-运行级别" class="headerlink" title="Linux 运行级别"></a>Linux 运行级别</h3><blockquote>
<ul>
<li>0 级别(halt)：系统停机模式</li>
<li>1 级别(single user)：单用户模式。只允许系统管理员登录，一般系统维护时会设置该模式</li>
<li>2 级别(multiuser without nfs)：多用户模式，不开启网络</li>
<li>3 级别(full multiuser)：完整的多用户模式</li>
<li>4 级别(unused)：预留的自定义模式，一般不会使用</li>
<li>5 级别(x11)：图形界面</li>
<li>6 级别(reboot)：重启模式<br>常用：graphical.target 5<br>multi-user.target 3<br>可通过systemctl set-default XXX 来设置</li>
</ul>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">rechard@DESKTOP:~/socket$ systemctl get-<span class="keyword">default</span></span><br><span class="line">graphical.target</span><br></pre></td></tr></table></figure>


<h3 id="查看文件指令"><a href="#查看文件指令" class="headerlink" title="查看文件指令"></a>查看文件指令</h3><p>//ctrl + b ;ctrl + f 可以翻页，空格翻页，enter 下一行, -n 添加行号<br>//查看重要文件可以采取此方式，不会误改文件<br>cat -n XXX | less </p>
<h3 id="gt-重定向-和-gt-gt-追加"><a href="#gt-重定向-和-gt-gt-追加" class="headerlink" title="&gt; 重定向 和 &gt;&gt; 追加"></a>&gt; 重定向 和 &gt;&gt; 追加</h3><p>ls -al &gt; 1.txt<br>echo “test” &gt;&gt; 1.txt<br>cat 1.txt &gt; 2.txt</p>
<h3 id="ln-s"><a href="#ln-s" class="headerlink" title="ln -s"></a>ln -s</h3><p>ln -s [源文件或目录] [软链接名] //创建，删除<br>ln -s /home/trace /home/data/trace<br>rm /home/data/trace</p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p> find [搜索范围][选项]<br> find /home -name “*.c”</p>
<h2 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h2><hr>
<hr>
<p>|    |    |    |    |<br>|    |    |    |    +—– 星期中星期几 (0 - 6) (星期天 为0)<br>|    |    |    +———- 月份 (1 - 12)<br>|    |    +————— 一个月中的第几天 (1 - 31)<br>|    +——————– 小时 (0 - 23)<br>+————————- 分钟 (0 - 59)</p>
<h3 id="周期定时任务crontab"><a href="#周期定时任务crontab" class="headerlink" title="周期定时任务crontab"></a>周期定时任务crontab</h3><p>注意占位符的含义，脚本无法执行，注意太添加环境变量或使用绝对路径</p>
<blockquote>
<ul>
<li>crontab -e 编辑crontab定时任务// 可以添加命令和脚本</li>
<li>crontab -l 查看当前用户定时任务</li>
<li>crontab -r 删除当前用户所有任务</li>
</ul>
</blockquote>
<h3 id="一次性订时任务"><a href="#一次性订时任务" class="headerlink" title="一次性订时任务"></a>一次性订时任务</h3><blockquote>
<ul>
<li>at的守护进程每60秒检查一次作业队列，有作业时检查作业，时间恰好达到，则运行作业。</li>
<li>前提：保证atd进程已经启动，检查atd进程是否启动：ps -ef | grep atd。</li>
<li>atd的命令格式： at [选项] [时间]</li>
<li>ctrl+D：结束at命令的输入。<br>[选项]</li>
<li>m 任务完成后给用户发送邮件，没有标准输出。</li>
<li>v 显示任务的被执行时间</li>
<li>c 打印任务的内容到标准输出</li>
<li>V 显示版本信息</li>
<li>q &lt;队列&gt; 使用指定的队列</li>
<li>f &lt;文件&gt; 使用指定文件读入任务</li>
<li>t &lt;时间参数&gt; 以时间参数的形式提交要运行的任务</li>
</ul>
</blockquote>
<p>[时间]<br>hh:mm 例：04:00（当天4点）<br>midnight（深夜），noon（中午），teatime（下午茶时间）<br>12小时制：AM上午，PM下午，例：10 pm<br>month day 或 mm/dd/yy（年月日）或 dd mm yy 或 08:00 2020-06-11<br>now+ count time-units，例：now+1 minutes<br>today<br>tomorrow</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5min 后执行特定命令</span></span><br><span class="line">at now + <span class="number">2</span> minutes</span><br><span class="line">date &gt; /root/date.<span class="built_in">log</span></span><br><span class="line">ctrl+D 两次</span><br><span class="line"><span class="comment">//5min 后执行固定脚本</span></span><br><span class="line">at now + <span class="number">5</span> minutes</span><br><span class="line">/root/my.sh</span><br><span class="line">ctrl+D 两次</span><br></pre></td></tr></table></figure>



<h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><p>Linux 系统有个唯一的目录结构，各磁盘分区挂在到特定目录；<br>Linux 硬盘分为IDE硬盘和SCSI硬盘，目前基本是SCSI硬盘<br>查看所有设备挂在情况lsblk -f  </p>
<h4 id="如何增加一块硬盘"><a href="#如何增加一块硬盘" class="headerlink" title="如何增加一块硬盘"></a>如何增加一块硬盘</h4><ol>
<li>虚拟机增加硬盘</li>
<li>分区 fdisk /dev/sdb </li>
<li>格式化 mkfs -t ext4 /dev/sdb1</li>
<li>挂载 mount/umount 设备名称 挂载目录 命令挂载重启后失效</li>
<li>设置自动挂载 通过修改fetc/fstab</li>
</ol>
<p>查询磁盘使用情况:df -h hexo</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">rechard@DESKTOP-GTFTOTJ:~$ df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">rootfs          <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /</span><br><span class="line">none            <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /dev</span><br><span class="line">none            <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /run</span><br><span class="line">none            <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /run/lock</span><br><span class="line">none            <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /run/shm</span><br><span class="line">none            <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /run/user</span><br><span class="line">tmpfs           <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /sys/fs/cgroup</span><br><span class="line">C:\             <span class="number">105</span>G   <span class="number">88</span>G   <span class="number">18</span>G  <span class="number">84</span>% /mnt/c</span><br><span class="line">D:\             <span class="number">3.1</span>G  <span class="number">141</span>M  <span class="number">2.9</span>G   <span class="number">5</span>% /mnt/d</span><br><span class="line">E:\             <span class="number">314</span>G  <span class="number">239</span>G   <span class="number">75</span>G  <span class="number">77</span>% /mnt/e</span><br><span class="line">F:\             <span class="number">323</span>G  <span class="number">284</span>G   <span class="number">40</span>G  <span class="number">88</span>% /mnt/f</span><br></pre></td></tr></table></figure>

<p>查询指定目录的磁盘占用情况<br>du -hac –max-depth=1 /opt </p>
<blockquote>
<ul>
<li>-s 指定目录的磁盘占用情况</li>
<li>-h 带计量单位</li>
<li>-a 含文件</li>
<li>–max-depth=1 子目录深度</li>
<li>-c列出明细同时，汇总</li>
</ul>
</blockquote>
<p>查看某个文件夹文件的个数<br>ls -l | grep “^_” | wc -l<br>查看某个文件夹路径的个数<br>ls -l | grep “^d” | wc -l</p>
<p>查看某个文件夹文件的个数<br>ls -lR | grep “^_” | wc -l</p>
<p>查看某个文件夹路径的个数<br>ls -lR | grep “^d” | wc -l</p>
<p>wc 参数及含义参数含义</p>
<p>-c显示文件的Bytes数(字节数)</p>
<p>-l将每个文件的行数及文件名输出到屏幕上</p>
<p>-m将每个文件的字符数及文件名输出到屏幕上，如果当前系统不支持多字节字符其将显示与-c参数相同的结果</p>
<p>-w将每个文件含有多少个词及文件名输出到屏幕上</p>
<h3 id="wsl2-修改主机名"><a href="#wsl2-修改主机名" class="headerlink" title="wsl2 修改主机名"></a>wsl2 修改主机名</h3><p>修改etc/hostname<br>DESKTOP-GTFTOTJ-&gt;Han<br>修改etc/hosts</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>   localhost</span><br><span class="line"> #<span class="number">127.0</span><span class="number">.1</span><span class="number">.1</span>  DESKTOP-GTFTOTJ.localdomain DESKTOP-GTFTOTJ</span><br><span class="line"> <span class="number">127.0</span><span class="number">.1</span><span class="number">.1</span>   Han.localdomain Han</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux 系统</category>
      </categories>
  </entry>
  <entry>
    <title>new Class &amp;&amp; new Class()</title>
    <url>/2022/06/15/new%E5%92%8Cnew()/</url>
    <content><![CDATA[<h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><ol>
<li>对于自定义类型，new 和 new() 均调用默认构造；</li>
<li>一旦自己定义构，不再对内置类型进行初始化；</li>
</ol>
<h3 id="使用默认构造"><a href="#使用默认构造" class="headerlink" title="使用默认构造"></a>使用默认构造</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int i; vs2019编译器已经不允许这样使用了</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">j</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span>* p1 = <span class="keyword">new</span> <span class="built_in">int</span>();</span><br><span class="line">    <span class="type">int</span>* p2 = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;i = &quot; &lt;&lt; i &lt;&lt; std::endl;</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;j = &quot;</span> &lt;&lt; j &lt;&lt; std::endl;     <span class="comment">//1</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*p1 = &quot;</span> &lt;&lt; *p1 &lt;&lt; std::endl; <span class="comment">//0</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*p2 = &quot;</span> &lt;&lt; *p2 &lt;&lt; std::endl; <span class="comment">//随机值</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;****************************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//A a1;   vs2019编译器已经不允许这样使用了</span></span><br><span class="line">    A a2 = <span class="built_in">A</span>();</span><br><span class="line">    A* ptr = <span class="keyword">new</span> A;</span><br><span class="line">    A* ptr1 = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;a1.i = &quot; &lt;&lt; a1.i &lt;&lt; std::endl;</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a2.i = &quot;</span> &lt;&lt; a2.i &lt;&lt; std::endl;         <span class="comment">//0</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*ptr-&gt;i = &quot;</span> &lt;&lt; ptr-&gt;i &lt;&lt; std::endl;    <span class="comment">//随机值</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*ptr1-&gt;i = &quot;</span> &lt;&lt; ptr1-&gt;i &lt;&lt; std::endl;  <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">*p1 = <span class="number">0</span></span><br><span class="line">*p2 = <span class="number">-842150451</span></span><br><span class="line">****************************</span><br><span class="line">a2.i = <span class="number">0</span></span><br><span class="line">*ptr-&gt;i = <span class="number">-842150451</span></span><br><span class="line">*ptr1-&gt;i = <span class="number">0</span></span><br><span class="line">请按任意键继续. . .</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="自己定义构造"><a href="#自己定义构造" class="headerlink" title="自己定义构造"></a>自己定义构造</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">A</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;construct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int i; vs2019编译器已经不允许这样使用了</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">j</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span>* p1 = <span class="keyword">new</span> <span class="built_in">int</span>();</span><br><span class="line">    <span class="type">int</span>* p2 = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;i = &quot; &lt;&lt; i &lt;&lt; std::endl;</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;j = &quot;</span> &lt;&lt; j &lt;&lt; std::endl;     <span class="comment">//1</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*p1 = &quot;</span> &lt;&lt; *p1 &lt;&lt; std::endl; <span class="comment">//0</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*p2 = &quot;</span> &lt;&lt; *p2 &lt;&lt; std::endl; <span class="comment">//随机值</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;****************************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//A a1;   vs2019编译器已经不允许这样使用了</span></span><br><span class="line">    A a2 = <span class="built_in">A</span>();</span><br><span class="line">    A* ptr = <span class="keyword">new</span> A;</span><br><span class="line">    A* ptr1 = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;a1.i = &quot; &lt;&lt; a1.i &lt;&lt; std::endl;</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a2.i = &quot;</span> &lt;&lt; a2.i &lt;&lt; std::endl;         <span class="comment">//0</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*ptr-&gt;i = &quot;</span> &lt;&lt; ptr-&gt;i &lt;&lt; std::endl;    <span class="comment">//随机值</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*ptr1-&gt;i = &quot;</span> &lt;&lt; ptr1-&gt;i &lt;&lt; std::endl;  <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------</span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">*p1 = <span class="number">0</span></span><br><span class="line">*p2 = <span class="number">-842150451</span></span><br><span class="line">****************************</span><br><span class="line">construct!</span><br><span class="line">construct!</span><br><span class="line">construct!</span><br><span class="line">a2.i = <span class="number">-858993460</span></span><br><span class="line">*ptr-&gt;i = <span class="number">-842150451</span></span><br><span class="line">*ptr1-&gt;i = <span class="number">-842150451</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>vector</title>
    <url>/2022/06/20/vector/</url>
    <content><![CDATA[<h3 id="vector-内存释放"><a href="#vector-内存释放" class="headerlink" title="vector 内存释放"></a>vector 内存释放</h3><p>//使用std::vector<int>().swap(v1)进行内存释放</int></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v1)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt;<span class="string">&quot;before &amp;v = &quot;</span>&lt;&lt; &amp;v1 &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;before v.size()&quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(v1);</span><br><span class="line">   </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;after =&quot;</span> &lt;&lt; &amp;v1 &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;after v.size() = &quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v2 = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span> &#125;;</span><br><span class="line">    v2.<span class="built_in">swap</span>(v1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : v1)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">before &amp;v = <span class="number">00000023E4</span>F4F408</span><br><span class="line">before v.<span class="built_in">size</span>()<span class="number">4</span></span><br><span class="line">after =<span class="number">00000023E4</span>F4F408</span><br><span class="line">after v.<span class="built_in">size</span>() = <span class="number">0</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure>

<h3 id="push-back-执行的构造"><a href="#push-back-执行的构造" class="headerlink" title="push_back 执行的构造"></a>push_back 执行的构造</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 如果不提供移动构造，会调用copy构造；</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ABC</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">ABC</span>(std::string name, <span class="type">int</span> n) : <span class="built_in">m_name</span>(name), <span class="built_in">m_num</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;construct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ABC</span>(<span class="type">const</span> ABC&amp; other) </span><br><span class="line">    &#123;</span><br><span class="line">        m_name = other.m_name;</span><br><span class="line">        m_num = other.m_num;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;copy construct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  ABC(const ABC&amp;&amp; other)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        m_name = other.m_name;</span></span><br><span class="line"><span class="comment">        m_num = other.m_num;</span></span><br><span class="line"><span class="comment">        std::cout &lt;&lt; &quot;move construct!&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    ~<span class="built_in">ABC</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;destruct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string  m_name;</span><br><span class="line">    <span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::vector&lt;ABC&gt;p;</span><br><span class="line">    p.<span class="built_in">push_back</span>(<span class="built_in">ABC</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">construct!</span><br><span class="line">------------------</span><br><span class="line">construct!</span><br><span class="line">copy construct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 提供移动构造，则调用移动构造</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ABC</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">ABC</span>(std::string name, <span class="type">int</span> n) : <span class="built_in">m_name</span>(name), <span class="built_in">m_num</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;construct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ABC</span>(<span class="type">const</span> ABC&amp; other) </span><br><span class="line">    &#123;</span><br><span class="line">        m_name = other.m_name;</span><br><span class="line">        m_num = other.m_num;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;copy construct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ABC</span>(<span class="type">const</span> ABC&amp;&amp; other)</span><br><span class="line">    &#123;</span><br><span class="line">        m_name = other.m_name;</span><br><span class="line">        m_num = other.m_num;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;move construct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">ABC</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;destruct!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string  m_name;</span><br><span class="line">    <span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::vector&lt;ABC&gt;p;</span><br><span class="line">    p.<span class="built_in">push_back</span>(<span class="built_in">ABC</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"></span><br><span class="line">construct!</span><br><span class="line">------------------</span><br><span class="line">construct!</span><br><span class="line">move construct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 如果将测试程序改为</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="built_in">ABC</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果变为：为什么会调用copy construct??????? </span></span><br><span class="line"><span class="comment">//请看下面继续验证</span></span><br><span class="line">construct!</span><br><span class="line">------------------</span><br><span class="line">construct!</span><br><span class="line">move construct!</span><br><span class="line">copy construct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 如果将测试程序改为</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">//std::vector&lt;ABC&gt;v;</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(<span class="built_in">ABC</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：加上move后，push_back 的行为没有改变</span></span><br><span class="line">construct!</span><br><span class="line">------------------</span><br><span class="line">construct!</span><br><span class="line">move construct!</span><br><span class="line">copy construct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 如果将测试程序改为</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    ABC abc = <span class="built_in">ABC</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(std::<span class="built_in">move</span>(abc));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(abc);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：？？？为什么出现2次copy,为什么不是1次</span></span><br><span class="line">construct!</span><br><span class="line">move construct!</span><br><span class="line">------------------</span><br><span class="line">copy construct!</span><br><span class="line">copy construct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 如果将测试程序改为</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;ABC&gt;v;</span><br><span class="line">    ABC abc = <span class="built_in">ABC</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    v.<span class="built_in">emplace_back</span>(std::<span class="built_in">move</span>(abc));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">//v.emplace_back(abc);</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：以下结果可以容易理解</span></span><br><span class="line">construct!</span><br><span class="line">move construct!</span><br><span class="line">------------------</span><br><span class="line">destruct!</span><br><span class="line">destruct!</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>关系容器</title>
    <url>/2022/07/03/%E5%85%B3%E7%B3%BB%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="RBT"><a href="#RBT" class="headerlink" title="RBT"></a>RBT</h3><p>是一种平衡二叉搜索树（中序遍历有序）；<br>性质：</p>
<ol>
<li>节点不是红色就是黑色的，</li>
<li>根节点是黑色的；</li>
<li>如果一个节点是红色的，则两个子节点是黑色的；</li>
<li>黑色节点的高度一致；<br>与avl对比：<br>AVL的左右子树高度差不能超过1，每次进行插入/删除操作时，几乎都需要通过旋转操作保持平衡<br>在频繁进行插入/删除的场景中，频繁的旋转操作使得AVL的性能大打折扣<br>红黑树通过牺牲严格的平衡，换取插入/删除时少量的旋转操作，整体性能优于AVL<br>红黑树插入时的不平衡，不超过两次旋转就可以解决；删除时的不平衡，不超过三次旋转就能解决<br>红黑树的红黑规则，保证最坏的情况下，也能在O(log2N) 时间内完成查找操作。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line">STL map 源码</span><br><span class="line"><span class="comment">// map 类型是一种红黑树</span></span><br><span class="line"><span class="keyword">typedef</span> _Rb_tree&lt;key_type, value_type, _Select1st&lt;value_type&gt;,</span><br><span class="line">		       key_compare, _Pair_alloc_type&gt; _Rep_type;</span><br><span class="line"><span class="comment">// The actual tree structure.</span></span><br><span class="line">  _Rep_type _M_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">//红黑树数据定义</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Key, <span class="keyword">typename</span> _Val, <span class="keyword">typename</span> _KeyOfValue,</span><br><span class="line">	   <span class="keyword">typename</span> _Compare, <span class="keyword">typename</span> _Alloc = allocator&lt;_Val&gt; &gt;</span><br><span class="line"><span class="comment">// _Key： 用来比较排序的key的类型</span></span><br><span class="line"><span class="comment">// _Val: 具体节点类型，包括key和data 通过这种方式达到map 和 set 的统一，set中 key和value是一致的。</span></span><br><span class="line"><span class="comment">// _KeyOfValue: 提供方法获得key;</span></span><br><span class="line"><span class="comment">//_compare 用来比较key的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rbt 最主要数据_M_storage </span></span><br><span class="line"><span class="keyword">struct</span> _Rb_tree_node_base</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">typedef</span> _Rb_tree_node_base* _Base_ptr;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">const</span> _Rb_tree_node_base* _Const_Base_ptr;</span><br><span class="line"></span><br><span class="line">    _Rb_tree_color	_M_color;</span><br><span class="line">    _Base_ptr		_M_parent;</span><br><span class="line">    _Base_ptr		_M_left;</span><br><span class="line">    _Base_ptr		_M_right;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> _Base_ptr</span><br><span class="line">    _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> (__x-&gt;_M_left != <span class="number">0</span>) __x = __x-&gt;_M_left;</span><br><span class="line">      <span class="keyword">return</span> __x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> _Const_Base_ptr</span><br><span class="line">    _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> (__x-&gt;_M_left != <span class="number">0</span>) __x = __x-&gt;_M_left;</span><br><span class="line">      <span class="keyword">return</span> __x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> _Base_ptr</span><br><span class="line">    _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> (__x-&gt;_M_right != <span class="number">0</span>) __x = __x-&gt;_M_right;</span><br><span class="line">      <span class="keyword">return</span> __x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> _Const_Base_ptr</span><br><span class="line">    _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> (__x-&gt;_M_right != <span class="number">0</span>) __x = __x-&gt;_M_right;</span><br><span class="line">      <span class="keyword">return</span> __x;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Rb_tree_node</span> : <span class="keyword">public</span> _Rb_tree_node_base</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">typedef</span> _Rb_tree_node&lt;_Val&gt;* _Link_type;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &lt; 201103L</span></span><br><span class="line">      _Val _M_value_field;</span><br><span class="line"></span><br><span class="line">      _Val*</span><br><span class="line">      _M_valptr()</span><br><span class="line">      &#123; <span class="keyword">return</span> std::__addressof(_M_value_field); &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">const</span> _Val*</span><br><span class="line">      _M_valptr() <span class="type">const</span></span><br><span class="line">      &#123; <span class="keyword">return</span> std::__addressof(_M_value_field); &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      __gnu_cxx::__aligned_membuf&lt;_Val&gt; _M_storage;</span><br><span class="line"></span><br><span class="line">      _Val*</span><br><span class="line">      _M_valptr()</span><br><span class="line">      &#123; <span class="keyword">return</span> _M_storage._M_ptr(); &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">const</span> _Val*</span><br><span class="line">      _M_valptr() <span class="type">const</span></span><br><span class="line">      &#123; <span class="keyword">return</span> _M_storage._M_ptr(); &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入 </span></span><br><span class="line">iterator</span><br><span class="line">	_M_insert_equal(_Arg&amp;&amp; __x);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Arg, <span class="keyword">typename</span> _NodeGen&gt;</span><br><span class="line">	iterator</span><br><span class="line">	_M_insert_unique_(const_iterator __pos, _Arg&amp;&amp; __x, _NodeGen&amp;);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>hash(key)/n = index<br>解决hash 冲突通常使用拉链法</p>
<p>负载因子： 散列表实际元素的个数/数组个数 ，如果大于1，则会扩容，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Key, <span class="keyword">typename</span> _Value, <span class="keyword">typename</span> _Alloc,</span><br><span class="line">	   <span class="keyword">typename</span> _ExtractKey, <span class="keyword">typename</span> _Equal,</span><br><span class="line">	   <span class="keyword">typename</span> _H1, <span class="keyword">typename</span> _H2, <span class="keyword">typename</span> _Hash,</span><br><span class="line">	   <span class="keyword">typename</span> _RehashPolicy, <span class="keyword">typename</span> _Traits&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Hashtable</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  @tparam _Value  CopyConstructible type.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _Key    CopyConstructible type.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _Alloc  An allocator type</span></span><br><span class="line"><span class="comment">   *  ([lib.allocator.requirements]) whose _Alloc::value_type is</span></span><br><span class="line"><span class="comment">   *  _Value.  As a conforming extension, we allow for</span></span><br><span class="line"><span class="comment">   *  _Alloc::value_type != _Value.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _ExtractKey  Function object that takes an object of type</span></span><br><span class="line"><span class="comment">   *  _Value and returns a value of type _Key.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _Equal  Function object that takes two objects of type k</span></span><br><span class="line"><span class="comment">   *  and returns a bool-like value that is true if the two objects</span></span><br><span class="line"><span class="comment">   *  are considered equal.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _H1  The hash function. A unary function object with</span></span><br><span class="line"><span class="comment">   *  argument type _Key and result type size_t. Return values should</span></span><br><span class="line"><span class="comment">   *  be distributed over the entire range [0, numeric_limits&lt;size_t&gt;:::max()].</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _H2  The range-hashing function (in the terminology of</span></span><br><span class="line"><span class="comment">   *  Tavori and Dreizin).  A binary function object whose argument</span></span><br><span class="line"><span class="comment">   *  types and result type are all size_t.  Given arguments r and N,</span></span><br><span class="line"><span class="comment">   *  the return value is in the range [0, N).</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _Hash  The ranged hash function (Tavori and Dreizin). A</span></span><br><span class="line"><span class="comment">   *  binary function whose argument types are _Key and size_t and</span></span><br><span class="line"><span class="comment">   *  whose result type is size_t.  Given arguments k and N, the</span></span><br><span class="line"><span class="comment">   *  return value is in the range [0, N).  Default: hash(k, N) =</span></span><br><span class="line"><span class="comment">   *  h2(h1(k), N).  If _Hash is anything other than the default, _H1</span></span><br><span class="line"><span class="comment">   *  and _H2 are ignored.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _RehashPolicy  Policy class with three members, all of</span></span><br><span class="line"><span class="comment">   *  which govern the bucket count. _M_next_bkt(n) returns a bucket</span></span><br><span class="line"><span class="comment">   *  count no smaller than n.  _M_bkt_for_elements(n) returns a</span></span><br><span class="line"><span class="comment">   *  bucket count appropriate for an element count of n.</span></span><br><span class="line"><span class="comment">   *  _M_need_rehash(n_bkt, n_elt, n_ins) determines whether, if the</span></span><br><span class="line"><span class="comment">   *  current bucket count is n_bkt and the current element count is</span></span><br><span class="line"><span class="comment">   *  n_elt, we need to increase the bucket count.  If so, returns</span></span><br><span class="line"><span class="comment">   *  make_pair(true, n), where n is the new bucket count.  If not,</span></span><br><span class="line"><span class="comment">   *  returns make_pair(false, &lt;anything&gt;)</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @tparam _Traits  Compile-time class with three boolean</span></span><br><span class="line"><span class="comment">   *  std::integral_constant members:  __cache_hash_code, __constant_iterators,</span></span><br><span class="line"><span class="comment">   *   __unique_keys.</span></span><br><span class="line"><span class="comment">   * /</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
<p><img src="/2022/07/03/%E5%85%B3%E7%B3%BB%E5%AE%B9%E5%99%A8/hashtable.jpg">   </p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>函数模板和类模板</title>
    <url>/2022/06/06/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%92%8C%E7%B1%BB%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="c-函数模板与类模板"><a href="#c-函数模板与类模板" class="headerlink" title="c++ 函数模板与类模板"></a>c++ 函数模板与类模板</h1><h2 id="为什么需要函数模板与类模板？实现机理？"><a href="#为什么需要函数模板与类模板？实现机理？" class="headerlink" title="为什么需要函数模板与类模板？实现机理？"></a>为什么需要函数模板与类模板？实现机理？</h2><p>解决因参数类型不同导致，重复定义相似的函数或者类。</p>
<p>函数模板并不是定义一个函数，使其可以兼容各种类型，而是通过两次编译的方式，根据不同参数调用生成多个不同数据类型的函数或者是类；可以通过查看汇编代码验证；</p>
<p>模板的本质是数据类型参数化。</p>
<h2 id="模板函数与普通函数发生重载；"><a href="#模板函数与普通函数发生重载；" class="headerlink" title="模板函数与普通函数发生重载；"></a>模板函数与普通函数发生重载；</h2><p>模板函数遵循严格的参数类型匹配，普通函数支持隐式类型转换；如果普通函数均能够完全匹配则优先调用普通函数。</p>
<h2 id="static-关键字与类模板"><a href="#static-关键字与类模板" class="headerlink" title="static 关键字与类模板"></a>static 关键字与类模板</h2><p>类模板不同的参数类型具现化后，属于不同的函数；比如int 与float具现化两个不同的函数，对应static 的变量当然没有什么关系；如果具现化后为同一个类 ，则static为同一变量。</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>具体注意细节看如下代码的注释</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Test.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; &lt;T&gt; (ostream&amp; out, Point&lt;T&gt;&amp; p1); <span class="comment">//注意此处语法，</span></span><br><span class="line">                                                                 <span class="comment">//声明时多了个&lt;T&gt;</span></span><br><span class="line">                                                                 <span class="comment">//一般输入输出用友元函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Point</span>(T x, T y);</span><br><span class="line">	~<span class="built_in">Point</span>();</span><br><span class="line">	Point&lt;T&gt; <span class="keyword">operator</span>+(<span class="type">const</span> Point&lt;T&gt;&amp; p1);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	T m_x;</span><br><span class="line">	T m_y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Test.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Point&lt;T&gt;::<span class="built_in">Point</span>(T x, T y)</span><br><span class="line">&#123;</span><br><span class="line">	m_x = x;</span><br><span class="line">	m_y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Point&lt;T&gt;::~<span class="built_in">Point</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意3个地方加上&lt;T&gt; 即：参数，返回值，名称</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Point&lt;T&gt; Point&lt;T&gt;::<span class="keyword">operator</span>+(<span class="type">const</span> Point&lt;T&gt;&amp; p1)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//下面函数内部Point&lt;T&gt;可以不写&lt;T&gt;</span></span><br><span class="line">	<span class="comment">//Point&lt;T&gt; temp(this-&gt;m_x + p1.m_x, this-&gt;m_y + p1.m_y);</span></span><br><span class="line">	<span class="function">Point <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;m_x + p1.m_x, <span class="keyword">this</span>-&gt;m_y + p1.m_y)</span></span>;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, Point&lt;T&gt;&amp; p1) <span class="comment">//友元函数为全局函数无需加类作用符号</span></span><br><span class="line">&#123;</span><br><span class="line">	out &lt;&lt; <span class="string">&quot;Point.m_x=&quot;</span> &lt;&lt; p1.m_x &lt;&lt; <span class="string">&quot;   Point.m_y=&quot;</span> &lt;&lt; p1.m_y &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//#include &quot;Test.cpp&quot;  此处必须包含cpp才可以正常调用，所以一般都将.h文件与.cpp 合二为一.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Test.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Point&lt;<span class="type">int</span>&gt; p1 = <span class="built_in">Point</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	Point&lt;<span class="type">int</span>&gt; p2 = <span class="built_in">Point</span>&lt;<span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">	Point&lt;<span class="type">int</span>&gt; p3 = p1 + p2;</span><br><span class="line">	cout &lt;&lt; p3;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//#include &quot;Test.cpp&quot;  此处必须包含cpp才可以正常调用，所以一般都将.h文件与.cpp 合二为一.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Test.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Point&lt;<span class="type">int</span>&gt; p1 = <span class="built_in">Point</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	Point&lt;<span class="type">int</span>&gt; p2 = <span class="built_in">Point</span>&lt;<span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">	Point&lt;<span class="type">int</span>&gt; p3 = p1 + p2;</span><br><span class="line">	cout &lt;&lt; p3;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>性能优化</title>
    <url>/2022/06/06/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>#实现系统性能优化<br>1、cpu绑定<br>2、算法<br>3、函数调用次数与耗时比<br>4、simd 技术（提升10倍左右）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NDEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ASSERT.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;emmintrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;xmmintrin.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">	<span class="type">void</span> _AssertMsg(<span class="type">char</span> *strMessage);</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ASSERTMSG(f,str) \</span></span><br><span class="line"><span class="meta">	<span class="keyword">if</span>(f)					\</span></span><br><span class="line"><span class="meta">		NULL;				\</span></span><br><span class="line"><span class="meta">	<span class="keyword">else</span>					\</span></span><br><span class="line"><span class="meta">		_AssertMsg(str)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ASSERTMSG(f,str) NULL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Compare1</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* src, <span class="type">unsigned</span> <span class="type">char</span>* min, <span class="type">unsigned</span> <span class="type">char</span>* max,\</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="type">unsigned</span> <span class="type">char</span>* result, <span class="type">int</span> height, <span class="type">int</span> width)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> t = (<span class="type">double</span>)<span class="built_in">getTickCount</span>();<span class="comment">//开始时间</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; height; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; width; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			result[j + i*width] = (<span class="type">unsigned</span> <span class="type">char</span>)((src[j + i*width] &lt; min[j + i*width]) * <span class="number">255</span> | (src[j + i*width]&gt; max[j + i*width]*<span class="number">255</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	t = (<span class="type">double</span>)<span class="built_in">getTickCount</span>() - t;<span class="comment">//代码运行时间=结束时间-开始时间</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Compare1 execution time = %gms\n&quot;</span>, t*<span class="number">1000.</span> / <span class="built_in">getTickFrequency</span>());<span class="comment">//转换时间单位并输出代码运行</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Compare2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* src, <span class="type">unsigned</span> <span class="type">char</span>* min, <span class="type">unsigned</span> <span class="type">char</span>* max, \</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="type">unsigned</span> <span class="type">char</span>* result, <span class="type">int</span> height, <span class="type">int</span> width)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> t = (<span class="type">double</span>)<span class="built_in">getTickCount</span>();<span class="comment">//开始时间</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; height; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= width<span class="number">-16</span>; j+=<span class="number">16</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			__m128i res1 = _mm_loadu_si128((<span class="type">const</span> __m128i *)(src + j));</span><br><span class="line">			__m128i res2 = _mm_loadu_si128((<span class="type">const</span> __m128i *)(min + j));</span><br><span class="line">			__m128i res3 = _mm_loadu_si128((<span class="type">const</span> __m128i *)(max + j));</span><br><span class="line"></span><br><span class="line">			__m128i min = _mm_andnot_si128(_mm_cmpeq_epi8(_mm_max_epu8(res1, res2), res1), _mm_set1_epi8(<span class="number">-1</span>));</span><br><span class="line">			__m128i max = _mm_andnot_si128(_mm_cmpeq_epi8(_mm_max_epu8(res1, res3), res1), _mm_set1_epi8(<span class="number">-1</span>));</span><br><span class="line">			min = _mm_or_si128(min,max);</span><br><span class="line">			_mm_storeu_si128((__m128i*)(result+j), min);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (; j &lt; width; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			result[j + i*width] = (<span class="type">unsigned</span> <span class="type">char</span>)((src[j + i*width] &lt; min[j + i*width]) * <span class="number">255</span> | (src[j + i*width]&gt; max[j + i*width] * <span class="number">255</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	t = (<span class="type">double</span>)<span class="built_in">getTickCount</span>() - t;<span class="comment">//代码运行时间=结束时间-开始时间</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Compare1 execution time = %gms\n&quot;</span>, t*<span class="number">1000.</span> / <span class="built_in">getTickFrequency</span>());<span class="comment">//转换时间单位并输出代码运行</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	Mat imgSrc = Mat::<span class="built_in">zeros</span>(<span class="number">500</span>, <span class="number">400</span>, CV_8UC1);</span><br><span class="line">	Mat imgRes = Mat::<span class="built_in">zeros</span>(<span class="number">500</span>, <span class="number">400</span>, CV_8UC1);</span><br><span class="line">	Mat imgMin = <span class="built_in">Mat</span>(<span class="number">500</span>, <span class="number">400</span>, CV_8UC1, <span class="number">100</span>);</span><br><span class="line">	Mat imgMax = <span class="built_in">Mat</span>(<span class="number">500</span>, <span class="number">400</span>, CV_8UC1, <span class="number">255</span>);</span><br><span class="line">	<span class="built_in">randu</span>(imgSrc, cv::Scalar::<span class="built_in">all</span>(<span class="number">0</span>), cv::Scalar::<span class="built_in">all</span>(<span class="number">255</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">Compare1</span>(imgSrc.data, imgMin.data, imgMax.data, imgRes.data, <span class="number">500</span>, <span class="number">400</span>);</span><br><span class="line">	<span class="built_in">Compare2</span>(imgSrc.data, imgMin.data, imgMax.data, imgRes.data, <span class="number">500</span>, <span class="number">400</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>#reference<br>1、<a href="https://www.agner.org/optimize/">https://www.agner.org/optimize/</a><br>2、Software optimization resources. C++ and assembly. Windows, Linux, BSD, Mac OS X</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>指针和引用</title>
    <url>/2022/06/06/%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<p>#c++ 引用与指针的异同</p>
<p>1、语法规则：指针变量存储某个实例（变量或对象）的地址，引用是某个实例的别名；<br>解引用：指针需要在前面加<em>， 引用可以直接使用；<br>2、指针变量需要分配内存，引用无法分配内存；<br>指针变量的值可以发生改变，存储不同实例的地址，引用在定义时就必须初始化，之后无法改变；<br>3、指针的变量可以为Null，作为形参时需要判空，引用不能为NUll，无需判空；<br>4、对指针进行sizeof得到指针变量的大小 ，对引用sizeof得到变量的大小；<br>5、++ 的效果不一样，指针++ 指向下一个实体的（变量或对象）的地址，而不是改变所指实体的内容；<br>6、引用的本质：<br>typename  &amp; t = typename</em> const t; 汇编层面是一致的；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span>&amp; j = i;</span><br><span class="line">	<span class="type">int</span>* ip = &amp;i;</span><br><span class="line">	j = <span class="number">2</span>;</span><br><span class="line">	*ip = <span class="number">3</span>;</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int&amp; j = i;</span><br><span class="line">00007FF6264A16D6  lea         rax,[i]  </span><br><span class="line">00007FF6264A16DA  mov         qword ptr [j],rax  </span><br><span class="line">	int* ip = &amp;i;</span><br><span class="line">00007FF6264A16DE  lea         rax,[i]  </span><br><span class="line">00007FF6264A16E2  mov         qword ptr [ip],rax  </span><br><span class="line">	j = 2;</span><br><span class="line">00007FF6264A16E6  mov         rax,qword ptr [j]  </span><br><span class="line">00007FF6264A16EA  mov         dword ptr [rax],2  </span><br><span class="line">	*ip = 3;</span><br><span class="line">00007FF6264A16F0  mov         rax,qword ptr [ip]  </span><br><span class="line">	*ip = 3;</span><br><span class="line">00007FF6264A16F4  mov         dword ptr [rax],3  </span><br><span class="line">	getchar();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>学习和能力提升</title>
    <url>/2022/06/09/%E5%AD%A6%E4%B9%A0%E5%92%8C%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[<p>IT行业技术日新月异，程序员也是一个职业焦虑非常严重的职业群体，平时工作之余也都自律和勤奋的学习浏览各种技术大咖的教程和技术贴，但是一段时间后，发现自己的实际技能并未有实质性的提高，浏览<a href="https://www.bilibili.com/video/BV1h54y117DX">韩顺平</a>总结的13误区，有所共鸣，特回顾总结一下</p>
<h2 id="自主学习时的误区"><a href="#自主学习时的误区" class="headerlink" title="自主学习时的误区"></a>自主学习时的误区</h2><h3 id="基础知识体系很重要"><a href="#基础知识体系很重要" class="headerlink" title="基础知识体系很重要"></a>基础知识体系很重要</h3><p>人们总是热衷在探讨预测未来，未来会……, 但很少会思考什么东西不会变，各种框架层出不穷，让人应接不暇，但是对一个程序员而言，底层架构，基础知识如设计模式 ，数据结构和算法，操作系统，多线程…，这是一个程序员无法避开的问题，并且近十年可能不会改变。</p>
<h3 id="关于语言"><a href="#关于语言" class="headerlink" title="关于语言"></a>关于语言</h3><p>没有最好的语言，语言有自己的特点，擅长处理不同的问题，语言仅仅是工具，是服务自己的工作和目标的，最好是精通一门语言后，再横向发展拓展自己知识面，成为为T型人才（一专多能），而且精通一门语言后，再学习其他语言也能事半功倍。</p>
<h3 id="做中学"><a href="#做中学" class="headerlink" title="做中学"></a>做中学</h3><p>计算机是一门实践科学，一方面在实践中能深度思考，加深理解，其次，对于软件开发来说，各种知识只有最终转化为生产代码，解决工作中的问题才能产生价值。</p>
<p>天天看健身视频，并不能使我们拥有强健的肌肉，同样对于编程学习只看不练，同样没效果。纸上得来终觉浅，绝知此事要躬行。</p>
<p>分享一个发生在自己身上的小例子，一次我和一个小伙伴想搭建一个调试环境，环境本身很复杂，任务文件和库文件很多而且存在各种依赖，我把对应版本软件部署后，一个组件的代码报了一个很奇快的异常，但是这个组件不是我们负责的，我们无法处理，维护这部分代码的同事暂时联系不上，但是他这版本的代码在别的环境运行的是好的，我俩感觉不是这个组件代码本身的问题，花了几个小时分析原因，各种百度，这种可能是什么问题…, 最后，把代码重新重新部署一遍，一切正常。根本原因：FTP 传输程序时发生异常，部署的软件是有问题的。<br>事实证明，各种理论分析，思考还不如试一次来的实在。</p>
<h3 id="听懂和使用"><a href="#听懂和使用" class="headerlink" title="听懂和使用"></a>听懂和使用</h3><p>听懂和使用是完全不同的层次，听懂之后必须进行一些针对性的练习，像这种专业技能，听懂只能吸收10%能量，即使这10%的能量也会随着时间进行衰减；</p>
<p>只是听属于无效学习，游泳课上，老师告诉你腿应该怎样蹬，手应该怎样放，但是还是学不会游泳，中间缺少了消化吸收的过程；</p>
<p>建议:学习一门课中，至少用自己语言总结所学到的知识，并绘制成思维导图；</p>
<h3 id="know-how-know-why"><a href="#know-how-know-why" class="headerlink" title="know how, know why"></a>know how, know why</h3><p>面对一个新事物，先整体后局部，先大致了解，后逐步深入，先知道如何使用再逐步探索为什么是这样。</p>
<h3 id="勇于分享和交流"><a href="#勇于分享和交流" class="headerlink" title="勇于分享和交流"></a>勇于分享和交流</h3><p>不要闭门造车，敢于交流分享，交流分享技术很重要，不要让自己成为井底之蛙，很多问题别人也许有特别好的解决办法，不怕嘲笑，都是过来人，越战越勇！<br>输出也是学习的一种方法。</p>
<h3 id="拥抱错误和异常"><a href="#拥抱错误和异常" class="headerlink" title="拥抱错误和异常"></a>拥抱错误和异常</h3><p>这是提高自己能力的重要方法，排除错误才会提升能力也会避免犯错。</p>
<h3 id="资源在精不在多"><a href="#资源在精不在多" class="headerlink" title="资源在精不在多"></a>资源在精不在多</h3><p>误区：热衷搜集各种资料，收藏从未停止，学习从未开始。<br>建议：选一个最好的，反复学习，真正掌握。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习概念和分类</title>
    <url>/2022/06/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E5%BF%B5%E5%92%8C%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="机器学习概念"><a href="#机器学习概念" class="headerlink" title="机器学习概念"></a>机器学习概念</h3><blockquote>
<ul>
<li>机器学习是一种从大量的数据中生成规则、发现模型，来帮助我们预测、判断、分组和解决问题的技术。</li>
<li>传统程序是程序员来定义函数，而在机器学习中是机器训练出函数。机器学习的本质特征，就是从数据中发现规则。</li>
<li>我们做机器学习项目，就是要选定一个算法，然后用数据训练机器，找到一族函数中最适合的那一个，形成模型。</li>
</ul>
</blockquote>
<h3 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h3><ul>
<li>训练数据集全部有标签，叫监督学习（supervised learning）；如决策树，SVM， 贝叶斯</li>
<li>训练数据集没有标签，叫做无监督学习（unsupervised learning）；如聚类，降维等。</li>
<li>在训练数据集中，有的数据有标签，有的数据没有标签，我们叫做半监督学习（semi-supervised learning）。</li>
<li>强化学习：不断地根据环境的反馈信息进行试错学习，进而调整优化自身的状态信息，其目的是为了找到最优策略、或者找到最大奖励的过程。（Reinforcement Learning）<br>不一定每次都明确地选择最优动作，而是要在探索（未知领域）和利用（当前知识）之间找到平衡。它反复试错、不断收集反馈，收集可供自己学习的信号，每经过一个训练周期，都变得比原来强一点，经过亿万次的训练能变得非常强大。</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 深拷贝</title>
    <url>/2022/06/14/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%92%8C%E6%8B%B7%E8%B4%9D%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">    A* p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() </span><br><span class="line">    &#123; </span><br><span class="line">        p = <span class="keyword">new</span> A;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">B</span>() </span><br><span class="line">    &#123; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">B</span>(<span class="type">const</span> B&amp; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;b)</span><br><span class="line">        &#123;</span><br><span class="line">            p = <span class="keyword">new</span> A;</span><br><span class="line">            p-&gt;i = b.p-&gt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;copy construct =&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    B&amp; <span class="keyword">operator</span>=(<span class="type">const</span> B&amp; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">delete</span> p;</span><br><span class="line">                p = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = <span class="keyword">new</span> A;</span><br><span class="line">            p-&gt;i = b.p-&gt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;operator =&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">say</span><span class="params">(B b)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    <span class="built_in">say</span>(b);</span><br><span class="line">    <span class="comment">//B bb = b; //copy 构造</span></span><br><span class="line">    B bb;       <span class="comment">//copy 赋值</span></span><br><span class="line">    bb = b;     <span class="comment">//copy 赋值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="string-类"><a href="#string-类" class="headerlink" title="string 类"></a>string 类</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>：</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">    ~<span class="built_in">String</span>(<span class="type">void</span>);</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; other);</span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; other);</span><br><span class="line">    <span class="type">char</span>* m_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> String&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(other.m_data);</span><br><span class="line">    m_data = <span class="keyword">new</span> <span class="type">char</span>[length+<span class="number">1</span>];<span class="comment">//判空</span></span><br><span class="line">    <span class="built_in">strcpy</span>(m_data, other.m_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//检查自我赋值</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;other)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放已有内存</span></span><br><span class="line">    <span class="keyword">delete</span> [] m_data;</span><br><span class="line">    <span class="comment">//分配内存，复制内容 </span></span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(other.m_data);</span><br><span class="line">    m_data = <span class="keyword">new</span> <span class="type">char</span>[length+<span class="number">1</span>];<span class="comment">//判空</span></span><br><span class="line">    <span class="built_in">strcpy</span>(m_data, other.m_data);</span><br><span class="line">    <span class="comment">//返回本对象引用</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::~<span class="built_in">String</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] m_data; <span class="comment">//如是内置类型[] 可省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">        m_data[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;     <span class="comment">// 写成*m_data = &#x27;\0&#x27; 更好</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str)+<span class="number">1</span>]; <span class="comment">//需判空</span></span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>系统架构</title>
    <url>/2022/06/10/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h3 id="多角度理解软件架构"><a href="#多角度理解软件架构" class="headerlink" title="多角度理解软件架构"></a>多角度理解软件架构</h3><ol>
<li>程序员：基于何种框架编写哪些类？</li>
<li>PL：模块划分和接口定义</li>
<li>SE: 业务领域对象关系的建模</li>
</ol>
<h3 id="系统描述维度"><a href="#系统描述维度" class="headerlink" title="系统描述维度"></a>系统描述维度</h3><ol>
<li>对外接口约定</li>
<li>作用域控制</li>
<li>组件命名</li>
<li>计算机系统架构</li>
<li>执行架构：驱动器</li>
<li>运行目录架构</li>
<li>代码目录架构</li>
<li>项目编译架构</li>
<li>数据管理架构</li>
</ol>
]]></content>
      <categories>
        <category>软件设计</category>
      </categories>
  </entry>
  <entry>
    <title>编码练习-string</title>
    <url>/2022/06/11/%E7%BC%96%E7%A0%81%E7%BB%83%E4%B9%A0-string/</url>
    <content><![CDATA[<h3 id="判定字符是否唯一"><a href="#判定字符是否唯一" class="headerlink" title="判定字符是否唯一"></a>判定字符是否唯一</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isUnique</span><span class="params">(string astr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mask = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> cr : astr)&#123;</span><br><span class="line">            step = cr - <span class="built_in">int</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(mask &amp; (<span class="number">1</span>&lt;&lt;step))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                mask |= (<span class="number">1</span>&lt;&lt;step);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isUnique</span><span class="params">(string astr)</span> </span>&#123;       </span><br><span class="line">        set&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> cr : astr)&#123;</span><br><span class="line">            s.<span class="built_in">insert</span>(cr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> astr.<span class="built_in">size</span>() == s.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="判定是否互为字符重排"><a href="#判定是否互为字符重排" class="headerlink" title="判定是否互为字符重排"></a>判定是否互为字符重排</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">CheckPermutation</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(s1.<span class="built_in">length</span>() != s2.<span class="built_in">length</span>())</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">sort</span>(s1.<span class="built_in">begin</span>(), s1.<span class="built_in">end</span>());</span><br><span class="line">      <span class="built_in">sort</span>(s2.<span class="built_in">begin</span>(), s2.<span class="built_in">end</span>());</span><br><span class="line">      <span class="keyword">return</span>  s1 == s2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">时间复杂度：<span class="built_in">O</span>(nlogn)，其中 n 为s1的长度。排序的时间复杂度为 <span class="built_in">O</span>(n\log n)<span class="built_in">O</span>(nlogn)，比较两个字符串是否相等时间复杂度为 <span class="built_in">O</span>(n)，因此总体时间复杂度为 <span class="built_in">O</span>(nlogn+n)=<span class="built_in">O</span>(nlogn)。</span><br><span class="line"></span><br><span class="line">空间复杂度：<span class="built_in">O</span>(logn)。排序需要<span class="built_in">O</span>(logn) 的空间复杂度。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> <span class="built_in">CheckPermutation</span>(string s1, string s2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.<span class="built_in">length</span>() != s2.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">table</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ch: s1) &#123;</span><br><span class="line">            table[ch - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ch: s2) &#123;</span><br><span class="line">            table[ch - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span> (table[ch - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">时间复杂度：<span class="built_in">O</span>(n)，其中 nn 为 s <span class="number">1</span>的长度。</span><br><span class="line">空间复杂度：<span class="built_in">O</span>(S)，其中 S 为字符集大小，此处 S=<span class="number">26</span>。</span><br><span class="line"></span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/check-permutation-lcci/solution/pan-ding-shi-fou-hu-wei-zi-fu-zhong-pai-dmkmc/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="URL化。编写一种方法，将字符串中的空格全部替换为-20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）"><a href="#URL化。编写一种方法，将字符串中的空格全部替换为-20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）" class="headerlink" title="URL化。编写一种方法，将字符串中的空格全部替换为%20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）"></a>URL化。编写一种方法，将字符串中的空格全部替换为%20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpaces</span><span class="params">(string S, <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">        string s1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">0</span>; len &lt; length; len++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(S[len] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s1+=<span class="string">&quot;%20&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                s1+=S[len];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编码练习</category>
      </categories>
  </entry>
  <entry>
    <title>虚拟机安装配置</title>
    <url>/2022/06/10/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.bilibili.com/video/BV1Sv411r7vd?p=6&vd_source=40e74b19984b523314dc020712a38717">安装视频链接</a></p>
<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p><a href="https://wenku.baidu.com/view/fc21220d4873f242336c1eb91a37f111f1850dd0.html">配置文档链接</a></p>
<h3 id="虚拟机clone，迁移和删除"><a href="#虚拟机clone，迁移和删除" class="headerlink" title="虚拟机clone，迁移和删除"></a>虚拟机clone，迁移和删除</h3><p>一切皆文件；<br>删除时注意，通过VMware删除只是删除指向，删除文件才能彻底删除</p>
<h3 id="虚拟机快照和系统恢复"><a href="#虚拟机快照和系统恢复" class="headerlink" title="虚拟机快照和系统恢复"></a>虚拟机快照和系统恢复</h3><h3 id="安装VM-tools"><a href="#安装VM-tools" class="headerlink" title="安装VM tools"></a>安装VM tools</h3><p>Windows下可更好的管理可共享文件夹<br>对于WSL2，本地磁盘均挂载在 WSL 系统中的 /mnt 文件夹下，可以直接访问。<br>对于Windows10 系统，\wsl$ 可访问ubuntu系统下问件</p>
<h3 id="ubuntu-软件安装配置"><a href="#ubuntu-软件安装配置" class="headerlink" title="ubuntu 软件安装配置"></a>ubuntu 软件安装配置</h3><p>sudo  apt-get update 更新源<br>sudo apt-install package 安装包<br>sudo apt-get remove package 删除包<br>sudo apt-cache show package 获取包的相关信息<br>sudo apt-get source package 下载该包的源代码</p>
<h3 id="ubuntu-安装远程登陆"><a href="#ubuntu-安装远程登陆" class="headerlink" title="ubuntu 安装远程登陆"></a>ubuntu 安装远程登陆</h3><p>centos 默认安装ssh,ubuntu 需要自己安装<br>sudo apt-get install openssh-server<br>service sshd restart </p>
]]></content>
      <categories>
        <category>Linux 系统</category>
      </categories>
      <tags>
        <tag>安装配置</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计原则</title>
    <url>/2022/06/06/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h1 id="单一职责原则（Single-responsibility-principle，SRP）"><a href="#单一职责原则（Single-responsibility-principle，SRP）" class="headerlink" title="单一职责原则（Single responsibility principle，SRP）"></a>单一职责原则（Single responsibility principle，SRP）</h1><p>一个类应该仅有一个引起它变化的原因，变化的方向表明了类的责任；</p>
<p>当一个类存在不同维度变化，即承担了不同角色，则需要根据变化关注点进行拆分；</p>
<h1 id="开放封闭原则（Open–closed-principle，OCP）"><a href="#开放封闭原则（Open–closed-principle，OCP）" class="headerlink" title="开放封闭原则（Open–closed principle，OCP）"></a>开放封闭原则（Open–closed principle，OCP）</h1><p>软件实体（类、模块、函数）应该对扩展开放，对修改封闭；<br>简单地说，就是不要修改代码，新的功能要用新的代码实现。</p>
<h1 id="Liskov-替换原则（Liskov-substitution-principle，LSP）"><a href="#Liskov-替换原则（Liskov-substitution-principle，LSP）" class="headerlink" title="Liskov 替换原则（Liskov substitution principle，LSP）"></a>Liskov 替换原则（Liskov substitution principle，LSP）</h1><p>子类必须能够继承他们的基类，is_a；<br>继承表达类型抽象，有统一接口；</p>
<h1 id="接口隔离原则（Interface-segregation-principle，ISP）"><a href="#接口隔离原则（Interface-segregation-principle，ISP）" class="headerlink" title="接口隔离原则（Interface segregation principle，ISP）"></a>接口隔离原则（Interface segregation principle，ISP）</h1><p>No client should be forced to depend on methods it does not use.<br>不应强迫客户依赖他们不需要的方法，<br>接口应该小而完备</p>
<p>每个使用者面对的都是一种角色接口， 接口设计时应该考虑不同的角色；</p>
<h1 id="依赖倒置原则（Dependency-inversion-principle，DIP）"><a href="#依赖倒置原则（Dependency-inversion-principle，DIP）" class="headerlink" title="依赖倒置原则（Dependency inversion principle，DIP）"></a>依赖倒置原则（Dependency inversion principle，DIP）</h1><p>High-level modules should not depend on low-level modules. Both should depend on abstractions.<br>高层模块（稳定）不应该依赖底层模块（变化），二者都应该依赖于抽象（稳定）<br>Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.<br>抽象（稳定）不应该依赖实现细节（变化），实现细节应该依赖于抽象（稳定）</p>
<p>结构化编程解决问题的思路是自上而下地进行功能分解，这种解决问题的思路很自然地就会延续到很多人的编程习惯中。按照分解的结果，进行组合。这样势必会造成高层模块会依赖于低层模块。</p>
<p>所谓倒置，让高层模块不再依赖于低层模块。计算机科学中的所有问题都可以通过引入一个间接层得到解决。All problems in computer science can be solved by another level of indirection—— David Wheeler是的，引入一个间接层。这个间接层指的就是 DIP 里所说的抽象。</p>
<p>具体编码：<br>1、任何类都不应该继承自具体类<br>2、任何变量类型都不应该时具体类<br>3、任何子类都不能改写父类已经实现的方法</p>
<h1 id="面向接口编程而非面向实现编程"><a href="#面向接口编程而非面向实现编程" class="headerlink" title="面向接口编程而非面向实现编程"></a>面向接口编程而非面向实现编程</h1><p>不将变量类型声明为某个特定具体类，而是声明为某个接口。<br>客户程序无需知道对象的具体类型，只需知道对象所具有的接口；<br>减少系统中各部分的依赖关系，从而实现高内聚，松耦合类型设计方案</p>
<h1 id="封装变化点"><a href="#封装变化点" class="headerlink" title="封装变化点"></a>封装变化点</h1><p>使用封装来创建对象之间的分界层，使设计者可以在分界层的一侧进行修改而不会对另一侧产生不良影响，从而实现层次间的松耦合；</p>
<h1 id="优先使用对象组合而非类继承"><a href="#优先使用对象组合而非类继承" class="headerlink" title="优先使用对象组合而非类继承"></a>优先使用对象组合而非类继承</h1><p>类继承通常为白箱复用，对象组合为黑箱复用，类继承在某种程度上破环了封装性，子类父类耦合度高，而对象组合则只要求被组合的对象具有良好的接口定义，耦合度低；</p>
<p>#reference<br>李建忠设计模式</p>
]]></content>
      <categories>
        <category>软件设计</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>静态链接与动态链接</title>
    <url>/2022/06/30/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//add.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//add.c</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.h&quot;</span></span></span><br><span class="line">  <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> c = add(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a+b = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="静态编译"><a href="#静态编译" class="headerlink" title="静态编译"></a>静态编译</h3><p>编译gcc -o test add.c main.c<br>反汇编objdump -d test<br>0x64a-0x683 = ff ff ff c7</p>
<p>缺点：</p>
<ol>
<li>进程间不能共享二进制代码；</li>
<li>软件升级维护困难，静态库实现改变需要重新编译</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">000000000000064a &lt;add&gt;:</span><br><span class="line"> 64a:   55                      push   %rbp</span><br><span class="line"> 64b:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 64e:   89 7d fc                mov    %edi,-0x4(%rbp)</span><br><span class="line"> 651:   89 75 f8                mov    %esi,-0x8(%rbp)</span><br><span class="line"> 654:   8b 55 fc                mov    -0x4(%rbp),%edx</span><br><span class="line"> 657:   8b 45 f8                mov    -0x8(%rbp),%eax</span><br><span class="line"> 65a:   01 d0                   add    %edx,%eax</span><br><span class="line"> 65c:   5d                      pop    %rbp</span><br><span class="line"> 65d:   c3                      retq</span><br><span class="line"></span><br><span class="line">000000000000065e &lt;main&gt;:</span><br><span class="line"> 65e:   55                      push   %rbp</span><br><span class="line"> 65f:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 662:   48 83 ec 10             sub    $0x10,%rsp</span><br><span class="line"> 666:   c7 45 f4 0a 00 00 00    movl   $0xa,-0xc(%rbp)</span><br><span class="line"> 66d:   c7 45 f8 14 00 00 00    movl   $0x14,-0x8(%rbp)</span><br><span class="line"> 674:   8b 55 f8                mov    -0x8(%rbp),%edx</span><br><span class="line"> 677:   8b 45 f4                mov    -0xc(%rbp),%eax</span><br><span class="line"> 67a:   89 d6                   mov    %edx,%esi</span><br><span class="line"> 67c:   89 c7                   mov    %eax,%edi</span><br><span class="line"> 67e:   e8 c7 ff ff ff          callq  64a &lt;add&gt;</span><br><span class="line"> 683:   89 45 fc                mov    %eax,-0x4(%rbp)</span><br><span class="line"> 686:   8b 45 fc                mov    -0x4(%rbp),%eax</span><br><span class="line"> 689:   89 c6                   mov    %eax,%esi</span><br><span class="line"> 68b:   48 8d 3d 92 00 00 00    lea    0x92(%rip),%rdi        # 724 &lt;_IO_stdin_used+0x4&gt;</span><br><span class="line"> 692:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line"> 697:   e8 84 fe ff ff          callq  520 &lt;printf@plt&gt;</span><br><span class="line"> 69c:   90                      nop</span><br><span class="line"> 69d:   c9                      leaveq</span><br><span class="line"> 69e:   c3                      retq</span><br><span class="line"> 69f:   90                      nop</span><br></pre></td></tr></table></figure>

<h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>动态链接缺点:(1)系统存在多个版本动态库难以管理，<br>            (2)性能下降，启动时解析符号和cache miss<br>            注意编译命令顺序，链接依赖库放到最后，<br>            注意环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ ls</span><br><span class="line">add.c  add.h  main.c</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ gcc -o libadd.so add.c -shared -fPIC</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ ls</span><br><span class="line">add.c  add.h  libadd.so  main.c</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ gcc -o test -L. -ladd main.c</span><br><span class="line">/tmp/ccOFrBDv.o: In function `main&#x27;:</span><br><span class="line">main.c:(.text+0x21): undefined reference to `add&#x27;</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ gcc -o test main.c -ladd -L.</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ ls</span><br><span class="line">add.c  add.h  libadd.so  main.c  test</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ ./test</span><br><span class="line">./test: error while loading shared libraries: libadd.so: cannot open shared object file: No such file or directory</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ ./test</span><br><span class="line">a+b = 30</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ objdump -d libadd.so</span><br><span class="line"></span><br><span class="line">libadd.so:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .init:</span><br><span class="line"></span><br><span class="line">0000000000000460 &lt;_init&gt;:</span><br><span class="line"> 460:   48 83 ec 08             sub    $0x8,%rsp</span><br><span class="line"> 464:   48 8b 05 8d 0b 20 00    mov    0x200b8d(%rip),%rax        # 200ff8 &lt;__gmon_start__&gt;</span><br><span class="line"> 46b:   48 85 c0                test   %rax,%rax</span><br><span class="line"> 46e:   74 02                   je     472 &lt;_init+0x12&gt;</span><br><span class="line"> 470:   ff d0                   callq  *%rax</span><br><span class="line"> 472:   48 83 c4 08             add    $0x8,%rsp</span><br><span class="line"> 476:   c3                      retq</span><br><span class="line"></span><br><span class="line">Disassembly of section .plt:</span><br><span class="line"></span><br><span class="line">0000000000000480 &lt;.plt&gt;:</span><br><span class="line"> 480:   ff 35 82 0b 20 00       pushq  0x200b82(%rip)        # 201008 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;</span><br><span class="line"> 486:   ff 25 84 0b 20 00       jmpq   *0x200b84(%rip)        # 201010 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;</span><br><span class="line"> 48c:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class="line"></span><br><span class="line">Disassembly of section .plt.got:</span><br><span class="line"></span><br><span class="line">0000000000000490 &lt;__cxa_finalize@plt&gt;:</span><br><span class="line"> 490:   ff 25 4a 0b 20 00       jmpq   *0x200b4a(%rip)        # 200fe0 &lt;__cxa_finalize&gt;</span><br><span class="line"> 496:   66 90                   xchg   %ax,%ax</span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000000004a0 &lt;deregister_tm_clones&gt;:</span><br><span class="line"> 4a0:   48 8d 3d 79 0b 20 00    lea    0x200b79(%rip),%rdi        # 201020 &lt;_edata&gt;</span><br><span class="line"> 4a7:   55                      push   %rbp</span><br><span class="line"> 4a8:   48 8d 05 71 0b 20 00    lea    0x200b71(%rip),%rax        # 201020 &lt;_edata&gt;</span><br><span class="line"> 4af:   48 39 f8                cmp    %rdi,%rax</span><br><span class="line"> 4b2:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 4b5:   74 19                   je     4d0 &lt;deregister_tm_clones+0x30&gt;</span><br><span class="line"> 4b7:   48 8b 05 32 0b 20 00    mov    0x200b32(%rip),%rax        # 200ff0 &lt;_ITM_deregisterTMCloneTable&gt;</span><br><span class="line"> 4be:   48 85 c0                test   %rax,%rax</span><br><span class="line"> 4c1:   74 0d                   je     4d0 &lt;deregister_tm_clones+0x30&gt;</span><br><span class="line"> 4c3:   5d                      pop    %rbp</span><br><span class="line"> 4c4:   ff e0                   jmpq   *%rax</span><br><span class="line"> 4c6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 4cd:   00 00 00</span><br><span class="line"> 4d0:   5d                      pop    %rbp</span><br><span class="line"> 4d1:   c3                      retq</span><br><span class="line"> 4d2:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class="line"> 4d6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 4dd:   00 00 00</span><br><span class="line"></span><br><span class="line">00000000000004e0 &lt;register_tm_clones&gt;:</span><br><span class="line"> 4e0:   48 8d 3d 39 0b 20 00    lea    0x200b39(%rip),%rdi        # 201020 &lt;_edata&gt;</span><br><span class="line"> 4e7:   48 8d 35 32 0b 20 00    lea    0x200b32(%rip),%rsi        # 201020 &lt;_edata&gt;</span><br><span class="line"> 4ee:   55                      push   %rbp</span><br><span class="line"> 4ef:   48 29 fe                sub    %rdi,%rsi</span><br><span class="line"> 4f2:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 4f5:   48 c1 fe 03             sar    $0x3,%rsi</span><br><span class="line"> 4f9:   48 89 f0                mov    %rsi,%rax</span><br><span class="line"> 4fc:   48 c1 e8 3f             shr    $0x3f,%rax</span><br><span class="line"> 500:   48 01 c6                add    %rax,%rsi</span><br><span class="line"> 503:   48 d1 fe                sar    %rsi</span><br><span class="line"> 506:   74 18                   je     520 &lt;register_tm_clones+0x40&gt;</span><br><span class="line"> 508:   48 8b 05 d9 0a 20 00    mov    0x200ad9(%rip),%rax        # 200fe8 &lt;_ITM_registerTMCloneTable&gt;</span><br><span class="line"> 50f:   48 85 c0                test   %rax,%rax</span><br><span class="line"> 512:   74 0c                   je     520 &lt;register_tm_clones+0x40&gt;</span><br><span class="line"> 514:   5d                      pop    %rbp</span><br><span class="line"> 515:   ff e0                   jmpq   *%rax</span><br><span class="line"> 517:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)</span><br><span class="line"> 51e:   00 00</span><br><span class="line"> 520:   5d                      pop    %rbp</span><br><span class="line"> 521:   c3                      retq</span><br><span class="line"> 522:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class="line"> 526:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 52d:   00 00 00</span><br><span class="line"></span><br><span class="line">0000000000000530 &lt;__do_global_dtors_aux&gt;:</span><br><span class="line"> 530:   80 3d e9 0a 20 00 00    cmpb   $0x0,0x200ae9(%rip)        # 201020 &lt;_edata&gt;</span><br><span class="line"> 537:   75 2f                   jne    568 &lt;__do_global_dtors_aux+0x38&gt;</span><br><span class="line"> 539:   48 83 3d 9f 0a 20 00    cmpq   $0x0,0x200a9f(%rip)        # 200fe0 &lt;__cxa_finalize&gt;</span><br><span class="line"> 540:   00</span><br><span class="line"> 541:   55                      push   %rbp</span><br><span class="line"> 542:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 545:   74 0c                   je     553 &lt;__do_global_dtors_aux+0x23&gt;</span><br><span class="line"> 547:   48 8b 3d ca 0a 20 00    mov    0x200aca(%rip),%rdi        # 201018 &lt;__dso_handle&gt;</span><br><span class="line"> 54e:   e8 3d ff ff ff          callq  490 &lt;__cxa_finalize@plt&gt;</span><br><span class="line"> 553:   e8 48 ff ff ff          callq  4a0 &lt;deregister_tm_clones&gt;</span><br><span class="line"> 558:   c6 05 c1 0a 20 00 01    movb   $0x1,0x200ac1(%rip)        # 201020 &lt;_edata&gt;</span><br><span class="line"> 55f:   5d                      pop    %rbp</span><br><span class="line"> 560:   c3                      retq</span><br><span class="line"> 561:   0f 1f 80 00 00 00 00    nopl   0x0(%rax)</span><br><span class="line"> 568:   f3 c3                   repz retq</span><br><span class="line"> 56a:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000000570 &lt;frame_dummy&gt;:</span><br><span class="line"> 570:   55                      push   %rbp</span><br><span class="line"> 571:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 574:   5d                      pop    %rbp</span><br><span class="line"> 575:   e9 66 ff ff ff          jmpq   4e0 &lt;register_tm_clones&gt;</span><br><span class="line"></span><br><span class="line">000000000000057a &lt;add&gt;:</span><br><span class="line"> 57a:   55                      push   %rbp</span><br><span class="line"> 57b:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 57e:   89 7d fc                mov    %edi,-0x4(%rbp)</span><br><span class="line"> 581:   89 75 f8                mov    %esi,-0x8(%rbp)</span><br><span class="line"> 584:   8b 55 fc                mov    -0x4(%rbp),%edx</span><br><span class="line"> 587:   8b 45 f8                mov    -0x8(%rbp),%eax</span><br><span class="line"> 58a:   01 d0                   add    %edx,%eax</span><br><span class="line"> 58c:   5d                      pop    %rbp</span><br><span class="line"> 58d:   c3                      retq</span><br><span class="line"></span><br><span class="line">Disassembly of section .fini:</span><br><span class="line"></span><br><span class="line">0000000000000590 &lt;_fini&gt;:</span><br><span class="line"> 590:   48 83 ec 08             sub    $0x8,%rsp</span><br><span class="line"> 594:   48 83 c4 08             add    $0x8,%rsp</span><br><span class="line"> 598:   c3                      retq</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$ objdump -d test</span><br><span class="line"></span><br><span class="line">test:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .init:</span><br><span class="line"></span><br><span class="line">00000000000005e8 &lt;_init&gt;:</span><br><span class="line"> 5e8:   48 83 ec 08             sub    $0x8,%rsp</span><br><span class="line"> 5ec:   48 8b 05 f5 09 20 00    mov    0x2009f5(%rip),%rax        # 200fe8 &lt;__gmon_start__&gt;</span><br><span class="line"> 5f3:   48 85 c0                test   %rax,%rax</span><br><span class="line"> 5f6:   74 02                   je     5fa &lt;_init+0x12&gt;</span><br><span class="line"> 5f8:   ff d0                   callq  *%rax</span><br><span class="line"> 5fa:   48 83 c4 08             add    $0x8,%rsp</span><br><span class="line"> 5fe:   c3                      retq</span><br><span class="line"></span><br><span class="line">Disassembly of section .plt:</span><br><span class="line"></span><br><span class="line">0000000000000600 &lt;.plt&gt;:</span><br><span class="line"> 600:   ff 35 b2 09 20 00       pushq  0x2009b2(%rip)        # 200fb8 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;</span><br><span class="line"> 606:   ff 25 b4 09 20 00       jmpq   *0x2009b4(%rip)        # 200fc0 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;</span><br><span class="line"> 60c:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class="line"></span><br><span class="line">0000000000000610 &lt;add@plt&gt;:</span><br><span class="line"> 610:   ff 25 b2 09 20 00       jmpq   *0x2009b2(%rip)        # 200fc8 &lt;add&gt;</span><br><span class="line"> 616:   68 00 00 00 00          pushq  $0x0</span><br><span class="line"> 61b:   e9 e0 ff ff ff          jmpq   600 &lt;.plt&gt;</span><br><span class="line"></span><br><span class="line">0000000000000620 &lt;printf@plt&gt;:</span><br><span class="line"> 620:   ff 25 aa 09 20 00       jmpq   *0x2009aa(%rip)        # 200fd0 &lt;printf@GLIBC_2.2.5&gt;</span><br><span class="line"> 626:   68 01 00 00 00          pushq  $0x1</span><br><span class="line"> 62b:   e9 d0 ff ff ff          jmpq   600 &lt;.plt&gt;</span><br><span class="line"></span><br><span class="line">Disassembly of section .plt.got:</span><br><span class="line"></span><br><span class="line">0000000000000630 &lt;__cxa_finalize@plt&gt;:</span><br><span class="line"> 630:   ff 25 c2 09 20 00       jmpq   *0x2009c2(%rip)        # 200ff8 &lt;__cxa_finalize@GLIBC_2.2.5&gt;</span><br><span class="line"> 636:   66 90                   xchg   %ax,%ax</span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000000640 &lt;_start&gt;:</span><br><span class="line"> 640:   31 ed                   xor    %ebp,%ebp</span><br><span class="line"> 642:   49 89 d1                mov    %rdx,%r9</span><br><span class="line"> 645:   5e                      pop    %rsi</span><br><span class="line"> 646:   48 89 e2                mov    %rsp,%rdx</span><br><span class="line"> 649:   48 83 e4 f0             and    $0xfffffffffffffff0,%rsp</span><br><span class="line"> 64d:   50                      push   %rax</span><br><span class="line"> 64e:   54                      push   %rsp</span><br><span class="line"> 64f:   4c 8d 05 aa 01 00 00    lea    0x1aa(%rip),%r8        # 800 &lt;__libc_csu_fini&gt;</span><br><span class="line"> 656:   48 8d 0d 33 01 00 00    lea    0x133(%rip),%rcx        # 790 &lt;__libc_csu_init&gt;</span><br><span class="line"> 65d:   48 8d 3d e6 00 00 00    lea    0xe6(%rip),%rdi        # 74a &lt;main&gt;</span><br><span class="line"> 664:   ff 15 76 09 20 00       callq  *0x200976(%rip)        # 200fe0 &lt;__libc_start_main@GLIBC_2.2.5&gt;</span><br><span class="line"> 66a:   f4                      hlt</span><br><span class="line"> 66b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000000670 &lt;deregister_tm_clones&gt;:</span><br><span class="line"> 670:   48 8d 3d 99 09 20 00    lea    0x200999(%rip),%rdi        # 201010 &lt;__TMC_END__&gt;</span><br><span class="line"> 677:   55                      push   %rbp</span><br><span class="line"> 678:   48 8d 05 91 09 20 00    lea    0x200991(%rip),%rax        # 201010 &lt;__TMC_END__&gt;</span><br><span class="line"> 67f:   48 39 f8                cmp    %rdi,%rax</span><br><span class="line"> 682:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 685:   74 19                   je     6a0 &lt;deregister_tm_clones+0x30&gt;</span><br><span class="line"> 687:   48 8b 05 4a 09 20 00    mov    0x20094a(%rip),%rax        # 200fd8 &lt;_ITM_deregisterTMCloneTable&gt;</span><br><span class="line"> 68e:   48 85 c0                test   %rax,%rax</span><br><span class="line"> 691:   74 0d                   je     6a0 &lt;deregister_tm_clones+0x30&gt;</span><br><span class="line"> 693:   5d                      pop    %rbp</span><br><span class="line"> 694:   ff e0                   jmpq   *%rax</span><br><span class="line"> 696:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 69d:   00 00 00</span><br><span class="line"> 6a0:   5d                      pop    %rbp</span><br><span class="line"> 6a1:   c3                      retq</span><br><span class="line"> 6a2:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class="line"> 6a6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 6ad:   00 00 00</span><br><span class="line"></span><br><span class="line">00000000000006b0 &lt;register_tm_clones&gt;:</span><br><span class="line"> 6b0:   48 8d 3d 59 09 20 00    lea    0x200959(%rip),%rdi        # 201010 &lt;__TMC_END__&gt;</span><br><span class="line"> 6b7:   48 8d 35 52 09 20 00    lea    0x200952(%rip),%rsi        # 201010 &lt;__TMC_END__&gt;</span><br><span class="line"> 6be:   55                      push   %rbp</span><br><span class="line"> 6bf:   48 29 fe                sub    %rdi,%rsi</span><br><span class="line"> 6c2:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 6c5:   48 c1 fe 03             sar    $0x3,%rsi</span><br><span class="line"> 6c9:   48 89 f0                mov    %rsi,%rax</span><br><span class="line"> 6cc:   48 c1 e8 3f             shr    $0x3f,%rax</span><br><span class="line"> 6d0:   48 01 c6                add    %rax,%rsi</span><br><span class="line"> 6d3:   48 d1 fe                sar    %rsi</span><br><span class="line"> 6d6:   74 18                   je     6f0 &lt;register_tm_clones+0x40&gt;</span><br><span class="line"> 6d8:   48 8b 05 11 09 20 00    mov    0x200911(%rip),%rax        # 200ff0 &lt;_ITM_registerTMCloneTable&gt;</span><br><span class="line"> 6df:   48 85 c0                test   %rax,%rax</span><br><span class="line"> 6e2:   74 0c                   je     6f0 &lt;register_tm_clones+0x40&gt;</span><br><span class="line"> 6e4:   5d                      pop    %rbp</span><br><span class="line"> 6e5:   ff e0                   jmpq   *%rax</span><br><span class="line"> 6e7:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)</span><br><span class="line"> 6ee:   00 00</span><br><span class="line"> 6f0:   5d                      pop    %rbp</span><br><span class="line"> 6f1:   c3                      retq</span><br><span class="line"> 6f2:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class="line"> 6f6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 6fd:   00 00 00</span><br><span class="line"></span><br><span class="line">0000000000000700 &lt;__do_global_dtors_aux&gt;:</span><br><span class="line"> 700:   80 3d 09 09 20 00 00    cmpb   $0x0,0x200909(%rip)        # 201010 &lt;__TMC_END__&gt;</span><br><span class="line"> 707:   75 2f                   jne    738 &lt;__do_global_dtors_aux+0x38&gt;</span><br><span class="line"> 709:   48 83 3d e7 08 20 00    cmpq   $0x0,0x2008e7(%rip)        # 200ff8 &lt;__cxa_finalize@GLIBC_2.2.5&gt;</span><br><span class="line"> 710:   00</span><br><span class="line"> 711:   55                      push   %rbp</span><br><span class="line"> 712:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 715:   74 0c                   je     723 &lt;__do_global_dtors_aux+0x23&gt;</span><br><span class="line"> 717:   48 8b 3d ea 08 20 00    mov    0x2008ea(%rip),%rdi        # 201008 &lt;__dso_handle&gt;</span><br><span class="line"> 71e:   e8 0d ff ff ff          callq  630 &lt;__cxa_finalize@plt&gt;</span><br><span class="line"> 723:   e8 48 ff ff ff          callq  670 &lt;deregister_tm_clones&gt;</span><br><span class="line"> 728:   c6 05 e1 08 20 00 01    movb   $0x1,0x2008e1(%rip)        # 201010 &lt;__TMC_END__&gt;</span><br><span class="line"> 72f:   5d                      pop    %rbp</span><br><span class="line"> 730:   c3                      retq</span><br><span class="line"> 731:   0f 1f 80 00 00 00 00    nopl   0x0(%rax)</span><br><span class="line"> 738:   f3 c3                   repz retq</span><br><span class="line"> 73a:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000000740 &lt;frame_dummy&gt;:</span><br><span class="line"> 740:   55                      push   %rbp</span><br><span class="line"> 741:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 744:   5d                      pop    %rbp</span><br><span class="line"> 745:   e9 66 ff ff ff          jmpq   6b0 &lt;register_tm_clones&gt;</span><br><span class="line"></span><br><span class="line">000000000000074a &lt;main&gt;:</span><br><span class="line"> 74a:   55                      push   %rbp</span><br><span class="line"> 74b:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line"> 74e:   48 83 ec 10             sub    $0x10,%rsp</span><br><span class="line"> 752:   c7 45 f4 0a 00 00 00    movl   $0xa,-0xc(%rbp)</span><br><span class="line"> 759:   c7 45 f8 14 00 00 00    movl   $0x14,-0x8(%rbp)</span><br><span class="line"> 760:   8b 55 f8                mov    -0x8(%rbp),%edx</span><br><span class="line"> 763:   8b 45 f4                mov    -0xc(%rbp),%eax</span><br><span class="line"> 766:   89 d6                   mov    %edx,%esi</span><br><span class="line"> 768:   89 c7                   mov    %eax,%edi</span><br><span class="line"> 76a:   e8 a1 fe ff ff          callq  610 &lt;add@plt&gt;</span><br><span class="line"> 76f:   89 45 fc                mov    %eax,-0x4(%rbp)</span><br><span class="line"> 772:   8b 45 fc                mov    -0x4(%rbp),%eax</span><br><span class="line"> 775:   89 c6                   mov    %eax,%esi</span><br><span class="line"> 777:   48 8d 3d 96 00 00 00    lea    0x96(%rip),%rdi        # 814 &lt;_IO_stdin_used+0x4&gt;</span><br><span class="line"> 77e:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line"> 783:   e8 98 fe ff ff          callq  620 &lt;printf@plt&gt;</span><br><span class="line"> 788:   90                      nop</span><br><span class="line"> 789:   c9                      leaveq</span><br><span class="line"> 78a:   c3                      retq</span><br><span class="line"> 78b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000000790 &lt;__libc_csu_init&gt;:</span><br><span class="line"> 790:   41 57                   push   %r15</span><br><span class="line"> 792:   41 56                   push   %r14</span><br><span class="line"> 794:   49 89 d7                mov    %rdx,%r15</span><br><span class="line"> 797:   41 55                   push   %r13</span><br><span class="line"> 799:   41 54                   push   %r12</span><br><span class="line"> 79b:   4c 8d 25 fe 05 20 00    lea    0x2005fe(%rip),%r12        # 200da0 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class="line"> 7a2:   55                      push   %rbp</span><br><span class="line"> 7a3:   48 8d 2d fe 05 20 00    lea    0x2005fe(%rip),%rbp        # 200da8 &lt;__init_array_end&gt;</span><br><span class="line"> 7aa:   53                      push   %rbx</span><br><span class="line"> 7ab:   41 89 fd                mov    %edi,%r13d</span><br><span class="line"> 7ae:   49 89 f6                mov    %rsi,%r14</span><br><span class="line"> 7b1:   4c 29 e5                sub    %r12,%rbp</span><br><span class="line"> 7b4:   48 83 ec 08             sub    $0x8,%rsp</span><br><span class="line"> 7b8:   48 c1 fd 03             sar    $0x3,%rbp</span><br><span class="line"> 7bc:   e8 27 fe ff ff          callq  5e8 &lt;_init&gt;</span><br><span class="line"> 7c1:   48 85 ed                test   %rbp,%rbp</span><br><span class="line"> 7c4:   74 20                   je     7e6 &lt;__libc_csu_init+0x56&gt;</span><br><span class="line"> 7c6:   31 db                   xor    %ebx,%ebx</span><br><span class="line"> 7c8:   0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)</span><br><span class="line"> 7cf:   00</span><br><span class="line"> 7d0:   4c 89 fa                mov    %r15,%rdx</span><br><span class="line"> 7d3:   4c 89 f6                mov    %r14,%rsi</span><br><span class="line"> 7d6:   44 89 ef                mov    %r13d,%edi</span><br><span class="line"> 7d9:   41 ff 14 dc             callq  *(%r12,%rbx,8)</span><br><span class="line"> 7dd:   48 83 c3 01             add    $0x1,%rbx</span><br><span class="line"> 7e1:   48 39 dd                cmp    %rbx,%rbp</span><br><span class="line"> 7e4:   75 ea                   jne    7d0 &lt;__libc_csu_init+0x40&gt;</span><br><span class="line"> 7e6:   48 83 c4 08             add    $0x8,%rsp</span><br><span class="line"> 7ea:   5b                      pop    %rbx</span><br><span class="line"> 7eb:   5d                      pop    %rbp</span><br><span class="line"> 7ec:   41 5c                   pop    %r12</span><br><span class="line"> 7ee:   41 5d                   pop    %r13</span><br><span class="line"> 7f0:   41 5e                   pop    %r14</span><br><span class="line"> 7f2:   41 5f                   pop    %r15</span><br><span class="line"> 7f4:   c3                      retq</span><br><span class="line"> 7f5:   90                      nop</span><br><span class="line"> 7f6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 7fd:   00 00 00</span><br><span class="line"></span><br><span class="line">0000000000000800 &lt;__libc_csu_fini&gt;:</span><br><span class="line"> 800:   f3 c3                   repz retq</span><br><span class="line"></span><br><span class="line">Disassembly of section .fini:</span><br><span class="line"></span><br><span class="line">0000000000000804 &lt;_fini&gt;:</span><br><span class="line"> 804:   48 83 ec 08             sub    $0x8,%rsp</span><br><span class="line"> 808:   48 83 c4 08             add    $0x8,%rsp</span><br><span class="line"> 80c:   c3                      retq</span><br><span class="line">rechard@DESKTOP-GTFTOTJ:~/selfLearn/LDD$</span><br></pre></td></tr></table></figure>

<h3 id="位置无关代码原理"><a href="#位置无关代码原理" class="headerlink" title="位置无关代码原理"></a>位置无关代码原理</h3><p>代码共享，数据独有， 通过GOF(global of table)，将映射时将偏移地址放到gof表里；</p>
<p><img src="/2022/06/30/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84.jpeg"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
</search>
